# Documentation

> Generated documentation

## Clc

- [Advanced Scripting Guide | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/advanced-scripting)
- [\alias | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/alias)
- [clc | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc): The interactive shell of the Hazelcast CLC allows you to run SQL queries and CLC commands.
- [clc atomiclong | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-atomiclong)
- [clc atomicreference | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-atomicreference)
- [clc cloud | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-cloud)
- [clc | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-commands): The <code>clc</code> command comes with subcommands for managing many aspects of a Hazelcast cluster.
- [clc completion | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-completion): Generates the autocompletion script for the specified shell. See each sub-command's help for details on how to use the generated script.
- [clc config | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-config)
- [clc cpmap | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-cpmap)
- [clc demo | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-demo)
- [clc home | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-home): Outputs the home directory of the Hazelcast CLC.
- [clc job | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-job)
- [clc list | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-list)
- [clc map | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-map)
- [clc multimap | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-multimap)
- [clc object | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-object)
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-platform)
- [clc project (Beta) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-project)
- [clc queue | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-queue)
- [clc script run | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-script): Runs the script in the given location.
- [clc serializer (Beta) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-serializer)
- [clc set | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-set)
- [clc snapshot | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-snapshot)
- [clc sql | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-sql): Executes a SQL statement.
- [clc template | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-template)
- [clc topic | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-topic)
- [clc version | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/clc-version): Prints the version information about the Hazelcast CLC.
- [Configuration for Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/configuration): Hazelcast CLC allows you to configure settings for cluster connection credentials, using a configuration file. Some of those settings may be overriden using global command-line parameters.
- [Configuration Format | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/configuration-format): The Hazelcast CLC recognizes the following items in the configuration file.
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/connect-to-cloud)
- [Connecting to Hazelcast Platform with Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/connect-to-platform): To use the Hazelcast CLC with Hazelcast Platform, you need to configure it with the correct connection credentials.
- [\def | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/def)
- [\echo | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/echo)
- [Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/environment-variables): The Hazelcast CLC recognizes the following environment variables.
- [\exit | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/exit)
- [Get Started with the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/get-started): In this tutorial, you'll learn how to use Hazelcast CLC commands to authenticate with Hazelcast Cloud and create two production clusters. You'll connect to and switch between the clusters from the command line. Finally, you'll perform some basic operations on a cluster from both the command line and by running a script to automate the same actions.
- [Installing the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/install-clc): The Hazelcast Command-Line Client (CLC) is available to install in macOS, Linux, and Windows environments.
- [Get Started With Hazelcast Jet Job Management | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/jet-job-management): In this tutorial, you'll learn the basics of how to manage stream processing pipelines using the Hazelcast CLC with Hazelcast Cloud. You'll see how to connect to a cluster on Cloud, and submit a sample Jet job that generates a stream of numbers. You'll also learn how to use simple commands to monitor and cancel jobs.
- [Keyboard Shortcuts | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/keyboard-shortcuts): The Hazelcast CLC supports the following keyboard shortcuts in the shell (interactive) mode.
- [Managing Clusters on Hazelcast Cloud Using the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/managing-cloud-clusters)
- [Hazelcast Command-Line Client (CLC) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/overview): You can use the Hazelcast Command Line Client (CLC) to connect to and interact with clusters on Hazelcast Cloud and Hazelcast Platform direct from the command line or through scripts.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/phone-homes)
- [Project Creator Guide | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/project-creator)
- [5.2.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/release-notes-5.2.0)
- [5.2.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/release-notes-5.2.1)
- [5.3.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/release-notes-5.3.0)
- [Document moved](https://docs.hazelcast.com/clc/5.5.1/release-notes-5.3.0-BETA-1)
- [Document moved](https://docs.hazelcast.com/clc/5.5.1/release-notes-5.3.0-BETA-2)
- [5.3.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/release-notes-5.3.1)
- [5.3.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/release-notes-5.3.2)
- [5.3.3 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/release-notes-5.3.3)
- [5.3.4 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/release-notes-5.3.4)
- [5.3.5 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/release-notes-5.3.5)
- [5.3.6 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/release-notes-5.3.6)
- [5.3.7 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/release-notes-5.3.7)
- [5.4.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/release-notes-5.4.0)
- [5.4.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/release-notes-5.4.1)
- [5.5.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/release-notes-5.5.0)
- [5.5.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/release-notes-5.5.1)
- [Upgrading the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/upgrade-clc)
- [Using Compact Serializer Generator | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.1/using-compact-serializer-generator)
- [Advanced Scripting Guide | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/advanced-scripting)
- [\alias | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/alias)
- [clc | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc): The interactive shell of the Hazelcast CLC allows you to run SQL queries and CLC commands.
- [clc atomiclong | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-atomiclong)
- [clc atomicreference | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-atomicreference)
- [clc cloud | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-cloud)
- [clc | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-commands): The <code>clc</code> command comes with subcommands for managing many aspects of a Hazelcast cluster.
- [clc completion | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-completion): Generates the autocompletion script for the specified shell. See each sub-command's help for details on how to use the generated script.
- [clc config | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-config)
- [clc cpmap | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-cpmap)
- [clc demo | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-demo)
- [clc home | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-home): Outputs the home directory of the Hazelcast CLC.
- [clc job | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-job)
- [clc list | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-list)
- [clc map | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-map)
- [clc multimap | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-multimap)
- [clc object | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-object)
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-platform)
- [clc project (Beta) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-project)
- [clc queue | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-queue)
- [clc script run | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-script): Runs the script in the given location.
- [clc serializer (Beta) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-serializer)
- [clc set | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-set)
- [clc snapshot | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-snapshot)
- [clc sql | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-sql): Executes a SQL statement.
- [clc template | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-template)
- [clc topic | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-topic)
- [clc version | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/clc-version): Prints the version information about the Hazelcast CLC.
- [Configuration for Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/configuration): Hazelcast CLC allows you to configure settings for cluster connection credentials, using a configuration file. Some of those settings may be overriden using global command-line parameters.
- [Configuration Format | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/configuration-format): The Hazelcast CLC recognizes the following items in the configuration file.
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/connect-to-cloud)
- [Connecting to Hazelcast Platform with Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/connect-to-platform): To use the Hazelcast CLC with Hazelcast Platform, you need to configure it with the correct connection credentials.
- [\def | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/def)
- [\echo | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/echo)
- [Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/environment-variables): The Hazelcast CLC recognizes the following environment variables.
- [\exit | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/exit)
- [Get Started with the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/get-started): In this tutorial, you'll learn how to use Hazelcast CLC commands to authenticate with Hazelcast Cloud and create two production clusters. You'll connect to and switch between the clusters from the command line. Finally, you'll perform some basic operations on a cluster from both the command line and by running a script to automate the same actions.
- [Installing the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/install-clc): The Hazelcast Command-Line Client (CLC) is available to install in macOS, Linux, and Windows environments.
- [Get Started With Hazelcast Jet Job Management | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/jet-job-management): In this tutorial, you'll learn the basics of how to manage stream processing pipelines using the Hazelcast CLC with Hazelcast Cloud. You'll see how to connect to a cluster on Cloud, and submit a sample Jet job that generates a stream of numbers. You'll also learn how to use simple commands to monitor and cancel jobs.
- [Keyboard Shortcuts | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/keyboard-shortcuts): The Hazelcast CLC supports the following keyboard shortcuts in the shell (interactive) mode.
- [Managing Clusters on Hazelcast Cloud Using the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/managing-cloud-clusters)
- [Hazelcast Command-Line Client (CLC) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/overview): You can use the Hazelcast Command Line Client (CLC) to connect to and interact with clusters on Hazelcast Cloud and Hazelcast Platform direct from the command line or through scripts.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/phone-homes)
- [Project Creator Guide | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/project-creator)
- [5.2.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/release-notes-5.2.0)
- [5.2.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/release-notes-5.2.1)
- [5.3.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/release-notes-5.3.0)
- [Document moved](https://docs.hazelcast.com/clc/5.5.0/release-notes-5.3.0-BETA-1)
- [Document moved](https://docs.hazelcast.com/clc/5.5.0/release-notes-5.3.0-BETA-2)
- [5.3.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/release-notes-5.3.1)
- [5.3.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/release-notes-5.3.2)
- [5.3.3 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/release-notes-5.3.3)
- [5.3.4 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/release-notes-5.3.4)
- [5.3.5 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/release-notes-5.3.5)
- [5.3.6 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/release-notes-5.3.6)
- [5.3.7 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/release-notes-5.3.7)
- [5.4.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/release-notes-5.4.0)
- [5.4.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/release-notes-5.4.1)
- [5.5.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/release-notes-5.5.0)
- [Upgrading the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/upgrade-clc)
- [Using Compact Serializer Generator | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.5.0/using-compact-serializer-generator)
- [Advanced Scripting Guide | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/advanced-scripting)
- [\alias | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/alias)
- [clc | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc): The interactive shell of the Hazelcast CLC allows you to run SQL queries and CLC commands.
- [clc atomiclong | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-atomiclong)
- [clc atomicreference | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-atomicreference)
- [clc cloud | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-cloud)
- [clc | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-commands): The <code>clc</code> command comes with subcommands for managing many aspects of a Hazelcast cluster.
- [clc completion | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-completion): Generates the autocompletion script for the specified shell. See each sub-command's help for details on how to use the generated script.
- [clc config | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-config)
- [clc cpmap | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-cpmap)
- [clc demo | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-demo)
- [clc home | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-home): Outputs the home directory of the Hazelcast CLC.
- [clc job | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-job)
- [clc list | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-list)
- [clc map | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-map)
- [clc multimap | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-multimap)
- [clc object | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-object)
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-platform)
- [clc project (Beta) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-project)
- [clc queue | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-queue)
- [clc script run | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-script): Runs the script in the given location.
- [clc serializer (Beta) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-serializer)
- [clc set | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-set)
- [clc snapshot | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-snapshot)
- [clc sql | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-sql): Executes a SQL statement.
- [clc template | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-template)
- [clc topic | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-topic)
- [clc version | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/clc-version): Prints the version information about the Hazelcast CLC.
- [Configuration for Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/configuration): Hazelcast CLC allows you to configure settings for cluster connection credentials, using a configuration file. Some of those settings may be overriden using global command-line parameters.
- [Configuration Format | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/configuration-format): The Hazelcast CLC recognizes the following items in the configuration file.
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/connect-to-cloud)
- [Connecting to Hazelcast Platform with Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/connect-to-platform): To use the Hazelcast CLC with Hazelcast Platform, you need to configure it with the correct connection credentials.
- [\def | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/def)
- [\echo | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/echo)
- [Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/environment-variables): The Hazelcast CLC recognizes the following environment variables.
- [\exit | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/exit)
- [Get Started with the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/get-started): In this tutorial, you'll learn how to use Hazelcast CLC commands to authenticate with Hazelcast Cloud and create two production clusters. You'll connect to and switch between the clusters from the command line. Finally, you'll perform some basic operations on a cluster from both the command line and by running a script to automate the same actions.
- [Installing the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/install-clc): The Hazelcast Command-Line Client (CLC) is available to install in macOS, Linux, and Windows environments.
- [Get Started With Hazelcast Jet Job Management | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/jet-job-management): In this tutorial, you'll learn the basics of how to manage stream processing pipelines using the Hazelcast CLC with Hazelcast Cloud. You'll see how to connect to a cluster on Cloud, and submit a sample Jet job that generates a stream of numbers. You'll also learn how to use simple commands to monitor and cancel jobs.
- [Keyboard Shortcuts | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/keyboard-shortcuts): The Hazelcast CLC supports the following keyboard shortcuts in the shell (interactive) mode.
- [Managing Clusters on Hazelcast Cloud Using the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/managing-cloud-clusters)
- [Hazelcast Command-Line Client (CLC) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/overview): You can use the Hazelcast Command Line Client (CLC) to connect to and interact with clusters on Hazelcast Cloud and Hazelcast Platform direct from the command line or through scripts.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/phone-homes)
- [Project Creator Guide | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/project-creator)
- [5.2.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/release-notes-5.2.0)
- [5.2.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/release-notes-5.2.1)
- [5.3.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/release-notes-5.3.0)
- [Document moved](https://docs.hazelcast.com/clc/5.4.1/release-notes-5.3.0-BETA-1)
- [Document moved](https://docs.hazelcast.com/clc/5.4.1/release-notes-5.3.0-BETA-2)
- [5.3.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/release-notes-5.3.1)
- [5.3.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/release-notes-5.3.2)
- [5.3.3 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/release-notes-5.3.3)
- [5.3.4 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/release-notes-5.3.4)
- [5.3.5 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/release-notes-5.3.5)
- [5.3.6 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/release-notes-5.3.6)
- [5.3.7 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/release-notes-5.3.7)
- [5.4.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/release-notes-5.4.0)
- [5.4.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/release-notes-5.4.1)
- [Upgrading the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/upgrade-clc)
- [Using Compact Serializer Generator | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.1/using-compact-serializer-generator)
- [Advanced Scripting Guide | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/advanced-scripting)
- [\alias | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/alias)
- [clc | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc): The interactive shell of the Hazelcast CLC allows you to run SQL queries and CLC commands.
- [clc atomiclong | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-atomiclong)
- [clc atomicreference | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-atomicreference)
- [clc cloud | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-cloud)
- [clc | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-commands): The <code>clc</code> command comes with subcommands for managing many aspects of a Hazelcast cluster.
- [clc completion | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-completion): Generates the autocompletion script for the specified shell. See each sub-command's help for details on how to use the generated script.
- [clc config | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-config)
- [clc cpmap | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-cpmap)
- [clc demo | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-demo)
- [clc home | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-home): Outputs the home directory of the Hazelcast CLC.
- [clc job | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-job)
- [clc list | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-list)
- [clc map | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-map)
- [clc multimap | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-multimap)
- [clc object | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-object)
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-platform)
- [clc project (Beta) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-project)
- [clc queue | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-queue)
- [clc script run | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-script): Runs the script in the given location.
- [clc serializer (Beta) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-serializer)
- [clc set | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-set)
- [clc snapshot | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-snapshot)
- [clc sql | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-sql): Executes a SQL statement.
- [clc template | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-template)
- [clc topic | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-topic)
- [clc version | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/clc-version): Prints the version information about the Hazelcast CLC.
- [Configuration for Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/configuration): Hazelcast CLC allows you to configure settings for cluster connection credentials, using a configuration file. Some of those settings may be overriden using global command-line parameters.
- [Configuration Format | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/configuration-format): The Hazelcast CLC recognizes the following items in the configuration file.
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/connect-to-cloud)
- [Connecting to Hazelcast Platform with Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/connect-to-platform): To use the Hazelcast CLC with Hazelcast Platform, you need to configure it with the correct connection credentials.
- [\def | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/def)
- [\echo | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/echo)
- [Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/environment-variables): The Hazelcast CLC recognizes the following environment variables.
- [\exit | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/exit)
- [Get Started with the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/get-started): In this tutorial, you'll learn how to use Hazelcast CLC commands to authenticate with Hazelcast Cloud and create two production clusters. You'll connect to and switch between the clusters from the command line. Finally, you'll perform some basic operations on a cluster from both the command line and by running a script to automate the same actions.
- [Installing the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/install-clc): The Hazelcast Command-Line Client (CLC) is available to install in macOS, Linux, and Windows environments.
- [Get Started With Hazelcast Jet Job Management | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/jet-job-management): In this tutorial, you'll learn the basics of how to manage stream processing pipelines using the Hazelcast CLC with Hazelcast Cloud. You'll see how to connect to a cluster on Cloud, and submit a sample Jet job that generates a stream of numbers. You'll also learn how to use simple commands to monitor and cancel jobs.
- [Keyboard Shortcuts | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/keyboard-shortcuts): The Hazelcast CLC supports the following keyboard shortcuts in the shell (interactive) mode.
- [Managing Clusters on Hazelcast Cloud Using the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/managing-cloud-clusters)
- [Hazelcast Command-Line Client (CLC) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/overview): You can use the Hazelcast Command Line Client (CLC) to connect to and interact with clusters on Hazelcast Cloud and Hazelcast Platform direct from the command line or through scripts.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/phone-homes)
- [Project Creator Guide | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/project-creator)
- [5.2.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/release-notes-5.2.0)
- [5.2.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/release-notes-5.2.1)
- [5.3.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/release-notes-5.3.0)
- [Document moved](https://docs.hazelcast.com/clc/5.4.0/release-notes-5.3.0-BETA-1)
- [Document moved](https://docs.hazelcast.com/clc/5.4.0/release-notes-5.3.0-BETA-2)
- [5.3.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/release-notes-5.3.1)
- [5.3.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/release-notes-5.3.2)
- [5.3.3 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/release-notes-5.3.3)
- [5.3.4 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/release-notes-5.3.4)
- [5.3.5 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/release-notes-5.3.5)
- [5.3.6 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/release-notes-5.3.6)
- [5.3.7 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/release-notes-5.3.7)
- [5.4.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/release-notes-5.4.0)
- [Upgrading the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/upgrade-clc)
- [Using Compact Serializer Generator | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.4.0/using-compact-serializer-generator)
- [Advanced Scripting Guide | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/advanced-scripting)
- [\alias | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/alias)
- [clc | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc): The interactive shell of the Hazelcast CLC allows you to run SQL queries and CLC commands.
- [clc atomiclong | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-atomiclong)
- [clc atomicreference | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-atomicreference)
- [clc | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-commands): The <code>clc</code> command comes with subcommands for managing many aspects of a Hazelcast cluster.
- [clc completion | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-completion): Generates the autocompletion script for the specified shell. See each sub-command's help for details on how to use the generated script.
- [clc config | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-config)
- [clc demo | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-demo)
- [clc home | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-home): Outputs the home directory of the Hazelcast CLC.
- [clc job | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-job)
- [clc list | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-list)
- [clc map | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-map)
- [clc multimap | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-multimap)
- [clc object | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-object)
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-platform)
- [clc project (Beta) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-project)
- [clc queue | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-queue)
- [clc script run | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-script): Runs the script in the given local or HTTP location. Advanced script currently only supports local files.
- [clc serializer (Beta) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-serializer)
- [clc set | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-set)
- [clc snapshot | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-snapshot)
- [clc sql | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-sql): Executes a SQL statement.
- [clc template | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-template)
- [clc topic | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-topic)
- [clc version | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-version): Prints the version information about the Hazelcast CLC.
- [clc viridian | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/clc-viridian)
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/config-wizard)
- [Configuration for Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/configuration): Hazelcast CLC allows you to configure settings for cluster connection credentials, using a configuration file. Some of those settings may be overriden using global command-line parameters.
- [Configuration Format | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/configuration-format): The Hazelcast CLC recognizes the following items in the configuration file.
- [Connecting to Hazelcast Platform with Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/connect-to-platform): To use the Hazelcast CLC with Hazelcast Platform, you need to configure it with the correct connection credentials.
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/connect-to-viridian)
- [\def | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/def)
- [\echo | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/echo)
- [Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/environment-variables): The Hazelcast CLC recognizes the following environment variables.
- [\exit | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/exit)
- [Get Started with the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/get-started): In this tutorial, you'll learn how to use Hazelcast CLC commands to authenticate with Hazelcast Cloud and create two production clusters. You'll connect to and switch between the clusters from the command line. Finally, you'll perform some basic operations on a cluster from both the command line and by running a script to automate the same actions.
- [Installing the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/install-clc): The Hazelcast Command-Line Client (CLC) is available to install in macOS, Linux, and Windows environments.
- [Get Started With Hazelcast Jet Job Management | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/jet-job-management): In this tutorial, you'll learn the basics of how to manage stream processing pipelines using the Hazelcast CLC with Hazelcast Cloud. You'll see how to connect to a cluster on Cloud, and submit a sample Jet job that generates a stream of numbers. You'll also learn how to use simple commands to monitor and cancel jobs.
- [Keyboard Shortcuts | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/keyboard-shortcuts): The Hazelcast CLC supports the following keyboard shortcuts in the shell (interactive) mode.
- [Managing Clusters on Hazelcast Viridian Cloud Using the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/managing-viridian-clusters)
- [Hazelcast Command-Line Client (CLC) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/overview): You can use the Hazelcast Command Line Client (CLC) to connect to and interact with clusters on Hazelcast Cloud and Hazelcast Platform direct from the command line or through scripts.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/phone-homes)
- [Project Creator Guide | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/project-creator)
- [5.2.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/release-notes-5.2.0)
- [5.2.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/release-notes-5.2.1)
- [5.3.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/release-notes-5.3.0)
- [Document moved](https://docs.hazelcast.com/clc/5.3.7/release-notes-5.3.0-BETA-1)
- [Document moved](https://docs.hazelcast.com/clc/5.3.7/release-notes-5.3.0-BETA-2)
- [5.3.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/release-notes-5.3.1)
- [5.3.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/release-notes-5.3.2)
- [5.3.3 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/release-notes-5.3.3)
- [5.3.4 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/release-notes-5.3.4)
- [5.3.5 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/release-notes-5.3.5)
- [5.3.6 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/release-notes-5.3.6)
- [5.3.7 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/release-notes-5.3.7)
- [Upgrading the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/upgrade-clc)
- [Using Compact Serializer Generator | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.7/using-compact-serializer-generator)
- [Advanced Scripting Guide | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/advanced-scripting)
- [\alias | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/alias)
- [clc | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc): The interactive shell of the Hazelcast CLC allows you to run SQL queries and CLC commands.
- [clc atomiclong | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-atomiclong)
- [clc atomicreference | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-atomicreference)
- [clc | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-commands): The <code>clc</code> command comes with subcommands for managing many aspects of a Hazelcast cluster.
- [clc completion | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-completion): Generates the autocompletion script for the specified shell. See each sub-command's help for details on how to use the generated script.
- [clc config | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-config)
- [clc demo | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-demo)
- [clc home | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-home): Outputs the home directory of the Hazelcast CLC.
- [clc job | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-job)
- [clc list | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-list)
- [clc map | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-map)
- [clc multimap | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-multimap)
- [clc object | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-object)
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-platform)
- [clc project (Beta) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-project)
- [clc queue | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-queue)
- [clc script run | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-script): Runs the script in the given local or HTTP location. Advanced script currently only supports local files.
- [clc serializer (Beta) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-serializer)
- [clc set | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-set)
- [clc snapshot | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-snapshot)
- [clc sql | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-sql): Executes a SQL statement.
- [clc template | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-template)
- [clc topic | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-topic)
- [clc version | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-version): Prints the version information about the Hazelcast CLC.
- [clc viridian | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/clc-viridian)
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/config-wizard)
- [Configuration for Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/configuration): Hazelcast CLC allows you to configure settings for cluster connection credentials, using a configuration file. Some of those settings may be overriden using global command-line parameters.
- [Configuration Format | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/configuration-format): The Hazelcast CLC recognizes the following items in the configuration file.
- [Connecting to Hazelcast Platform with Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/connect-to-platform): To use the Hazelcast CLC with Hazelcast Platform, you need to configure it with the correct connection credentials.
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/connect-to-viridian)
- [\def | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/def)
- [\echo | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/echo)
- [Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/environment-variables): The Hazelcast CLC recognizes the following environment variables.
- [\exit | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/exit)
- [Get Started with the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/get-started): In this tutorial, you'll learn how to use Hazelcast CLC commands to authenticate with Hazelcast Cloud and create two production clusters. You'll connect to and switch between the clusters from the command line. Finally, you'll perform some basic operations on a cluster from both the command line and by running a script to automate the same actions.
- [Installing the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/install-clc): The Hazelcast Command-Line Client (CLC) is available to install in macOS, Linux, and Windows environments.
- [Get Started With Hazelcast Jet Job Management | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/jet-job-management): In this tutorial, you'll learn the basics of how to manage stream processing pipelines using the Hazelcast CLC with Hazelcast Cloud. You'll see how to connect to a cluster on Cloud, and submit a sample Jet job that generates a stream of numbers. You'll also learn how to use simple commands to monitor and cancel jobs.
- [Keyboard Shortcuts | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/keyboard-shortcuts): The Hazelcast CLC supports the following keyboard shortcuts in the shell (interactive) mode.
- [Managing Clusters on Hazelcast Viridian Cloud Using the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/managing-viridian-clusters)
- [Hazelcast Command-Line Client (CLC) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/overview): You can use the Hazelcast Command Line Client (CLC) to connect to and interact with clusters on Hazelcast Cloud and Hazelcast Platform direct from the command line or through scripts.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/phone-homes)
- [Project Creator Guide | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/project-creator)
- [5.2.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/release-notes-5.2.0)
- [5.2.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/release-notes-5.2.1)
- [5.3.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/release-notes-5.3.0)
- [Document moved](https://docs.hazelcast.com/clc/5.3.6/release-notes-5.3.0-BETA-1)
- [Document moved](https://docs.hazelcast.com/clc/5.3.6/release-notes-5.3.0-BETA-2)
- [5.3.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/release-notes-5.3.1)
- [5.3.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/release-notes-5.3.2)
- [5.3.3 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/release-notes-5.3.3)
- [5.3.4 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/release-notes-5.3.4)
- [5.3.5 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/release-notes-5.3.5)
- [5.3.6 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/release-notes-5.3.6)
- [Upgrading the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/upgrade-clc)
- [Using Compact Serializer Generator | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.6/using-compact-serializer-generator)
- [Advanced Scripting Guide | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/advanced-scripting)
- [User Defined Aliases | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/alias)
- [clc | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc): The interactive shell of the Hazelcast CLC allows you to run SQL queries and CLC commands.
- [clc atomic-long | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-atomic-long)
- [clc | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-commands): The <code>clc</code> command comes with subcommands for managing many aspects of a Hazelcast cluster.
- [clc completion | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-completion): Generates the autocompletion script for the specified shell. See each sub-command's help for details on how to use the generated script.
- [clc config | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-config)
- [clc demo | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-demo)
- [clc home | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-home): Outputs the home directory of the Hazelcast CLC.
- [clc job | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-job)
- [clc list | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-list)
- [clc map | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-map)
- [clc multi-map | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-multimap)
- [clc object | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-object)
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-platform)
- [clc project (Beta) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-project)
- [clc queue | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-queue)
- [clc script | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-script): Runs the script in the given local or HTTP location. Advanced script currently only supports local files.
- [clc serializer generator (Beta) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-serializer)
- [clc serializer generator (Beta) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-serializer-generator)
- [clc set | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-set)
- [clc snapshot | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-snapshot)
- [clc sql | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-sql): Executes a SQL statement.
- [clc template | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-template)
- [clc topic | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-topic)
- [clc version | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-version): Prints the version information about the Hazelcast CLC.
- [clc viridian | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/clc-viridian)
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/config-wizard)
- [Configuration for Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/configuration): Hazelcast CLC allows you to configure settings for cluster connection credentials, using a configuration file. Some of those settings may be overriden using global command-line parameters.
- [Configuration Format | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/configuration-format): The Hazelcast CLC recognizes the following items in the configuration file.
- [Connecting to Hazelcast Platform with Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/connect-to-platform): To use the Hazelcast CLC with Hazelcast Platform, you need to configure it with the correct connection credentials.
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/connect-to-viridian)
- [Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/environment-variables): The Hazelcast CLC recognizes the following environment variables.
- [Get Started with the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/get-started): In this tutorial, you'll learn how to use Hazelcast CLC commands to authenticate with Hazelcast Cloud and create two production clusters. You'll connect to and switch between the clusters from the command line. Finally, you'll perform some basic operations on a cluster from both the command line and by running a script to automate the same actions.
- [Installing the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/install-clc): The Hazelcast Command-Line Client (CLC) is available to install in macOS, Linux, and Windows environments.
- [Get Started With Hazelcast Jet Job Management | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/jet-job-management): In this tutorial, you'll learn the basics of how to manage stream processing pipelines using the Hazelcast CLC with Hazelcast Cloud. You'll see how to connect to a cluster on Cloud, and submit a sample Jet job that generates a stream of numbers. You'll also learn how to use simple commands to monitor and cancel jobs.
- [Keyboard Shortcuts | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/keyboard-shortcuts): The Hazelcast CLC supports the following keyboard shortcuts in the shell (interactive) mode.
- [Managing Clusters on Hazelcast Viridian Cloud Using the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/managing-viridian-clusters)
- [Hazelcast Command-Line Client (CLC) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/overview): You can use the Hazelcast Command Line Client (CLC) to connect to and interact with clusters on Hazelcast Cloud and Hazelcast Platform direct from the command line or through scripts.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/phone-homes)
- [5.2.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/release-notes-5.2.0)
- [5.2.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/release-notes-5.2.1)
- [5.3.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/release-notes-5.3.0)
- [Document moved](https://docs.hazelcast.com/clc/5.3.5/release-notes-5.3.0-BETA-1)
- [Document moved](https://docs.hazelcast.com/clc/5.3.5/release-notes-5.3.0-BETA-2)
- [5.3.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/release-notes-5.3.1)
- [5.3.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/release-notes-5.3.2)
- [5.3.3 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/release-notes-5.3.3)
- [5.3.4 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/release-notes-5.3.4)
- [5.3.5 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/release-notes-5.3.5)
- [Upgrading the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/upgrade-clc)
- [Using Compact Serializer Generator | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.5/using-compact-serializer-generator)
- [clc | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc): The interactive shell of the Hazelcast CLC allows you to run SQL queries and CLC commands.
- [clc atomic-long | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-atomic-long)
- [clc | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-commands): The <code>clc</code> command comes with subcommands for managing many aspects of a Hazelcast cluster.
- [clc completion | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-completion): Generates the autocompletion script for the specified shell. See each sub-command's help for details on how to use the generated script.
- [clc config | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-config)
- [clc demo | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-demo)
- [clc home | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-home): Outputs the home directory of the Hazelcast CLC.
- [clc job | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-job)
- [clc list | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-list)
- [clc map | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-map)
- [clc multi-map | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-multimap)
- [clc object | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-object)
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-platform)
- [clc project (Beta) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-project)
- [clc queue | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-queue)
- [clc script | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-script): Runs the script in the given local or HTTP location.
- [clc serializer generator (Beta) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-serializer-generator)
- [clc set | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-set)
- [clc snapshot | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-snapshot)
- [clc sql | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-sql): Executes a SQL statement.
- [clc topic | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-topic)
- [clc version | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-version): Prints the version information about the Hazelcast CLC.
- [clc viridian | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/clc-viridian)
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/config-wizard)
- [Configuration for Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/configuration): Hazelcast CLC allows you to configure settings for cluster connection credentials, using a configuration file. Some of those settings may be overriden using global command-line parameters.
- [Configuration Format | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/configuration-format): The Hazelcast CLC recognizes the following items in the configuration file.
- [Connecting to Hazelcast Platform with Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/connect-to-platform): To use the Hazelcast CLC with Hazelcast Platform, you need to configure it with the correct connection credentials.
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/connect-to-viridian)
- [Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/environment-variables): The Hazelcast CLC recognizes the following environment variables.
- [Get Started with the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/get-started): In this tutorial, you'll learn how to use Hazelcast CLC commands to authenticate with Hazelcast Cloud and create two production clusters. You'll connect to and switch between the clusters from the command line. Finally, you'll perform some basic operations on a cluster from both the command line and by running a script to automate the same actions.
- [Installing the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/install-clc): The Hazelcast Command-Line Client (CLC) is available to install in macOS, Linux, and Windows environments.
- [Get Started With Hazelcast Jet Job Management | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/jet-job-management): In this tutorial, you'll learn the basics of how to manage stream processing pipelines using the Hazelcast CLC with Hazelcast Cloud. You'll see how to connect to a cluster on Cloud, and submit a sample Jet job that generates a stream of numbers. You'll also learn how to use simple commands to monitor and cancel jobs.
- [Keyboard Shortcuts | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/keyboard-shortcuts): The Hazelcast CLC supports the following keyboard shortcuts in the shell (interactive) mode.
- [Managing Clusters on Hazelcast Viridian Cloud Using the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/managing-viridian-clusters)
- [Hazelcast Command-Line Client (CLC) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/overview): You can use the Hazelcast Command Line Client (CLC) to connect to and interact with clusters on Hazelcast Cloud and Hazelcast Platform direct from the command line or through scripts.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/phone-homes)
- [5.2.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/release-notes-5.2.0)
- [5.2.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/release-notes-5.2.1)
- [5.3.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/release-notes-5.3.0)
- [Document moved](https://docs.hazelcast.com/clc/5.3.4/release-notes-5.3.0-BETA-1)
- [Document moved](https://docs.hazelcast.com/clc/5.3.4/release-notes-5.3.0-BETA-2)
- [5.3.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/release-notes-5.3.1)
- [5.3.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/release-notes-5.3.2)
- [5.3.3 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/release-notes-5.3.3)
- [5.3.4 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/release-notes-5.3.4)
- [Upgrading the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.3.4/upgrade-clc)
- [clc | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/clc): The interactive shell of the Hazelcast CLC allows you to run SQL queries and CLC commands.
- [clc | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/clc-commands): The <code>clc</code> command comes with subcommands for managing many aspects of a Hazelcast cluster.
- [clc completion | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/clc-completion): Generates the autocompletion script for the specified shell. See each sub-command's help for details on how to use the generated script.
- [clc config | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/clc-config)
- [clc home | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/clc-home): Outputs the home directory of the Hazelcast CLC.
- [clc map | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/clc-map)
- [clc object | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/clc-object)
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/clc-platform)
- [clc sql | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/clc-sql): Executes a SQL statement.
- [clc version | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/clc-version): Prints the version information about the Hazelcast CLC.
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/clc-viridian)
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/config-wizard)
- [Configuration for Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/configuration): Hazelcast CLC allows you to configure settings for cluster connection credentials, using a configuration file. Some of those settings may be overriden using global command-line parameters.
- [Connecting to Hazelcast Platform with Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/connect-to-platform): To use the Hazelcast CLC with Hazelcast Platform, you need to configure it with the correct connection credentials.
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/connect-to-viridian)
- [Get Started With the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/get-started): In this tutorial, you'll learn the basics of how to configure the Hazelcast CLC, start it, and connect it to a cluster on Hazelcast Cloud. You'll also see how to switch between clusters, using the Hazelcast CLC. Finally, you'll perform some basic operations on a cluster from the command line and then by running a script to automate the same actions.
- [Installing the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/install-clc): The Hazelcast Command-Line Client (CLC) is available to install in macOS, Linux, and Windows environments.
- [Keyboard Shortcuts | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/keyboard-shortcuts): The Hazelcast CLC supports the following keyboard shortcuts.
- [Hazelcast Command-Line Client (CLC) | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/overview): You can use the Hazelcast Command Line Client (CLC) to connect to and interact with clusters on Hazelcast Cloud and Hazelcast Platform, direct from the command line or through scripts.
- [5.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/release-notes)
- [Upgrading the Hazelcast CLC | Hazelcast Documentation](https://docs.hazelcast.com/clc/5.2.1/upgrade-clc)

## Cloud

- [Accept Invitation to Organization | Hazelcast Documentation](https://docs.hazelcast.com/cloud/accept-invitation): When the admin user invites someone to join the organization, an invitation is sent to the specified email address unless that email address already exists in Cloud.
- [Adding a Mapping to a Kafka Data Connection | Hazelcast Documentation](https://docs.hazelcast.com/cloud/add-kafka-mapping): You can only add a new mapping to an existing Kafka data connection. You cannot update an existing mapping or data connection using the connector wizard.
- [Adding a Mapping to a PostgreSQL Data Connection | Hazelcast Documentation](https://docs.hazelcast.com/cloud/add-postgres-mapping): You can only add a new mapping to an existing PostgreSQL data connection. You cannot update an existing mapping or data connection using the connector wizard.
- [Add Users | Hazelcast Documentation](https://docs.hazelcast.com/cloud/add-users): To share resources across the organization, you must add users to the account.
- [Client Connections | Hazelcast Documentation](https://docs.hazelcast.com/cloud/authorize-connections): You can restrict access to your cluster to allow only authorized clients to connect to it.
- [Backing up and Restoring Data | Hazelcast Documentation](https://docs.hazelcast.com/cloud/backup-and-restore): You can create a backup of your data on a production cluster and later restore new clusters from that backup.
- [Change Password | Hazelcast Documentation](https://docs.hazelcast.com/cloud/change-password): When logging in using a username and password, Hazelcast recommends that you change your password regularly.
- [Charts and Statistics | Hazelcast Documentation](https://docs.hazelcast.com/cloud/charts-and-stats): You can monitor the performance metrics and status of your clusters from the cluster dashboard.
- [Working with Cluster-Side Modules in Cloud | Hazelcast Documentation](https://docs.hazelcast.com/cloud/cluster-side-modules): Cluster-side modules are Java classes that a cluster can execute or store in the cloud. You can write cluster-side modules to execute custom code or store custom objects. This guide describes the workflows and best practices for implementing cluster-side modules.
- [Connecting to Cloud Clusters | Hazelcast Documentation](https://docs.hazelcast.com/cloud/connect-to-cluster): To communicate with a cluster, you need a client. Hazelcast offers clients in a variety of languages as well as a command-line client for quick prototyping and scripting.
- [Connector Wizard for Cloud | Hazelcast Documentation](https://docs.hazelcast.com/cloud/connector-wizard): Hazelcast Cloud has a built-in connector wizard, which simplifies the process of connecting to external data sources. For supported platforms, the connector wizard removes the need to write or install a platform-specific connector.
- [Create an Account | Hazelcast Documentation](https://docs.hazelcast.com/cloud/create-account): You must create an account before you can use Cloud. Creating an account creates an organization with a single user. You can sign up using an email address and password, or with a GitHub or Google account to use our Standard or Trial editions.
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/cloud/create-budget-tracker)
- [Creating Cloud Clusters | Hazelcast Documentation](https://docs.hazelcast.com/cloud/create-clusters): You can create clusters, using the console or an API.
- [Creating a Cloud Dedicated Cluster | Hazelcast Documentation](https://docs.hazelcast.com/cloud/create-dedicated-cluster): You can create a cluster on Cloud Dedicated by providing your resource requirements and choosing how to host your cluster. You have the option of regions, machine types, and more.
- [Creating a Data Connection to Kafka | Hazelcast Documentation](https://docs.hazelcast.com/cloud/create-kafka-connection): You can create a data connection to a Kafka topic on any cloud-based Kafka cluster.
- [Creating a Data Connection to PostgreSQL | Hazelcast Documentation](https://docs.hazelcast.com/cloud/create-postgres-connection): You can create a data connection to any cloud-based PostgreSQL database instance.
- [Creating a Cloud Standard Cluster | Hazelcast Documentation](https://docs.hazelcast.com/cloud/create-serverless-cluster): You can create a cluster for development or production.
- [Deploying Cluster-Side Modules to Cloud Clusters | Hazelcast Documentation](https://docs.hazelcast.com/cloud/custom-classes-upload): Before clusters can execute or store your xref:cluster-side-modules.adoc[cluster-side modules], they need to be packaged into a single file and uploaded to the cluster as custom classes. You can upload cluster-side modules, using the console, or the Maven plugin.
- [Configuring Distributed Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/cloud/data-structures): Hazelcast offers distributed implementations of common data structures. From the Cloud console, you can create new custom configurations or modify the default configuration for these data structures.
- [Cloud Dedicated Clusters | Hazelcast Documentation](https://docs.hazelcast.com/cloud/dedicated-cluster): Dedicated is a managed cloud service that allows you to maintain control over the hardware, resources, and deployment options that are available to your cluster. Dedicated means you get specific servers (cloud instances) all to yourself. You do not share infrastructure with other customers, and your clusters are not accessible over the public internet.
- [Delete Organization | Hazelcast Documentation](https://docs.hazelcast.com/cloud/delete-account): If you no longer need to access your clusters, you can delete your organizaton. To avoid additional charges while your clusters are not in use, consider xref:stop-and-resume.adoc[pausing] them instead.
- [Deleting a Data Connection to Kafka | Hazelcast Documentation](https://docs.hazelcast.com/cloud/delete-kafka-connection): You can delete a data connection if you no longer need it, or if you need to recreate the data connection with different details. This functionality is not currently available in the connector wizard but you can use SQL instead.
- [Deleting a Data Connection to PostgreSQL | Hazelcast Documentation](https://docs.hazelcast.com/cloud/delete-postgres-connection): You can delete a data connection if you no longer need it, or if you need to recreate the data connection with different details. This functionality is not currently available in the connector wizard but you can use SQL instead.
- [Deleting a Cluster | Hazelcast Documentation](https://docs.hazelcast.com/cloud/deleting-a-cluster): If you no longer need a cluster, you can delete it.
- [Creating API Keys | Hazelcast Documentation](https://docs.hazelcast.com/cloud/developer): To connect a client to your account, you need an API key and an API secret. These credentials authenticate clients to your account. You can manage these credentials in your account settings.
- [Developer Guide for Cloud | Hazelcast Documentation](https://docs.hazelcast.com/cloud/developer-guide): Use these topics to learn how to build applications, using APIs and tools.
- [Downloading Cluster Logs | Hazelcast Documentation](https://docs.hazelcast.com/cloud/download-logs): From a Cloud Standard cluster, you can download the logs of all members in your cluster.
- [Executing SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/cloud/execute-sql-queries): You can open a SQL shell in your cluster and submit SQL queries directly from a web browser.
- [Cloud Trial | Hazelcast Documentation](https://docs.hazelcast.com/cloud/free-trial): Explore the capabilities of Hazelcast Cloud Standard with a free 14-day trial.
- [Cloud Hello World | Hazelcast Documentation](https://docs.hazelcast.com/cloud/get-started): In this tutorial, you'll learn how to connect a client to a cluster and use SQL to query data in the cluster.
- [Creating Mappings to IMaps | Hazelcast Documentation](https://docs.hazelcast.com/cloud/imap-connections): To run a SQL query against data in an IMap on a Hazelcast Cloud cluster, you need to create a mapping. The easiest way to do this is to use the connector wizard.
- [Invite User | Hazelcast Documentation](https://docs.hazelcast.com/cloud/invite-user): You can invite users to the account by sending an invitation to the email address they will use to sign in.
- [IP Whitelisting | Hazelcast Documentation](https://docs.hazelcast.com/cloud/ip-white-list): If your clusters are exposed to the Internet, they allow any authenticated client to connect to them by default. To grant access only to specific clients, you can add their IP addresses to a whitelist.
- [JCache Configuration | Hazelcast Documentation](https://docs.hazelcast.com/cloud/jcache)
- [Sample JDBC Client | Hazelcast Documentation](https://docs.hazelcast.com/cloud/jdbc-sample-client): Hazelcast provides a sample JDBC client, which you can use to create a custom client.
- [Managing Data Connections to Kafka Sources or Sinks | Hazelcast Documentation](https://docs.hazelcast.com/cloud/kafka-connections): To query data in a Kafka source or sink using SQL, you need to xref:create-kafka-connection.adoc[create a data connection] from your Cloud cluster to your Kafka broker, and a mapping to the topic data you want to query. The easiest way to do this is to use the connector wizard.
- [Logging | Hazelcast Documentation](https://docs.hazelcast.com/cloud/logging): Cluster logs are useful for monitoring your cluster or troubleshooting issues. Depending on your cluster edition, you can stream cluster logs directly to your IDE, download them, or integrate with a log management system.
- [Manage Your API Key | Hazelcast Documentation](https://docs.hazelcast.com/cloud/manage-api-key): Your API key provides the credentials needed to authenticate clients to your account.
- [Management Center for Cloud | Hazelcast Documentation](https://docs.hazelcast.com/cloud/management-center): You can use Management Center to monitor your cluster. Management Center allows you to view insights about cluster state, data structure metrics, and other metrics.
- [Map Configuration | Hazelcast Documentation](https://docs.hazelcast.com/cloud/map-configurations)
- [Build a MapStore for Hazelcast Cloud | Hazelcast Documentation](https://docs.hazelcast.com/cloud/maploader-and-mapstore): The Hazelcast map module classes in the link:https://docs.hazelcast.org/docs/latest/javadoc/com/hazelcast/map/package-summary.html[Hazelcast Root API] provide in-memory data stores. The MapStore module classes allow you to integrate data from external data sources, such as databases. This means that, if the requested value is not available in the in-memory data store, Hazelcast can attempt to load it from your external data sources. You can also use MapStore to store or delete values in your external data source. You can implement your own logic in the MapStore methods.
- [Hazelcast Cloud Maven Plugin | Hazelcast Documentation](https://docs.hazelcast.com/cloud/maven-plugin-hazelcast): This Maven plugin is a Java development tool for testing and deploying xref:cluster-side-modules.adoc[cluster-side modules].
- [Migrating an Embedded Application to Cloud | Hazelcast Documentation](https://docs.hazelcast.com/cloud/migrate-to-cloud): To migrate an existing application from embedded Hazelcast, you need to &lt;&lt;refactor, refactor your code&gt;&gt; as well as consider how you &lt;&lt;migrate, migrate any existing data to the cloud&gt;&gt;.
- [Monitoring Cloud Clusters | Hazelcast Documentation](https://docs.hazelcast.com/cloud/monitor-clusters): You can use monitoring tools to monitor your cluster for overall health as well as watch for events that require investigation or intervention.
- [Multi-Factor Authentication | Hazelcast Documentation](https://docs.hazelcast.com/cloud/multi-factor-authentication): If enabled at organization level, all users associated with the organization must enable Multi-factor Authentication (MFA). If disabled, users can choose whether or not to enable MFA for their sign-in. By default, MFA is disabled.
- [Organization | Hazelcast Documentation](https://docs.hazelcast.com/cloud/organization): When you create a Cloud account, an organization is created. This organization has a single administrator who has the same set of permissions that are granted to organization users, plus access to organization-level settings such as user management and payments. All resource-related information belongs to the organization.
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/cloud/organizations-and-accounts): An Organization account allows one or more users to use shared resources, such as clusters. Every account is owned by an organization and is controlled by an admin user. Users can belong to a single organization only.
- [Hazelcast Cloud | Hazelcast Documentation](https://docs.hazelcast.com/cloud/overview): Hazelcast Cloud simplifies deployments of Hazelcast Platform to the cloud. Hazelcast manages the underlying infrastructure allowing you to focus on building applications for stream and batch processing, low-latency querying, and caching.
- [Billing and Payments | Hazelcast Documentation](https://docs.hazelcast.com/cloud/payment-methods): When you sign up for the Standard or Dedicated Edition of Cloud, you must provide a payment method. You can view a summary of your invoices and usage at any time.
- [Managing Data Connections to PostgreSQL Sources or Sinks | Hazelcast Documentation](https://docs.hazelcast.com/cloud/postgres-connections): To query data in a PostgreSQL source or sink using SQL, you need to xref:create-postgres-connection.adoc[create a data connection] from your Cloud cluster to the database instance, and a mapping to the data you want to query. The easiest way to do this is to use the connector wizard.
- [Queue Configuration | Hazelcast Documentation](https://docs.hazelcast.com/cloud/queue)
- [Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/cloud/release-notes)
- [Remove User | Hazelcast Documentation](https://docs.hazelcast.com/cloud/remove-user): You can remove organization users from your account at any time through the User Management screen.
- [Cloud Standard Clusters | Hazelcast Documentation](https://docs.hazelcast.com/cloud/serverless-cluster): Cloud Standard is a managed cloud service that offers a pay-as-you-go pricing model. Standard clusters auto-scale to provide the resources that your application needs. You pay only for the resources that your application consumes.
- [Pausing and Resuming Clusters | Hazelcast Documentation](https://docs.hazelcast.com/cloud/stop-and-resume): You can avoid charges accumulating in your account by pausing clusters when you aren't using them.
- [Streaming Cluster Logs | Hazelcast Documentation](https://docs.hazelcast.com/cloud/stream-logs): From a Cloud Standard cluster, you can stream the last 1,000 lines of your cluster logs, using the Maven plugin.
- [Teams and User Roles | Hazelcast Documentation](https://docs.hazelcast.com/cloud/teams-and-users): To collaborate with other team members, you can allow them to access specific clusters by inviting them to a team and assigning them roles based on what actions they need to perform on the team's clusters.
- [Developer Tools | Hazelcast Documentation](https://docs.hazelcast.com/cloud/tools): Hazelcast provides a variety of developer tools for creating, testing and debugging applications.
- [Topic Configuration | Hazelcast Documentation](https://docs.hazelcast.com/cloud/topic)
- [Tutorials | Hazelcast Documentation](https://docs.hazelcast.com/cloud/tutorials): Tutorials provide you with the sample code you need to learn how to achieve a specific goal.
- [Update Organization Name | Hazelcast Documentation](https://docs.hazelcast.com/cloud/update-organization-name): When you created an account, an organization was created. You provided a name for the organization when you created the account. The organization details can be viewed, and the name updated, at any time.
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/cloud/update-payment-method)
- [User MFA Settings | Hazelcast Documentation](https://docs.hazelcast.com/cloud/user-mfa-settings): If enforced at organization level, you must enable Multi-factor Authentication (MFA). If not enforced by your organization, you can choose whether or not to enable MFA for your sign-in. By default, MFA is disabled.
- [User Roles | Hazelcast Documentation](https://docs.hazelcast.com/cloud/user-roles): Each user has a role assigned to them. The role defines the permissions granted to that user.
- [Users | Hazelcast Documentation](https://docs.hazelcast.com/cloud/users): Whether you are an admin user or an organization user, you can access specific settings to support your use of Hazelcast Cloud, including managing your profile and API key. Organization users must accept an invition to join the organization account before they can access the Cloud console.
- [View and Update Profile | Hazelcast Documentation](https://docs.hazelcast.com/cloud/view-and-update-profile): Every user has a profile, which they can view and update at any time.
- [View Organization Details | Hazelcast Documentation](https://docs.hazelcast.com/cloud/view-organization-details): Organization users can view the name of the organization with which their sign in is associated. They cannot change the name.
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/cloud/view-usage-and-bills)

## Hazelcast

- [What is Hazelcast Platform? | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/): Hazelcast Platform uniquely combines a distributed compute engine and a fast data store in one runtime. It offers unmatched performance, resilience and scale for real-time and AI-driven applications.
- [Hazelcast Architecture | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/architecture/architecture): Hazelcast is a distributed computation and storage platform for consistent low-latency querying, aggregation, and stateful computation against event streams and traditional data sources. This guide outlines how Hazelcast works under the hood to help you understand some important concepts.
- [Data Partitioning and Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/architecture/data-partitioning): Partitioning and replication are two common techniques used together in distributed systems to achieve scalable, available, and transparent data distribution.
- [Jet: How Hazelcast Models and Executes Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/architecture/distributed-computing): Hazelcast models your pipeline code into a directed acyclic graph (DAG) which consists of stages. Each processing stage accepts the events from upstream stages, processes them, and passes the results to the downstream stage. To run a job, Hazelcast transforms the pipeline DAG into the core DAG. The top-level component that does this is called the planner.
- [How Hazelcast Handles Event Disorder | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/architecture/event-time-processing): To make sure that late events do not slow down jobs, Hazelcast allows you to define a threshold (lag) for how late events can be before they are ignored. To determine a late event, Hazelcast uses distributed watermarks to define the current time and compare it against the configured lag.
- [Cooperative Multithreading | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/architecture/execution-engine)
- [In-Memory Storage | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/architecture/in-memory-storage)
- [Jet: Sliding Window Aggregation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/architecture/sliding-window)
- [Ask AI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/ask-ai): Use our Ask AI feature to get instant answers to technical questions and help troubleshoot problems.
- [Caching Data | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/cache/overview): Hazelcast provides APIs and plugins for building distributed caches for your data, including web sessions, database queries, and compute results. Get familiar with Hazelcast as a cache and find useful resources for your use case.
- [Capacity Planning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/capacity-planning): Capacity planning involves estimating and validating the capacity of a cluster in order to determine which recommendations and best practices can help that cluster achieve its best reasonable performance.
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clients/client-overview): Overview of the main Hazelcast clients and APIs
- [C++ Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clients/cplusplus)
- [Get started with the Hazelcast C++ Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clients/cpp-client-getting-started): This tutorial will get you started with the Hazelcast C&#43;&#43; client and show you how to manipulate a map.
- [Get started with the Hazelcast .NET Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clients/csharp-client-getting-started): In this tutorial you will see how to connect with the Hazelcast .NET client and manipulate a map.
- [.NET Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clients/dotnet)
- [Go Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clients/go)
- [Get started with the Hazelcast Go Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clients/go-client-getting-started): This tutorial will get you started with the Hazelcast Go client and show you how to manipulate a map.
- [Getting Started with a Hazelcast Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clients/hazelcast-clients): Hazelcast has clients in Java, .NET, Python, C&#43;&#43;, Go, and Node.js. You can use these clients to communicate with cluster members.
- [Java Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clients/java): Hazelcast provides a Java Client and Embedded Server within the standard distribution you can start using right away.
- [Get started with the Hazelcast Java Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clients/java-client-getting-started): This tutorial will get you started with the Hazelcast Java client and show you how to manipulate a map.
- [Use Memcache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clients/memcache)
- [Node.js Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clients/nodejs)
- [Get started with the Hazelcast Node.js Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clients/nodejs-client-getting-started): This tutorial will get you started with the Hazelcast Node.js client and show you how to manipulate a map.
- [Python Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clients/python)
- [Get started with the Hazelcast Python Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clients/python-client-getting-started): This tutorial will get you started with the Hazelcast Python client and show you how to manipulate a map.
- [REST Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clients/rest)
- [AWS Deployments | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/cluster-performance/aws-deployments)
- [Back Pressure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/cluster-performance/back-pressure)
- [Best practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/cluster-performance/best-practices)
- [Data Affinity | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/cluster-performance/data-affinity): Data affinity ensures that related entries exist on the same member. If related data is on the same member, operations can be executed without the cost of extra network calls and extra wire data. This feature is provided by using the same partition keys for related data.
- [IMap bulk read operations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/cluster-performance/imap-bulk-read-operations): Learn about best practices for IMap bulk read operations.
- [Near Cache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/cluster-performance/near-cache)
- [Performance Tips | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/cluster-performance/performance-tips): The production checklist provides a set of best practices and recommendations to ensure a smooth transition to a production environment which runs a Hazelcast cluster.
- [Pipelining | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/cluster-performance/pipelining)
- [Thread-Per-Core (TPC) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/cluster-performance/thread-per-core-tpc): Find out more about Thread-Per-Core (TPC) and how to enable this feature on clients and cluster members.
- [Threading | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/cluster-performance/threading): Your application server has its own threads. Hazelcast does not use these; it manages its own threads.
- [Accessing Domain Objects Without Domain Classes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/accessing-domain-objects)
- [Creating Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/creating-clusters)
- [Deadline Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/deadline-detector)
- [Deploying User Code from Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/deploying-code-from-clients)
- [Deploying User Code on the Member | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/deploying-code-on-member)
- [Discovering Members by Multicast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/discovering-by-multicast)
- [Discovering Members by TCP | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/discovering-by-tcp)
- [Discovering Java Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/discovering-native-clients)
- [Discovery Mechanisms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/discovery-mechanisms)
- [Failure Detector Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/failure-detector-configuration)
- [User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/legacy-ucd): The previous method of dynamically loading custom classes or domain classes from other members, or deploying your code from your client was known as User Code Deployment. This method has been deprecated and will be removed at the next major version. The legacy information for the deprecated User Code Deployment solution has been retained in this section for your reference.
- [Network Configurations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/network-configuration)
- [Partition Group Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/partition-group-configuration)
- [Phi Accrual Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/phi-accrual-detector)
- [Ping Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/ping-detector)
- [Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/ucn-data-structures): To allow your data structures to resolve your user code, you must reference the required namespace in the data structure configuration. You can configure the same namespace for multiple data structures.
- [Configure Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/ucn-dynamic-client): Clients use the dynamic configuration API to create and update User Code Namespaces on the cluster.
- [Dynamic Configuration API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/ucn-dynamic-config): You can use the dynamic configuration API to deploy resources from your client or HazelcastInstance member. This means that you can configure namespaces and their resources, and replace the resources at runtime for use when a user customization is next instantiated or executed.
- [Enable User Code Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/ucn-enable): For security reasons, you must enable User Code Namespaces using static configuration. You can do this programmatically, or using the Hazelcast configuration file.
- [Member Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/ucn-member-side): User Code Namespaces are referenced by name, and can be statically configured in the Hazelcast configuration file. You can specify JAR, JARS IN ZIP, and CLASS resources in the configuration file.
- [Migrate from User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/ucn-migrate-ucd): User Code Namespaces improves and extends the capabilities of User Code Deployment and is applicable to more use cases. Hazelcast recommends that Enterprise Edition users deprecate their User Code Deployment implementations and migrate to using User Code Namespaces.
- [Non-associated Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/ucn-non-associated): You can configure a default namespace with resources that can be used by any data structure that does not have an associated User Code Namespaces defined, or, for example, a partition loss listener. A default namespace is also useful when you are using an API that is not namespace-aware.
- [Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/ucn-security): You can control who can create, deploy, or replace your User Code Namespaces using permissions. You can also provide permissions for the instantiation and registration of user customizations that lookup code in your User Code Namespaces.
- [Static Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/ucn-static-config): You can configure User Code Namespaces using static configuration in an XML or YAML file, or programmatically. The configuration is applied on start-up.
- [Programmatic Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/ucn-static-programmatic): You can configure your User Code Namespaces and data structures programmatically. You can specify JAR, JARS IN ZIP, and CLASS resources in programmatic configuration.
- [User Code Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/clusters/user-code-namespaces): User Code Namespaces provide a container for Java classpath resources, such as user code and accompanying artifacts like property files. This provides namespace isolation to ensure that access to resources in different namespaces can be managed through configuration.
- [Common Exception Types | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/common-exception-types)
- [Compact Serialization Binary Specification | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/compact-binary-specification): The Compact Serialization Binary Specification defines the binary format of the Compact Serialization, the supported types, and the Compact Schema.
- [Distributed Computing | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/computing/distributed-computing): Explore the tools that Hazelcast offers for distributed computing on cluster members.
- [Durable Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/computing/durable-executor-service)
- [Java Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/computing/executor-service)
- [Scheduled Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/computing/scheduled-executor-service)
- [Member Configuration Files | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/configuration/configuring-declaratively): You can declare settings for Hazelcast members, using a YAML or XML configuration file. Although Hazelcast members read from a single configuration file, you can store settings in multiple files and import them into a single root file to enable reuse.
- [Configuring Hazelcast in Embedded Mode | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/configuration/configuring-programmatically): You can use a configuration object (config object) to configure members with the Java member API. To create new instances of members, pass the config object to those instances.
- [Configuring with System Properties and Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/configuration/configuring-with-system-properties): You can use xref:ROOT:system-properties.adoc[system properties] and environment variables to configure Hazelcast and override existing settings in a root configuration file. Environment variables are useful for configuring members in containerized environments.
- [Configuring Hazelcast in Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/configuration/configuring-within-spring)
- [Dynamic Configuration for Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/configuration/dynamic-config): You can use dynamic configuration to add new configuration to members at runtime or update some supported configuration such as Enterprise Edition license keys. This feature is useful if you want to configure a running cluster without having to restart the members.
- [Configuring Dynamic Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/configuration/dynamic-config-persistence): You can configure members to keep dynamic configuration changes in memory or persist them to a YAML or XML configuration file.
- [Dynamic Configuration with Programmatic APIs (Java) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/configuration/dynamic-config-programmatic-api): You can use the Java member or client APIs to add dynamic configuration to some supported features at runtime.
- [Updating or Reloading Dynamic Configuration in REST | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/configuration/dynamic-config-update-and-reload): You can use the /config/update and /config/reload REST endpoints to add dynamic configuration for some supported features at runtime.
- [Configuring the Jet Engine | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/configuration/jet-configuration)
- [Configuring JVM Parameters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/configuration/jvm-parameters)
- [Configuration Pattern Matcher | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/configuration/pattern-matcher)
- [Hazelcast Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/configuration/understanding-configuration): To configure a Hazelcast cluster or client, you can choose either static or dynamic configuration. Explore the options and decide which one is best for your application.
- [Using Wildcards | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/configuration/using-wildcards)
- [CP Subsystem best practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/cp-subsystem/best-practices): Follow these recommendations to get the best performance out of your CP Subsystem deployment.
- [Configure the CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/cp-subsystem/configuration): You can configure clusters to enable the CP Subsystem and adjust other options such as CP groups sizes and persistence of CP state.
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/cp-subsystem/cp-subsystem): The CP Subsystem is a component of a Hazelcast cluster that builds a strongly consistent layer for a set of distributed data structures. The CP Subsystem withstands network partitions, server failures, and client failures.
- [Manage and monitor the CP subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/cp-subsystem/management): The CP Subsystem requires manual intervention while expanding or shrinking its size, or when a CP member crashes or becomes unreachable. When a CP member becomes unreachable, it is not immediately removed from the CP Subsystem because it could still be active behind a partition. By default, missing CP members are automatically removed after four hours and are replaced by other CP members if any are available.
- [Migrate Raft log files | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/cp-subsystem/raft-log-file-exporter): The RaftLogFileExporter is a tool that helps migrate persisted CP state between different Hazelcast versions. It creates a copy of CP member directories with Raft log files converted into the alternative format.
- [Build MapLoader using Data Connection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-connections/build-map-loader-data-connection): This tutorial shows how to build a custom map loader that uses a configured data connection to load data not present in an IMap.
- [Build pipeline service using Data Connection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-connections/build-pipeline-service-data-connection): This tutorial builds a service that transforms a stream of items. The service uses a data connection to retrieve a connection to a relational database, and uses a table in the database to enrich a stream of numbers with a textual representation of the last digit.
- [Use Data Connection service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-connections/data-connection-service): Using the Data Connection Service gives access to the configured xref:data-connections-configuration.adoc[data connections] in custom components.
- [Configuring Data Connections to External Systems | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-connections/data-connections-configuration): A data connection contains the metadata that Hazelcast needs to connect an external system. You can define a data connection in your members' configuration files, in the Java member API, or in SQL, and reuse the same connection details in the Pipeline API, SQL mappings, and MapStores.
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-connections/mongo-dc-configuration)
- [Making Your Map Data Safe | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/backing-up-maps): Maps are in-memory data structures, which means they are potentially vulnerable to data loss in the event of a system failure. Hazelcast offers several features to minimize the chances of data loss, including in-memory backups and persisted data stores.
- [Cardinality Estimator Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/cardinality-estimator-service)
- [CPMap | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/cpmap)
- [Creating a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/creating-a-map): Maps store data in key/value pairs called entries, which can be one of many data types. To create a map, you just need to give it a name, then write some data to it.
- [Distributed Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/distributed-data-structures)
- [Entry Processor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/entry-processor)
- [Event Journal | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/event-journal)
- [FencedLock | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/fencedlock)
- [Flake ID Generator | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/flake-id-generator)
- [IAtomicLong | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/iatomiclong)
- [IAtomicReference | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/iatomicreference)
- [ICountDownLatch | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/icountdownlatch)
- [ISemaphore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/isemaphore)
- [List | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/list)
- [Acting Upon Changes to a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/listening-for-map-entries): You can set up monitoring of a map to look for specific events, such as adding an entry, updating a specific entry, or deleting an entry. You can use these events to trigger execution of code, or even intercept the event and change it before it affects the data in memory.
- [Locking Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/locking-maps): Although maps are thread-safe, you may prefer to have manual control over which members have access to a map entry at a given time. Hazelcast offers two ways of locking map entries: pessimistic locking and optimistic locking.
- [Managing Map Memory | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/managing-map-memory): Depending on how you use maps, they may become too large for your cluster's memory, or the data may become stale and useless to your applications. To handle these situations, you can set expiration and eviction policies.
- [Distributed Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/map): Distributed maps, also known as maps or IMaps, are key-value pairs that are partitioned across a cluster. Use maps to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/map-config): Map configuration is part of the overall Hazelcast server configuration. When you create your map, it inherits the configuration that is set up on the server. It is important to plan your map configuration ahead of time, as you cannot change the configuration of a map once it is created without restarting your entire cluster.
- [MultiMap | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/multimap)
- [PN Counter | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/pn-counter)
- [Preventing Out of Memory Exceptions when Querying a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/preventing-out-of-memory): Query-based map methods such as entrySet()` may trigger an out of memory exception (OOME), depending on the size of your map and the available memory of each member. To prevent these exceptions, you can configure your cluster to limit query results.
- [Priority Queue | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/priority-queue)
- [Queue | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/queue)
- [Reading Data From a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/reading-a-map): Data in a map is distributed among members in a Hazelcast cluster. To read entries from a map, you can use simple get requests, distributed queries, or use the map as a source in a data pipeline.
- [Reading Map Metrics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/reading-map-metrics): By default, you can read metrics for a given map, such as the primary and backup entry count, last update time, and locked entry count on each member of your cluster. You can access these statistics for the entire map, for the map entries on a specific cluster member, or specific map entries.
- [Reliable Topic | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/reliable-topic)
- [Replicated Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/replicated-map)
- [Ringbuffer | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/ringbuffer)
- [Set | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/set)
- [Setting the In-Memory Format of Map Entries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/setting-data-format): The in-memory format you set to store your data can have a significant impact on the performance of your application. When data is moved either between a client and the Hazelcast cluster or between cluster members, it is always in serialized (binary) format. Depending on your use case, it may be more efficient to store the data in that serialized format, either on-heap or off-heap, or deserialize it back to the original object format.
- [Topic | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/topic)
- [Updating Map Entries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/updating-map-entries): Maps are not static. You can update or remove individual map entries, a group of map entries, or the entire map.
- [Vector Collection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/vector-collections): The primary object for interacting with vector storage is a Vector Collection. A Vector Collection holds information about the vectors and associated metadata (user values).
- [VectorCollection data structure design | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/vector-search-overview): A Hazelcast vector database engine is a specialized type of database, which is optimized for storing, searching, and managing vector embeddings and additional metadata. You can include values in the metadata to provide filtering, additional processing, or analysis of vectors.
- [Vector search tutorial | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/data-structures/vector-search-tutorial): This tutorial guides you through using Hazelcast Enterprise to build an image search system.
- [Choosing an Application Topology | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/deploy/choosing-a-deployment-option): Hazelcast offers two topologies to use Hazelcast: embedded in a Java application or in a client/server topology. To help you choose a topology that meets your requirements, this topic describes each option.
- [Public Clouds | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/deploy/deploying-in-cloud): Deploy a Hazelcast cluster in cloud environments including Hazelcast Cloud, Amazon AWS, Google Cloud Platform, and Azure.
- [Deploying a Cluster on Amazon AWS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/deploy/deploying-on-aws): Deploy Hazelcast clusters on Amazon AWS EC2 and AWS ECS/Fargate environments and allow them to discover each other automatically.
- [Deploying a Cluster on Microsoft Azure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/deploy/deploying-on-azure): Deploy Hazelcast clusters on Azure and allow them to discover each other automatically.
- [Deploying a Cluster on Google Cloud Platform | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/deploy/deploying-on-gcp): Deploy Hazelcast clusters on Google Cloud Platform and allow them to discover each other automatically.
- [Deploy on Docker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/deploy/deploying-with-docker): In this deployment guide, you will learn how to form a cluster from Hazelcast member containers running on more than one Docker host in the same local area network (LAN).
- [Manage Enterprise Edition license keys | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/deploy/enterprise-licenses): To use Hazelcast Enterprise Edition, you need an Enterprise Edition license key. This topic explains how to get a license key, install it on a member, and manage it.
- [Supported Versions and Compatibilities | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/deploy/versioning-compatibility): This section provides the supported versions and interoperability of Hazelcast Platform and its modules.
- [Cluster Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/events/cluster-events)
- [Listening to Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/events/distributed-events)
- [Event Listeners for Hazelcast Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/events/event-listeners-for-clients)
- [Global Event Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/events/global-event-configuration)
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/events/object-events)
- [Config Properties SPI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/extending-hazelcast/config-properties-spi)
- [Discovery SPI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/extending-hazelcast/discovery-spi)
- [Extending Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/extending-hazelcast/extending-hazelcast)
- [OperationParker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/extending-hazelcast/operationparker)
- [Frequently Asked Questions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/faq)
- [Backups | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/fault-tolerance/backups)
- [Fault Tolerance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/fault-tolerance/fault-tolerance)
- [Timeouts | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/fault-tolerance/timeouts)
- [Authenticate client connections | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/getting-started/authenticate-client-tutorial): This tutorial introduces you to member security by setting up authentication for client connections.
- [Deploy blue-green clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/getting-started/deploy-blue-green-tutorial): This tutorial introduces you to blue-green cluster deployments. You'll learn know how to set up a client to operate continuously even when its connected to a cluster that fails.
- [Hazelcast editions and distributions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/getting-started/editions): Hazelcast offers Enterprise Edition and Community Edition versions of Hazelcast Platform, each available as either a full or slim distribution, or via a number of package managers.
- [Start a Local Cluster from Binary | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/getting-started/get-started-binary): This tutorial introduces you to Hazelcast in a client/server topology. At the end of this tutorial, you'll know how to start a cluster from the binary distribution, store data in memory, visualize your data and more.
- [Start a Local Cluster with the CLI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/getting-started/get-started-cli): Follow this five-minute tutorial to set up a Hazelcast cluster for testing or evaluation purposes. In five minutes, you will learn how to install Hazelcast with a package manager, start a local cluster with the CLI, write data to memory and visualize that data.
- [Start a Local Cluster in Docker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/getting-started/get-started-docker): This tutorial introduces you to Hazelcast in a client/server topology. At the end of this tutorial, you'll know how to start a cluster in a single Docker host, store data in memory, visualize your data and more.
- [Get started with Hazelcast Enterprise Edition | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/getting-started/get-started-enterprise): This quickstart tutorial will get you started with Hazelcast Platform Enterprise Edition and take you from installation all the way through to a working three member cluster with persistence enabled.
- [Start a Local Embedded Cluster | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/getting-started/get-started-java): This tutorial introduces you to Hazelcast in an embedded topology. At the end of this tutorial, you'll know how to start a cluster in your Java application and store data in memory.
- [Get started with REST API using Docker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/getting-started/get-started-rest-api-with-docker): This tutorial provides a step-by-step guide to help you enable, run and use the REST API with minimal configuration using Docker.
- [Get Started with REST API using Java | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/getting-started/get-started-rest-api-with-java): This tutorial provides a step-by-step guide to help you enable, run and use the REST API with minimal configuration using Java.
- [Install Hazelcast Enterprise Edition | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/getting-started/install-enterprise): To install Hazelcast Enterprise Edition, you can use Docker, the binary, or Java. To unlock the Enterprise Edition features, you must install your Enterprise Edition license key.
- [Install Hazelcast Community Edition | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/getting-started/install-hazelcast): You can install the Community Edition of Hazelcast using a package manager, Docker, or the binary. Alternatively, you can add Hazelcast as a dependency in your Java project.
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/getting-started/interactive-quickstart)
- [Developer Resources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/getting-started/resources)
- [Get Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/getting-started/support): Hazelcast provides two types of support: one for the community and one for paying customers.
- [Replicate a map across clusters in a WAN | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/getting-started/wan-replication-tutorial): This tutorial introduces you to WAN Replication (also known as Geo-Replication) by showing how to replicate map entries across two clusters.
- [Glossary | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/glossary)
- [Ingesting Data from External Sources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/ingest/overview): Explore the Hazelcast components for ingesting data from both on-premise systems and cloud deployments.
- [CDC Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/cdc-connectors)
- [Connector Guides | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/connectors): Hazelcast comes with a wide range of built-in connectors for accessing data in other platforms. You can also use Hazelcast with pre-built connectors for importing data from external systems. Both types of connector are configured to read and write data in the most efficient way for their respective platform.
- [Custom Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/custom-connectors)
- [Connectors for Databases | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/database-connectors)
- [Elasticsearch Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/elasticsearch-connector)
- [Configure Feature Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/feast-config): To use a Feast project, you must configure the feature store. The configuration is defined in a YAML configuration file.
- [Get Started with Feast Batch Features | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/feature-engineering-with-feast): This tutorial will get you started with feature engineering using the Hazelcast integration with Feast.
- [Unified File Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/file-connector): The unified file connector provides a simple way to read files across different sources. Using this connector, you can read files from the local filesystem, HDFS and cloud storage systems such as Amazon S3, Google Cloud Storage or Azure Blob Storage. This connector supports various data formats, including text files, CSV, JSON, and Avro.
- [Get started with Vert.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/get-started-with-vertx)
- [HTTP Listener Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/http-connector)
- [InfluxDB Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/influxdb-connector)
- [Install Feast and Connect to Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/install-connect): Before you can use Feast with Hazelcast as an online store, you must install Feast and connect to Hazelcast.
- [Integrate with Feast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/integrate-with-feast): Feast (<strong>Fea</strong>ture <strong>St</strong>ore) is a customizable operational data system, which uses your existing infratstructure to manage and serve machine learning features to real-time models. When integrated with Hazelcast, you can benefit from an online store that supports materializing feature values in a running Hazelcast cluster.
- [Integrate with Vert.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/integrate-with-vertx)
- [JCache Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/jcache-connector): The JCache connector is mostly equivalent to the map connector, the main difference being that the JCache connector is compliant with the JCache standard API. As a sink, since JCache doesn't support entry processors, only the default variant is available.
- [JDBC Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/jdbc-connector)
- [JMS Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/jms-connector)
- [Kafka Connect Source Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/kafka-connect-connectors): With a Kafka Connect Source connector, you can reliably import data from an external system, such as a database, key-value store, search index, or file system, directly into a Hazelcast data pipeline. The data is available for stream processing. <strong>No Kafka cluster is required</strong>.
- [Apache Kafka Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/kafka-connector): The Kafka connector allows you to stream, filter, and transform events between Hazelcast clusters and Kafka.
- [Amazon Kinesis Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/kinesis-connector)
- [Legacy CDC Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/legacy-cdc-connectors)
- [Legacy File Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/legacy-file-connector): The legacy file connector allows you to read and write to files, using the Jet API. This connector is still maintained, but all new development goes into the unified file connector.
- [List Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/list-connector)
- [Map Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/map-connector): A map is a distributed in-memory key-value data structure that can be used as a batch or streaming data source as well as a data sink.
- [Connectors for Messaging Systems | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/messaging-system-connectors)
- [MongoDB Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/mongodb-connector)
- [Observable Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/observable-connector): The observable connector provides a way of receiving query results on the same client that submitted a job. This connector is useful when you are using the Jet API for ad-hoc queries and you want to use your client as a sink.
- [Apache Pulsar Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/pulsar-connector)
- [Reliable Topic Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/reliable-topic-connector)
- [Socket Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/socket-connector)
- [Get Started with Feast Streaming Features | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/streaming-features-with-feast): This tutorial will get you started with streaming features using the Hazelcast integration with Feast.
- [Test Source Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/test-connectors): Test sources make it convenient to get started with pipelines without having to use an actual data source. They can also be used for unit testing different pipelines where you can expect a more deterministic import.
- [Vector Collection Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/integrate/vector-collection-connector): Vector collection stores vectors with their related metadata. This allows entries to be found efficiently based on vector distance.
- [JCache API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/jcache/api)
- [JCache - Hazelcast Instance Integration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/jcache/hazelcast-integration)
- [Hazelcast JCache Extension - ICache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/jcache/icache)
- [Hazelcast JCache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/jcache/jcache)
- [JCache Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/jcache/overview)
- [JCache Providers | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/jcache/providers)
- [JCache Setup and Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/jcache/setup)
- [Testing for JCache Specification Compliance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/jcache/tck)
- [Deploying on Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/kubernetes/deploying-in-kubernetes): Discover ways to deploy Hazelcast clusters in Kubernetes (K8s) environments.
- [Add custom JAR files to the classpath | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/kubernetes/helm-adding-custom-jar)
- [Configuring SSL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/kubernetes/helm-configuring-ssl)
- [Dynamic Persistence Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/kubernetes/helm-dynamic-persistence-configuration)
- [Enabling External Access to Cluster | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/kubernetes/helm-enabling-external-access)
- [Deploying Hazelcast Community Edition on Kubernetes with Helm | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/kubernetes/helm-hazelcast-chart): This chart bootstraps a link:https://github.com/hazelcast/hazelcast-docker/tree/master/hazelcast-oss[Hazelcast] and link:https://github.com/hazelcast/management-center-docker[Management Center] deployments on a link:http://kubernetes.io[Kubernetes] cluster using the link:https://helm.sh[Helm] package manager.
- [Deploying Hazelcast Enterprise Edition on Kubernetes with Helm | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/kubernetes/helm-hazelcast-enterprise-chart): This chart bootstraps a link:https://github.com/hazelcast/hazelcast-docker/tree/master/hazelcast-enterprise[Hazelcast Enterprise Edition] and link:https://github.com/hazelcast/management-center-docker[Management Center] deployments on a link:http://kubernetes.io[Kubernetes] cluster using the link:https://helm.sh[Helm] package manager.
- [Helm Upgrade Guide | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/kubernetes/helm-upgrade-guide)
- [Kubernetes Auto Discovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/kubernetes/kubernetes-auto-discovery): Before you start a Hazelcast cluster in Kubernetes (K8s), it's important to configure settings to ensure that members can form a cluster and to prevent any unexpected data loss.
- [Running Hazelcast Enterprise Edition with Persistence under Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/kubernetes/kubernetes-persistence): Hazelcast Enterprise Edition members configured with persistence enabled can monitor the Kubernetes (K8s) context and automate Hazelcast cluster state management to ensure the optimal cluster behavior during shutdown and restart.
- [Troubleshooting and Limitations in Kubernetes Environments | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/kubernetes/troubleshooting-and-limitations): Find advice for troubleshooting issues you might face while deploying Hazelcast via Helm.
- [List of Hazelcast Metrics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/list-of-metrics)
- [Cluster and Member States | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/maintain-cluster/cluster-member-states): Cluster states determine what cluster operations are available. By changing the state of a cluster, you can grant or restrict cluster operations such as repartitioning as well as change the behavior of those operations.
- [Dynamic Configuration using the REST API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/maintain-cluster/dynamic-config-via-rest): This tutorial provides a step-by-step guide to help you add a data structure dynamically using the REST API.
- [REST API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/maintain-cluster/enterprise-rest-api)
- [Enabling Lite Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/maintain-cluster/lite-members)
- [Configuring Logging | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/maintain-cluster/logging): Options available for the logging mechanism of Hazelcast clusters.
- [Filtering Members with Attributes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/maintain-cluster/member-attributes)
- [Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/maintain-cluster/monitoring): Options available for monitoring the health and operations of Hazelcast clusters.
- [Community Edition REST API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/maintain-cluster/rest-api)
- [Swagger UI for REST API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/maintain-cluster/rest-api-swagger)
- [Restart a cluster | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/maintain-cluster/restart-cluster): Static configuration is configuration that cannot be changed while members are running. To apply updates to static configuration, you must restart the cluster.
- [Rolling Upgrades | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/maintain-cluster/rolling-upgrades): You can use rolling upgrades to upgrade the version of Hazelcast members in a running cluster without interrupting the operation of the cluster.
- [Shutting Down Members and Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/maintain-cluster/shutdown): Maintaining a cluster often requires shutting down clusters or individual members to make changes take effect. Hazelcast offers convenient methods for shutting down clusters as well as graceful and ungraceful options for specific members.
- [Cluster utilities | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/management/cluster-utilities): Hazelcast Platform is provided with a range of programmatic utilities that you can use to manage your Hazelcast clusters, including command line interfaces and scripts.
- [Configuring a MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/mapstore/configuration-guide): This topic explains how to configure a map with a MapStore. It includes configuration options for loading data, as well as caching behaviors, and MapStore reuse.
- [Using the generic MapLoader | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/mapstore/configuring-a-generic-maploader): With the xref:working-with-external-data.adoc#options[generic MapLoader], you can configure a map to cache data from an external system. This topic includes an example of how to configure a map with a generic MapLoader that connects to a MySQL database.
- [Using the generic MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/mapstore/configuring-a-generic-mapstore): With the xref:working-with-external-data.adoc#options[generic MapStore], you can configure a map to cache data from and write data back to an external system. This topic includes an example of how to configure a map with a generic MapStore that connects to a MySQL database.
- [Implementing a Custom MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/mapstore/implement-a-mapstore): You can use the Java <code>MapStore</code> and <code>MapLoader</code> interfaces to implement a custom MapStore with your own logic, such as for database connections, loading data from an external system, and writing data back to the external system.
- [Map Operations that Trigger Methods on a MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/mapstore/mapstore-triggers): These are the map operations that trigger methods on a configured MapStore.
- [Building a Cache with MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/mapstore/working-with-external-data): MapStore is an API for building a cache on top of Hazelcast. To build a cache, you can either use a pre-built component, which requires little or no coding. Or, you can use a custom option that allows you to write the interface yourself.
- [Move to Enterprise Edition from Community Edition | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/migrate/community-to-enterprise): With Enterprise Edition, you can benefit from additional and extended features, patch releases, Hazelcast Support, and more connectors. If you are using the Open Source Edition and want to upgrade to Enterprise, you can do this with clusters of the same version from 5.5.
- [Using the Data Migration Tool | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/migrate/data-migration-tool): You can use the Data Migration Tool (DMT) to migrate your data from version 4.x or 5.x Community Edition and Enterprise Edition Hazelcast clusters when upgrading to 5.3.x or later versions of Enterprise Edition, or moving to the latest Cloud release. The DMT can also be used for infrastructure consolidation or separation with selective migration of application data between clusters.
- [DMT Command Reference | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/migrate/dmt-command-reference)
- [Migrating Data from IMDG 3.12.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/migrate/migration-tool-imdg): This guide explains how to migrate data in maps or JCache data structures from a running IMDG 3.12.x cluster to a Hazelcast 5.x cluster.
- [Upgrade Cluster to Enterprise Edition | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/migrate/rolling-restart): You can upgrade your Open Source cluster to an Enterprise cluster using an in-place rolling restart to change each member in turn.
- [Upgrading from IMDG 3.12.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/migrate/upgrading-from-imdg-3)
- [Upgrading from IMDG 4.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/migrate/upgrading-from-imdg-4): This guide covers the most important changes that affect users of IMDG 4.x who want to upgrade to Hazelcast.
- [Upgrading from Jet | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/migrate/upgrading-from-jet): This guide covers the most important changes that affect users of Jet 4.x who want to upgrade to Hazelcast.
- [Dealing with Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/network-partitioning/dealing-with-network-partitions)
- [Network Partitioning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/network-partitioning/network-partitioning)
- [Partial Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/network-partitioning/partial-network-partitions)
- [Split-Brain Protection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/network-partitioning/split-brain-protection)
- [Split-Brain Recovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/network-partitioning/split-brain-recovery)
- [API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/osgi/api)
- [Configuring Hazelcast OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/osgi/configuring-osgi-support)
- [Design | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/osgi/design)
- [OSGI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/osgi/osgi)
- [OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/osgi/osgi-support)
- [Using Hazelcast OSGI Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/osgi/using-osgi-service)
- [Caching Deserialized Values | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/performance/caching-deserialized-values)
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/phone-homes)
- [About Stream Processing Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/building-pipelines): Streaming jobs are those that process an infinite amount of data such as a continuous event stream. Because these jobs continue to run until they are canceled, you must use timestamps to define time windows in which to collect events.
- [Capture Changes from MySQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/cdc)
- [Setting Up a Database for Change Data Capture | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/cdc-database-setup)
- [Join Change Data Capture Records | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/cdc-join)
- [Change Data Capture (CDC) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/cdc-overview): Change Data Capture (CDC) is a pipeline pattern for observing changes made to a database and extracting them in a form usable by other systems, for the purposes of replication, analysis and more.
- [Capture Changes from PostgreSQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/cdc-postgres)
- [Configuring Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/configuring-jobs): Before submitting a job to a cluster, you can configure its name, whether to record metrics, how it behaves when cluster members fail, and more.
- [Building a Custom Aggregate Operation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/custom-aggregate-operation)
- [Adding Batching to a Custom Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/custom-batch-source): To improve the throughput of your custom sources, you can add batching to reads.
- [Create a Custom Sink | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/custom-sink)
- [Creating a Custom Streaming Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/custom-stream-source): If Hazelcast is missing a built-in source, or a suitable Kafka Connect Source connector is unavailable, you build your own streaming source, using the Jet API.
- [Extract Transform Load (ETL) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/etl-overview): ETL is a pipeline pattern for collecting data from various sources, transforming (changing) it to conform to some rules, and loading it into a sink. This pattern is often used to form materialized views where data is processed and put into a Hazelcast map for fast in-memory queries.
- [Mapping Data in a Pipeline Using a a gRPC Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/grpc): When processing data in a pipeline, you can use an external service to execute a function on input data, and pass the output to the next stage of pipeline. A popular way of exposing external services is to use the gRPC protocol.
- [Ingesting Data from Sources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/ingesting-from-sources): In order to process data, you first need to ingest it into your pipeline, using one or more sources.
- [Managing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/job-management): Once a job is submitted, it has its own lifecycle on the cluster which is distinct from the submitter. To manage the lifecycle of jobs, you can use either SQL or CLI commands to list, cancel, suspend, resume, and restart them.
- [Monitoring Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/job-monitoring): To ensure the reliability of streaming jobs and their workloads, try implementing some basic monitoring. With Hazelcast, you can monitor the status of streaming jobs to quickly identify job failures for troubleshooting.
- [Jet Job Placement Control | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/job-placement-control): Your Jet processing jobs can be distributed across a defined subset of the cluster. This approach provides finer control of your Jet processing, which means that you can distribute your workload to meet your requirements.
- [Securing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/job-security): While submitting jobs, you can upload custom code that bypasses client permissions. Jobs also have access to data outside Hazelcast such as files on the device that's running a member. As a result, it's important to be aware of how to secure your Hazelcast member against malicious jobs.
- [Updating Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/job-update): Update streaming jobs without losing computation state.
- [Connect to Apache Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/kafka)
- [Connect to Amazon Kinesis | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/kinesis)
- [Enrich a Stream | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/map-join): In this tutorial, you build a pipeline that takes a stream of trades from a stock exchange and enriches it with a full company name for nicer presentation. Each trade contains a stock symbol, also known as ticker, which uniquely identifies the stock. You will use the ticker to look up the full company name in a replicated map.
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/object-events)
- [Receiving Pipeline Results on the Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/observables)
- [About Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/overview): Learn about the core concepts of data pipelines and how you can build your own with the Hazelcast Jet engine.
- [Group Messages from Apache Pulsar | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/pulsar)
- [Apply a Custom Transform with Python | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/python)
- [Sending Results to Sinks | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/sending-data-to-sinks): After defining the processing steps in a pipeline, you must send the results to at least one destination called a sink. Hazelcast comes with built-in sinks as well as a public API for building your own.
- [Serializing Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/serialization)
- [Subscribe to Changes to a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/stream-imap)
- [Get Started with Stream Processing (Client/Server) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/stream-processing-client): This tutorial shows you how to use a Hazelcast cluster as a data processing engine for your client applications. At the end of this tutorial, you'll know how to build a data pipeline in Java and submit it as a job to your Hazelcast cluster.
- [Get Started with Stream Processing (Embedded) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/stream-processing-embedded): This tutorial shows you how to use Hazelcast as a streaming engine that's embedded in your Java application. At the end of this tutorial, you'll know how to ingest data from some test sources and filter it continuously to generate results in real time.
- [Submitting Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/submitting-jobs): Submit data pipelines to a Hazelcast cluster for execution.
- [Transforms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/transforms): Hazelcast offers several transforms which can be used to process data. Explore the available transforms and learn how to use them.
- [Apply Windowed Aggregation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/windowing)
- [Testing Sources and Sinks for XA Transaction Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/pipelines/xa): In order to have end-to-end exactly-once processing in pipelines, sources and sinks need to support it too. Although many sources and sinks ensure atomicity (all distributed participants either commit the transaction or roll back), some do not survive a client disconnection. You can test whether a source or a sink will survive a client disconnection, using either JDBC or Java Messaging Service (JMS).
- [This page is a placeholder | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/placeholder)
- [Cloud Discovery Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/plugins/cloud-discovery)
- [Framework Integration Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/plugins/framework-integration)
- [Hazelcast Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/plugins/hazelcast-plugins)
- [Other Integrations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/plugins/other-integrations)
- [Web Session Replication Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/plugins/web-session-replication)
- [Indexing Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/query/indexing-maps): Indexes improve the performance of queries on map entries by reducing the number of entries that members need to iterate through.
- [Running Distributed Queries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/query/overview): Explore the tools that Hazelcast offers for running distributed queries.
- [Predicates API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/query/predicate-overview): The Predicates API is a programming interface for querying data in Hazelcast, which is similar to the Java Persistence Query Language (JPQL).
- [Community Edition Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/release-notes/community): These release notes list any new features, enhancements, fixes, security issues and breaking changes that were made for Hazelcast Platform Community Edition.
- [Enterprise Edition Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/release-notes/enterprise): These release notes list any new features, enhancements, fixes, security issues and breaking changes that were made for Hazelcast Platform Enterprise Edition.
- [Hazelcast Platform release notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/release-notes/releases)
- [Security Hardening Recommendations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/secure-cluster/hardening-recommendations)
- [Security Defaults | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/secure-cluster/security-defaults)
- [Authentication overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/authentication-overview)
- [Client Authorization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/client-authorization)
- [Default authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/default-authentication)
- [Enabling Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/enable-security)
- [Encryption | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/encryption)
- [FIPS 140-2 | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/fips-140-2)
- [Identity configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/identity-configuration)
- [Integrating OpenSSL / BoringSSL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/integrating-openssl)
- [JAAS Authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/jaas-authentication)
- [Kerberos Authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/kerberos-authentication)
- [LDAP Authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/ldap-authentication)
- [Logging Auditable Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/logging-auditable-events)
- [Security Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/overview)
- [Security Debugging | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/security-debugging)
- [Security Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/security-interceptor)
- [Simple Authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/simple-authentication)
- [Socket Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/socket-interceptor)
- [TLS Authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/tls-authentication)
- [Other TLS-Related Configurations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/tls-configuration)
- [TLS/SSL Basics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/tls-ssl)
- [Validating Secrets Using Strength Policy | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/security/validating-secrets)
- [Compact Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/serialization/compact-serialization)
- [Custom Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/serialization/custom-serialization)
- [Global Serializer | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/serialization/global-serializer)
- [Implementing DataSerializable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/serialization/implementing-dataserializable)
- [Implementing HazelcastInstanceAware | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/serialization/implementing-hazelcastinstanceaware)
- [IdentifiedDataSerializable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/serialization/implementing-identifieddataserializable)
- [Implementing Java Serializable and Externalizable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/serialization/implementing-java-serializable)
- [Implementing Portable Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/serialization/implementing-portable-serialization)
- [Serializing Objects and Classes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/serialization/serialization): For data to be sent over a network between cluster members and/or clients, it needs to be serialized into raw bytes. Hazelcast has many serialization options to choose from, depending on what you plan on doing with your data.
- [Configuring Serializers | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/serialization/serialization-configuration): You can configure clusters to be able to serialize and deserialize custom objects and classes as well as override built-in serializers and whitelist certain Java classes.
- [Serializing into JSON | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/serialization/serializing-json): If you want to query JSON strings that are stored in Hazelcast, you can serialize them, using <code>HazelcastJsonValue</code>.
- [Add caching to Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/spring/add-caching)
- [Configure Hazelcast in Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/spring/configuration)
- [Configure Hibernate second-level cache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/spring/hibernate)
- [Integrate with Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/spring/overview)
- [Spring Hazelcast Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/spring/spring-hazelcast-support)
- [Spring Session and Spring Security guide | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/spring/spring-session-guide)
- [Enable SpringAware data structures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/spring/springaware)
- [Configure Hazelcast Transaction Manager | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/spring/transaction-manager)
- [ALTER JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/alter-job): With the <code>ALTER JOB</code> statement, you can suspend, resume, or restart a job that is running on a cluster. You can also update the configuration of a suspended job and resume it.
- [CREATE DATA CONNECTION | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/create-data-connection): The <code>CREATE DATA CONNECTION</code> statement creates the metadata required to connect to an external system for later use.
- [CREATE INDEX | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/create-index): The CREATE INDEX statement creates a sorted, hash, or bitmap index for a given map.
- [CREATE JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/create-job): The CREATE JOB statement submits a job to Hazelcast to run independently of the SQL client. With this statement, you can run a SQL statement in the background.
- [CREATE MAPPING | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/create-mapping): The CREATE MAPPING statement creates a table that stores essential metadata about a source's data model, data connection or connection parameters, and serialization formats so that the SQL service can connect to the data source and query it.
- [CREATE OR REPLACE SNAPSHOT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/create-snapshot): The CREATE OR REPLACE SNAPSHOT statement creates a named snapshot that you can use to start other jobs or keep as a backup.
- [CREATE VIEW | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/create-view): The CREATE VIEW statement creates a virtual table based on the result set of an SQL query. Views can be reused in other queries.
- [SQL Data Types | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/data-types): Hazelcast supports a subset of SQL data types. Each data type is mapped to a Java class, which represents the type's value in Hazelcast.
- [DELETE | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/delete): The DELETE statement deletes map entries that match the condition in a given WHERE clause.
- [DROP DATA CONNECTION | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/drop-data-connection): The <code>DROP DATA CONNECTION</code> statement deletes a data connection. Dropping a data connection affects all existing mappings where the data connection is in use, but will not affect any queries that are already running.
- [DROP JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/drop-job): The DROP JOB statement cancels a job and gives you the option to create a named snapshot from its state.
- [DROP MAPPING | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/drop-mapping): The DROP MAPPING statement removes an existing mapping.
- [DROP SNAPSHOT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/drop-snapshot): The DROP SNAPSHOT statement deletes a named snapshot.
- [DROP VIEW | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/drop-view): The DROP VIEW statement deletes a view.
- [EXPLAIN | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/explain): The EXPLAIN statement returns the execution plan for a given statement, without executing it.
- [Meta-information about Mappings | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/finding-mappings)
- [Expressions, Functions and Operators | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/functions-and-operators): Hazelcast supports a subset of standard SQL expressions, functions, and operators as well as non-standard functions for special cases such as windowed aggregation.
- [Get started with SQL over maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/get-started-sql): In this tutorial, you learn the basics of querying maps in SQL by running ad-hoc and batch queries on some test data.
- [Get started with SQL over files | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/get-started-sql-files): In this tutorial, you learn the basics of querying files in SQL by creating and querying a CSV file.
- [Improving the Performance of SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/improving-performance): Use this topic to find advice on improving the performance of slow queries.
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/interactive-sql-files)
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/interactive-sql-kafka)
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/interactive-sql-maps)
- [Get started with SQL over Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/learn-sql): In this tutorial, you use an interactive SQL shell on a Hazelcast member to query Kafka topics in real-time.
- [Creating a Mapping to a File System | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/mapping-to-a-file-system): To query data in files, you need to create a mapping to a file, using the unified file connector so that the SQL service knows how to access the data.
- [Mapping to JDBC | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/mapping-to-jdbc): To query external JDBC data stores, you can create a mapping to them with the JDBC connector.
- [Mapping to Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/mapping-to-kafka): To query streams in Kafka topics, you need to create a mapping with the Kafka connector so that the SQL service knows how to access the messages.
- [Mapping to Hazelcast Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/mapping-to-maps): To query entries in maps, you need to create a mapping with the map connector so that the SQL service knows how to access the entries.
- [Mapping to MongoDB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/mapping-to-mongo): To query MongoDB data connections, you can create a mapping to them with the Mongo connector.
- [Using Query Parameters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/parameterized-queries): In Hazelcast clients, you can use query parameters to build safer, faster SQL queries.
- [Partition pruning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/partition-pruning): The partition pruning optimization technique reduces latency for faster IMap SQL queries.
- [Querying Maps with SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/querying-maps-sql): You can use SQL to run optimized distributed queries on the keys and values of maps in a local cluster.
- [Stream Processing in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/querying-streams): You can run SQL queries on single streams, join a stream with a table, or join two or more streams.
- [SELECT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/select): The SELECT statement reads data from tables, allowing you to query and process your data based on one or more parameters.
- [SHOW JOBS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/show-jobs): The SHOW JOBS statement displays a sorted list of all named jobs. The list includes any existing jobs that were submitted through the Java API as long as they have a name. The list does not include jobs that have already completed with or without an error.
- [SHOW MAPPINGS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/show-mappings): The SHOW MAPPINGS statement displays a sorted list of all mappings.
- [SHOW RESOURCES | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/show-resources): The <code>SHOW RESOURCES</code> statement displays a list of all resources, along with their data types, that are accessible via a named data connection. These are the resources for which you can create a mapping. Each type of data connection has a unique set of resources. For example:
- [INSERT INTO/SINK INTO | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/sink-into): The <code>INSERT INTO</code>/<code>SINK INTO</code> statements write data to platforms that are connected to Hazelcast through connectors.
- [SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/sql-overview): You can use SQL to query data in maps, Kafka topics, or a variety of file systems. Results can be sent directly to the client or inserted into maps or Kafka topics.
- [Configuring Reflection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/sql-reflection-configuration): Clusters can be configured to restrict the capability of creating objects through reflection during SQL execution.
- [SQL Statements | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/sql-statements): Hazelcast supports the following SQL statements. Explore the available statements and find more details about them.
- [Troubleshooting SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/troubleshooting): This topic provides solutions to some common errors in SQL queries.
- [UPDATE | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/update): The UPDATE statement overwrites the values of map entries that match the condition in a given WHERE clause.
- [User-Defined Types in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/user-defined-types)
- [Working with JSON Data in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/sql/working-with-json): In Hazelcast, the SQL service supports ways of working with JSON data: `json-flat`, which does not allow you to query nested keys/values and `json`, which supports nested queries and JSON functions.
- [Backing Up the Persistence Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/storage/backing-up-persistence): You can trigger backups of your persistence store, using the Java API, REST API, or Management Center. Backing up the persistence store is useful if you want to copy the data onto other clusters without having to shut down your cluster.
- [Configuring Persistence | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/storage/configuring-persistence): You can configure clusters to persist data structures, job snapshots, and SQL metadata on disk. You can also implement configuration options to fine-tune backups, encryption, and auto-recovery.
- [Copying Persisted Data onto other Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/storage/copying-persistence): When you persist data on disk, you may want to copy that data onto another cluster to perform testing, QA, or reproduce an issue on production data.
- [High-Density Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/storage/high-density-memory): The High-Density Memory Store is Hazelcast's enterprise in-memory storage solution. It solves garbage collection limitations so that applications can exploit hardware memory more efficiently without the need of oversized clusters.
- [Persistence Performance Benchmark | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/storage/performance): Find summaries of Persistence performance tests that were performed with a single Hazelcast member running on a physical server and on AWS R3.
- [Persisting Data on Disk | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/storage/persistence): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from planned cluster-wide shutdowns, unplanned cluster-wide failures, and to accelerate individual member restarts by reducing the volume of data sent over the network.
- [Persistence Design Details | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/storage/persistence-design)
- [Store Persistence Data on Intel® Optane™ DC Persistent Memory | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/storage/persistence-on-intel): In this tutorial, you'll use Intel® Optane™ DC Persistent Memory (PMem) to improve the performance of disk reads and writes, allowing your cluster to access data on disk faster.
- [Triggering a Force-Start | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/storage/triggering-force-start): To recover a cluster that has Persistence enabled after a cluster-wide restart, you can force a cluster to delete their persistence stores when one or more members fail to restart.
- [Triggering a Partial-Start | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/storage/triggering-partial-start): To recover a cluster that has Persistence enabled after a cluster-wide restart, you can force a cluster to start without some members when one or more of them fail.
- [System Properties | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/system-properties)
- [Best practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/test/testing-bestpractices): The following practices help improve test reliability, execution speed, and reproducibility when writing tests for Hazelcast-powered applications.
- [Testing distributed applications | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/test/testing-caches): This guide explains how to write unit, component, integration, and in-JVM tests for Hazelcast clusters and clients using Hazelcast’s built-in test support utilities.
- [Common test utilities | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/test/testing-common): This section describes Hazelcast's common test utilities across caching and streaming applications.
- [Helper methods | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/test/testing-helpers): The following tables document the helper methods available in Hazelcast. Member methods are available only when the test class inherits the respective support class, hence only in JUnit 4. Static methods can also be used in other frameworks.
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/test/testing-intro): Testing is essential to validate the correctness, reliability, and performance of applications that integrate with Hazelcast.
- [Test Hazelcast performance with Simulator | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/test/testing-performance): https://github.com/hazelcast/hazelcast-simulator[Hazelcast Simulator] is a high-performance, production-grade testing framework for running performance, stress, and latency tests on Hazelcast clusters. It allows you to simulate complex workloads and evaluate distributed systems in a realistic and reproducible manner.
- [Set up dependencies and tests | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/test/testing-setup)
- [Test streaming pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/test/testing-streaming): Hazelcast provides a set of testing utilities for validating streaming pipelines executed by the Jet engine. These utilities allow you to simulate input data and assert on the output of distributed dataflows.
- [Creating a Transaction Interface | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/transactions/creating-a-transaction-interface)
- [Providing XA Transactions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/transactions/providing-xa-transactions)
- [Error Handling Strategies for Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/troubleshoot/error-handling): Jobs may not run as expected due to I/O errors in sources and sinks, or coding and input data errors in your pipelines. To handle these errors you can use one of the following strategies.
- [Recovery from Client Connection Failures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/troubleshoot/recovery-clients)
- [Recovery from a Partial or Total Failure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/troubleshoot/recovery-members)
- [Actions and Remedies for Alerts | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/troubleshoot/remedies-for-alerts): Find advice for remedies for the Hazelcast alerts.
- [Troubleshooting Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/troubleshoot/troubleshooting): Find advice for troubleshooting issues in your Hazelcast applications or your cluster deployments.
- [Deploy Hazelcast using Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/tutorials/kubernetes): In this tutorial, you will deploy a Hazelcast cluster to Kubernetes and connect it to a Kubernetes application.
- [Advanced Features | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/wan/advanced-features)
- [Configuring for IMap and ICache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/wan/configuring-for-map-and-cache)
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/wan/defining-wan-replication)
- [Failure Detection and Recovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/wan/failures)
- [WAN Replication Modes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/wan/modes)
- [WAN Quickstart | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/wan/quick-start)
- [REST API for WAN Wrap-Up | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/wan/rest-api)
- [Fine-Tuning WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/wan/tuning)
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/wan/wan)
- [What is Hazelcast Platform? | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/what-is-hazelcast): Hazelcast Platform uniquely combines a distributed compute engine and a fast data store in one runtime. It offers unmatched performance, resilience and scale for real-time and AI-driven applications.
- [What’s New in Hazelcast Platform | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.7-snapshot/whats-new): Here are the highlights of what's new and improved in Hazelcast Platform 5.5.
- [What is Hazelcast Platform? | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/): Hazelcast Platform uniquely combines a distributed compute engine and a fast data store in one runtime. It offers unmatched performance, resilience and scale for real-time and AI-driven applications.
- [Hazelcast Architecture | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/architecture/architecture): Hazelcast is a distributed computation and storage platform for consistent low-latency querying, aggregation, and stateful computation against event streams and traditional data sources. This guide outlines how Hazelcast works under the hood to help you understand some important concepts.
- [Data Partitioning and Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/architecture/data-partitioning): Partitioning and replication are two common techniques used together in distributed systems to achieve scalable, available, and transparent data distribution.
- [Jet: How Hazelcast Models and Executes Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/architecture/distributed-computing): Hazelcast models your pipeline code into a directed acyclic graph (DAG) which consists of stages. Each processing stage accepts the events from upstream stages, processes them, and passes the results to the downstream stage. To run a job, Hazelcast transforms the pipeline DAG into the core DAG. The top-level component that does this is called the planner.
- [How Hazelcast Handles Event Disorder | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/architecture/event-time-processing): To make sure that late events do not slow down jobs, Hazelcast allows you to define a threshold (lag) for how late events can be before they are ignored. To determine a late event, Hazelcast uses distributed watermarks to define the current time and compare it against the configured lag.
- [Cooperative Multithreading | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/architecture/execution-engine)
- [In-Memory Storage | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/architecture/in-memory-storage)
- [Jet: Sliding Window Aggregation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/architecture/sliding-window)
- [Ask AI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/ask-ai): Use our Ask AI feature to get instant answers to technical questions and help troubleshoot problems.
- [Caching Data | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/cache/overview): Hazelcast provides APIs and plugins for building distributed caches for your data, including web sessions, database queries, and compute results. Get familiar with Hazelcast as a cache and find useful resources for your use case.
- [Capacity Planning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/capacity-planning): Capacity planning involves estimating and validating the capacity of a cluster in order to determine which recommendations and best practices can help that cluster achieve its best reasonable performance.
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clients/client-overview): Overview of the main Hazelcast clients and APIs
- [C++ Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clients/cplusplus)
- [Get started with the Hazelcast C++ Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clients/cpp-client-getting-started): This tutorial will get you started with the Hazelcast C&#43;&#43; client and show you how to manipulate a map.
- [Get started with the Hazelcast .NET Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clients/csharp-client-getting-started): In this tutorial you will see how to connect with the Hazelcast .NET client and manipulate a map.
- [.NET Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clients/dotnet)
- [Go Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clients/go)
- [Get started with the Hazelcast Go Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clients/go-client-getting-started): This tutorial will get you started with the Hazelcast Go client and show you how to manipulate a map.
- [Getting Started with a Hazelcast Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clients/hazelcast-clients): Hazelcast has clients in Java, .NET, Python, C&#43;&#43;, Go, and Node.js. You can use these clients to communicate with cluster members.
- [Java Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clients/java): Hazelcast provides a Java Client and Embedded Server within the standard distribution you can start using right away.
- [Get started with the Hazelcast Java Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clients/java-client-getting-started): This tutorial will get you started with the Hazelcast Java client and show you how to manipulate a map.
- [Use Memcache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clients/memcache)
- [Node.js Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clients/nodejs)
- [Get started with the Hazelcast Node.js Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clients/nodejs-client-getting-started): This tutorial will get you started with the Hazelcast Node.js client and show you how to manipulate a map.
- [Python Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clients/python)
- [Get started with the Hazelcast Python Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clients/python-client-getting-started): This tutorial will get you started with the Hazelcast Python client and show you how to manipulate a map.
- [REST Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clients/rest)
- [AWS Deployments | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/cluster-performance/aws-deployments)
- [Back Pressure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/cluster-performance/back-pressure)
- [Best practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/cluster-performance/best-practices)
- [Data Affinity | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/cluster-performance/data-affinity): Data affinity ensures that related entries exist on the same member. If related data is on the same member, operations can be executed without the cost of extra network calls and extra wire data. This feature is provided by using the same partition keys for related data.
- [IMap bulk read operations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/cluster-performance/imap-bulk-read-operations): Learn about best practices for IMap bulk read operations.
- [Near Cache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/cluster-performance/near-cache)
- [Performance Tips | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/cluster-performance/performance-tips): The production checklist provides a set of best practices and recommendations to ensure a smooth transition to a production environment which runs a Hazelcast cluster.
- [Pipelining | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/cluster-performance/pipelining)
- [Thread-Per-Core (TPC) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/cluster-performance/thread-per-core-tpc): Find out more about Thread-Per-Core (TPC) and how to enable this feature on clients and cluster members.
- [Threading | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/cluster-performance/threading): Your application server has its own threads. Hazelcast does not use these; it manages its own threads.
- [Accessing Domain Objects Without Domain Classes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/accessing-domain-objects)
- [Creating Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/creating-clusters)
- [Deadline Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/deadline-detector)
- [Deploying User Code from Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/deploying-code-from-clients)
- [Deploying User Code on the Member | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/deploying-code-on-member)
- [Discovering Members by Multicast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/discovering-by-multicast)
- [Discovering Members by TCP | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/discovering-by-tcp)
- [Discovering Java Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/discovering-native-clients)
- [Discovery Mechanisms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/discovery-mechanisms)
- [Failure Detector Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/failure-detector-configuration)
- [User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/legacy-ucd): The previous method of dynamically loading custom classes or domain classes from other members, or deploying your code from your client was known as User Code Deployment. This method has been deprecated and will be removed at the next major version. The legacy information for the deprecated User Code Deployment solution has been retained in this section for your reference.
- [Network Configurations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/network-configuration)
- [Partition Group Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/partition-group-configuration)
- [Phi Accrual Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/phi-accrual-detector)
- [Ping Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/ping-detector)
- [Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/ucn-data-structures): To allow your data structures to resolve your user code, you must reference the required namespace in the data structure configuration. You can configure the same namespace for multiple data structures.
- [Configure Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/ucn-dynamic-client): Clients use the dynamic configuration API to create and update User Code Namespaces on the cluster.
- [Dynamic Configuration API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/ucn-dynamic-config): You can use the dynamic configuration API to deploy resources from your client or HazelcastInstance member. This means that you can configure namespaces and their resources, and replace the resources at runtime for use when a user customization is next instantiated or executed.
- [Enable User Code Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/ucn-enable): For security reasons, you must enable User Code Namespaces using static configuration. You can do this programmatically, or using the Hazelcast configuration file.
- [Member Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/ucn-member-side): User Code Namespaces are referenced by name, and can be statically configured in the Hazelcast configuration file. You can specify JAR, JARS IN ZIP, and CLASS resources in the configuration file.
- [Migrate from User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/ucn-migrate-ucd): User Code Namespaces improves and extends the capabilities of User Code Deployment and is applicable to more use cases. Hazelcast recommends that Enterprise Edition users deprecate their User Code Deployment implementations and migrate to using User Code Namespaces.
- [Non-associated Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/ucn-non-associated): You can configure a default namespace with resources that can be used by any data structure that does not have an associated User Code Namespaces defined, or, for example, a partition loss listener. A default namespace is also useful when you are using an API that is not namespace-aware.
- [Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/ucn-security): You can control who can create, deploy, or replace your User Code Namespaces using permissions. You can also provide permissions for the instantiation and registration of user customizations that lookup code in your User Code Namespaces.
- [Static Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/ucn-static-config): You can configure User Code Namespaces using static configuration in an XML or YAML file, or programmatically. The configuration is applied on start-up.
- [Programmatic Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/ucn-static-programmatic): You can configure your User Code Namespaces and data structures programmatically. You can specify JAR, JARS IN ZIP, and CLASS resources in programmatic configuration.
- [User Code Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/clusters/user-code-namespaces): User Code Namespaces provide a container for Java classpath resources, such as user code and accompanying artifacts like property files. This provides namespace isolation to ensure that access to resources in different namespaces can be managed through configuration.
- [Common Exception Types | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/common-exception-types)
- [Compact Serialization Binary Specification | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/compact-binary-specification): The Compact Serialization Binary Specification defines the binary format of the Compact Serialization, the supported types, and the Compact Schema.
- [Distributed Computing | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/computing/distributed-computing): Explore the tools that Hazelcast offers for distributed computing on cluster members.
- [Durable Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/computing/durable-executor-service)
- [Java Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/computing/executor-service)
- [Scheduled Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/computing/scheduled-executor-service)
- [Member Configuration Files | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/configuration/configuring-declaratively): You can declare settings for Hazelcast members, using a YAML or XML configuration file. Although Hazelcast members read from a single configuration file, you can store settings in multiple files and import them into a single root file to enable reuse.
- [Configuring Hazelcast in Embedded Mode | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/configuration/configuring-programmatically): You can use a configuration object (config object) to configure members with the Java member API. To create new instances of members, pass the config object to those instances.
- [Configuring with System Properties and Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/configuration/configuring-with-system-properties): You can use xref:ROOT:system-properties.adoc[system properties] and environment variables to configure Hazelcast and override existing settings in a root configuration file. Environment variables are useful for configuring members in containerized environments.
- [Configuring Hazelcast in Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/configuration/configuring-within-spring)
- [Dynamic Configuration for Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/configuration/dynamic-config): You can use dynamic configuration to add new configuration to members at runtime or update some supported configuration such as Enterprise Edition license keys. This feature is useful if you want to configure a running cluster without having to restart the members.
- [Configuring Dynamic Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/configuration/dynamic-config-persistence): You can configure members to keep dynamic configuration changes in memory or persist them to a YAML or XML configuration file.
- [Dynamic Configuration with Programmatic APIs (Java) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/configuration/dynamic-config-programmatic-api): You can use the Java member or client APIs to add dynamic configuration to some supported features at runtime.
- [Updating or Reloading Dynamic Configuration in REST | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/configuration/dynamic-config-update-and-reload): You can use the /config/update and /config/reload REST endpoints to add dynamic configuration for some supported features at runtime.
- [Configuring the Jet Engine | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/configuration/jet-configuration)
- [Configuring JVM Parameters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/configuration/jvm-parameters)
- [Configuration Pattern Matcher | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/configuration/pattern-matcher)
- [Hazelcast Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/configuration/understanding-configuration): To configure a Hazelcast cluster or client, you can choose either static or dynamic configuration. Explore the options and decide which one is best for your application.
- [Using Wildcards | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/configuration/using-wildcards)
- [CP Subsystem best practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/cp-subsystem/best-practices): Follow these recommendations to get the best performance out of your CP Subsystem deployment.
- [Configure the CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/cp-subsystem/configuration): You can configure clusters to enable the CP Subsystem and adjust other options such as CP groups sizes and persistence of CP state.
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/cp-subsystem/cp-subsystem): The CP Subsystem is a component of a Hazelcast cluster that builds a strongly consistent layer for a set of distributed data structures. The CP Subsystem withstands network partitions, server failures, and client failures.
- [Manage and monitor the CP subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/cp-subsystem/management): The CP Subsystem requires manual intervention while expanding or shrinking its size, or when a CP member crashes or becomes unreachable. When a CP member becomes unreachable, it is not immediately removed from the CP Subsystem because it could still be active behind a partition. By default, missing CP members are automatically removed after four hours and are replaced by other CP members if any are available.
- [Migrate Raft log files | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/cp-subsystem/raft-log-file-exporter): The RaftLogFileExporter is a tool that helps migrate persisted CP state between different Hazelcast versions. It creates a copy of CP member directories with Raft log files converted into the alternative format.
- [Build MapLoader using Data Connection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-connections/build-map-loader-data-connection): This tutorial shows how to build a custom map loader that uses a configured data connection to load data not present in an IMap.
- [Build pipeline service using Data Connection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-connections/build-pipeline-service-data-connection): This tutorial builds a service that transforms a stream of items. The service uses a data connection to retrieve a connection to a relational database, and uses a table in the database to enrich a stream of numbers with a textual representation of the last digit.
- [Use Data Connection service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-connections/data-connection-service): Using the Data Connection Service gives access to the configured xref:data-connections-configuration.adoc[data connections] in custom components.
- [Configuring Data Connections to External Systems | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-connections/data-connections-configuration): A data connection contains the metadata that Hazelcast needs to connect an external system. You can define a data connection in your members' configuration files, in the Java member API, or in SQL, and reuse the same connection details in the Pipeline API, SQL mappings, and MapStores.
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-connections/mongo-dc-configuration)
- [Making Your Map Data Safe | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/backing-up-maps): Maps are in-memory data structures, which means they are potentially vulnerable to data loss in the event of a system failure. Hazelcast offers several features to minimize the chances of data loss, including in-memory backups and persisted data stores.
- [Cardinality Estimator Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/cardinality-estimator-service)
- [CPMap | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/cpmap)
- [Creating a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/creating-a-map): Maps store data in key/value pairs called entries, which can be one of many data types. To create a map, you just need to give it a name, then write some data to it.
- [Distributed Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/distributed-data-structures)
- [Entry Processor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/entry-processor)
- [Event Journal | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/event-journal)
- [FencedLock | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/fencedlock)
- [Flake ID Generator | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/flake-id-generator)
- [IAtomicLong | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/iatomiclong)
- [IAtomicReference | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/iatomicreference)
- [ICountDownLatch | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/icountdownlatch)
- [ISemaphore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/isemaphore)
- [List | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/list)
- [Acting Upon Changes to a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/listening-for-map-entries): You can set up monitoring of a map to look for specific events, such as adding an entry, updating a specific entry, or deleting an entry. You can use these events to trigger execution of code, or even intercept the event and change it before it affects the data in memory.
- [Locking Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/locking-maps): Although maps are thread-safe, you may prefer to have manual control over which members have access to a map entry at a given time. Hazelcast offers two ways of locking map entries: pessimistic locking and optimistic locking.
- [Managing Map Memory | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/managing-map-memory): Depending on how you use maps, they may become too large for your cluster's memory, or the data may become stale and useless to your applications. To handle these situations, you can set expiration and eviction policies.
- [Distributed Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/map): Distributed maps, also known as maps or IMaps, are key-value pairs that are partitioned across a cluster. Use maps to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/map-config): Map configuration is part of the overall Hazelcast server configuration. When you create your map, it inherits the configuration that is set up on the server. It is important to plan your map configuration ahead of time, as you cannot change the configuration of a map once it is created without restarting your entire cluster.
- [MultiMap | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/multimap)
- [PN Counter | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/pn-counter)
- [Preventing Out of Memory Exceptions when Querying a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/preventing-out-of-memory): Query-based map methods such as entrySet()` may trigger an out of memory exception (OOME), depending on the size of your map and the available memory of each member. To prevent these exceptions, you can configure your cluster to limit query results.
- [Priority Queue | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/priority-queue)
- [Queue | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/queue)
- [Reading Data From a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/reading-a-map): Data in a map is distributed among members in a Hazelcast cluster. To read entries from a map, you can use simple get requests, distributed queries, or use the map as a source in a data pipeline.
- [Reading Map Metrics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/reading-map-metrics): By default, you can read metrics for a given map, such as the primary and backup entry count, last update time, and locked entry count on each member of your cluster. You can access these statistics for the entire map, for the map entries on a specific cluster member, or specific map entries.
- [Reliable Topic | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/reliable-topic)
- [Replicated Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/replicated-map)
- [Ringbuffer | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/ringbuffer)
- [Set | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/set)
- [Setting the In-Memory Format of Map Entries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/setting-data-format): The in-memory format you set to store your data can have a significant impact on the performance of your application. When data is moved either between a client and the Hazelcast cluster or between cluster members, it is always in serialized (binary) format. Depending on your use case, it may be more efficient to store the data in that serialized format, either on-heap or off-heap, or deserialize it back to the original object format.
- [Topic | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/topic)
- [Updating Map Entries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/updating-map-entries): Maps are not static. You can update or remove individual map entries, a group of map entries, or the entire map.
- [Vector Collection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/vector-collections): The primary object for interacting with vector storage is a Vector Collection. A Vector Collection holds information about the vectors and associated metadata (user values).
- [VectorCollection data structure design | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/vector-search-overview): A Hazelcast vector database engine is a specialized type of database, which is optimized for storing, searching, and managing vector embeddings and additional metadata. You can include values in the metadata to provide filtering, additional processing, or analysis of vectors.
- [Vector search tutorial | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/data-structures/vector-search-tutorial): This tutorial guides you through using Hazelcast Enterprise to build an image search system.
- [Choosing an Application Topology | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/deploy/choosing-a-deployment-option): Hazelcast offers two topologies to use Hazelcast: embedded in a Java application or in a client/server topology. To help you choose a topology that meets your requirements, this topic describes each option.
- [Public Clouds | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/deploy/deploying-in-cloud): Deploy a Hazelcast cluster in cloud environments including Hazelcast Cloud, Amazon AWS, Google Cloud Platform, and Azure.
- [Deploying a Cluster on Amazon AWS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/deploy/deploying-on-aws): Deploy Hazelcast clusters on Amazon AWS EC2 and AWS ECS/Fargate environments and allow them to discover each other automatically.
- [Deploying a Cluster on Microsoft Azure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/deploy/deploying-on-azure): Deploy Hazelcast clusters on Azure and allow them to discover each other automatically.
- [Deploying a Cluster on Google Cloud Platform | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/deploy/deploying-on-gcp): Deploy Hazelcast clusters on Google Cloud Platform and allow them to discover each other automatically.
- [Deploy on Docker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/deploy/deploying-with-docker): In this deployment guide, you will learn how to form a cluster from Hazelcast member containers running on more than one Docker host in the same local area network (LAN).
- [Manage Enterprise Edition license keys | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/deploy/enterprise-licenses): To use Hazelcast Enterprise Edition, you need an Enterprise Edition license key. This topic explains how to get a license key, install it on a member, and manage it.
- [Supported Versions and Compatibilities | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/deploy/versioning-compatibility): This section provides the supported versions and interoperability of Hazelcast Platform and its modules.
- [Cluster Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/events/cluster-events)
- [Listening to Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/events/distributed-events)
- [Event Listeners for Hazelcast Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/events/event-listeners-for-clients)
- [Global Event Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/events/global-event-configuration)
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/events/object-events)
- [Config Properties SPI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/extending-hazelcast/config-properties-spi)
- [Discovery SPI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/extending-hazelcast/discovery-spi)
- [Extending Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/extending-hazelcast/extending-hazelcast)
- [OperationParker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/extending-hazelcast/operationparker)
- [Frequently Asked Questions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/faq)
- [Backups | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/fault-tolerance/backups)
- [Fault Tolerance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/fault-tolerance/fault-tolerance)
- [Timeouts | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/fault-tolerance/timeouts)
- [Authenticate client connections | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/getting-started/authenticate-client-tutorial): This tutorial introduces you to member security by setting up authentication for client connections.
- [Deploy blue-green clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/getting-started/deploy-blue-green-tutorial): This tutorial introduces you to blue-green cluster deployments. You'll learn know how to set up a client to operate continuously even when its connected to a cluster that fails.
- [Hazelcast editions and distributions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/getting-started/editions): Hazelcast offers Enterprise Edition and Community Edition versions of Hazelcast Platform, each available as either a full or slim distribution, or via a number of package managers.
- [Start a Local Cluster from Binary | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/getting-started/get-started-binary): This tutorial introduces you to Hazelcast in a client/server topology. At the end of this tutorial, you'll know how to start a cluster from the binary distribution, store data in memory, visualize your data and more.
- [Start a Local Cluster with the CLI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/getting-started/get-started-cli): Follow this five-minute tutorial to set up a Hazelcast cluster for testing or evaluation purposes. In five minutes, you will learn how to install Hazelcast with a package manager, start a local cluster with the CLI, write data to memory and visualize that data.
- [Start a Local Cluster in Docker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/getting-started/get-started-docker): This tutorial introduces you to Hazelcast in a client/server topology. At the end of this tutorial, you'll know how to start a cluster in a single Docker host, store data in memory, visualize your data and more.
- [Get started with Hazelcast Enterprise Edition | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/getting-started/get-started-enterprise): This quickstart tutorial will get you started with Hazelcast Platform Enterprise Edition and take you from installation all the way through to a working three member cluster with persistence enabled.
- [Start a Local Embedded Cluster | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/getting-started/get-started-java): This tutorial introduces you to Hazelcast in an embedded topology. At the end of this tutorial, you'll know how to start a cluster in your Java application and store data in memory.
- [Get started with REST API using Docker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/getting-started/get-started-rest-api-with-docker): This tutorial provides a step-by-step guide to help you enable, run and use the REST API with minimal configuration using Docker.
- [Get Started with REST API using Java | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/getting-started/get-started-rest-api-with-java): This tutorial provides a step-by-step guide to help you enable, run and use the REST API with minimal configuration using Java.
- [Install Hazelcast Enterprise Edition | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/getting-started/install-enterprise): To install Hazelcast Enterprise Edition, you can use Docker, the binary, or Java. To unlock the Enterprise Edition features, you must install your Enterprise Edition license key.
- [Install Hazelcast Community Edition | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/getting-started/install-hazelcast): You can install the Community Edition of Hazelcast using a package manager, Docker, or the binary. Alternatively, you can add Hazelcast as a dependency in your Java project.
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/getting-started/interactive-quickstart)
- [Developer Resources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/getting-started/resources)
- [Get Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/getting-started/support): Hazelcast provides two types of support: one for the community and one for paying customers.
- [Replicate a map across clusters in a WAN | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/getting-started/wan-replication-tutorial): This tutorial introduces you to WAN Replication (also known as Geo-Replication) by showing how to replicate map entries across two clusters.
- [Glossary | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/glossary)
- [Ingesting Data from External Sources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/ingest/overview): Explore the Hazelcast components for ingesting data from both on-premise systems and cloud deployments.
- [CDC Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/cdc-connectors)
- [Connector Guides | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/connectors): Hazelcast comes with a wide range of built-in connectors for accessing data in other platforms. You can also use Hazelcast with pre-built connectors for importing data from external systems. Both types of connector are configured to read and write data in the most efficient way for their respective platform.
- [Custom Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/custom-connectors)
- [Connectors for Databases | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/database-connectors)
- [Elasticsearch Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/elasticsearch-connector)
- [Configure Feature Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/feast-config): To use a Feast project, you must configure the feature store. The configuration is defined in a YAML configuration file.
- [Get Started with Feast Batch Features | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/feature-engineering-with-feast): This tutorial will get you started with feature engineering using the Hazelcast integration with Feast.
- [Unified File Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/file-connector): The unified file connector provides a simple way to read files across different sources. Using this connector, you can read files from the local filesystem, HDFS and cloud storage systems such as Amazon S3, Google Cloud Storage or Azure Blob Storage. This connector supports various data formats, including text files, CSV, JSON, and Avro.
- [Get started with Vert.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/get-started-with-vertx)
- [HTTP Listener Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/http-connector)
- [InfluxDB Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/influxdb-connector)
- [Install Feast and Connect to Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/install-connect): Before you can use Feast with Hazelcast as an online store, you must install Feast and connect to Hazelcast.
- [Integrate with Feast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/integrate-with-feast): Feast (<strong>Fea</strong>ture <strong>St</strong>ore) is a customizable operational data system, which uses your existing infratstructure to manage and serve machine learning features to real-time models. When integrated with Hazelcast, you can benefit from an online store that supports materializing feature values in a running Hazelcast cluster.
- [Integrate with Vert.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/integrate-with-vertx)
- [JCache Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/jcache-connector): The JCache connector is mostly equivalent to the map connector, the main difference being that the JCache connector is compliant with the JCache standard API. As a sink, since JCache doesn't support entry processors, only the default variant is available.
- [JDBC Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/jdbc-connector)
- [JMS Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/jms-connector)
- [Kafka Connect Source Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/kafka-connect-connectors): With a Kafka Connect Source connector, you can reliably import data from an external system, such as a database, key-value store, search index, or file system, directly into a Hazelcast data pipeline. The data is available for stream processing. <strong>No Kafka cluster is required</strong>.
- [Apache Kafka Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/kafka-connector): The Kafka connector allows you to stream, filter, and transform events between Hazelcast clusters and Kafka.
- [Amazon Kinesis Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/kinesis-connector)
- [Legacy CDC Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/legacy-cdc-connectors)
- [Legacy File Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/legacy-file-connector): The legacy file connector allows you to read and write to files, using the Jet API. This connector is still maintained, but all new development goes into the unified file connector.
- [List Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/list-connector)
- [Map Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/map-connector): A map is a distributed in-memory key-value data structure that can be used as a batch or streaming data source as well as a data sink.
- [Connectors for Messaging Systems | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/messaging-system-connectors)
- [MongoDB Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/mongodb-connector)
- [Observable Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/observable-connector): The observable connector provides a way of receiving query results on the same client that submitted a job. This connector is useful when you are using the Jet API for ad-hoc queries and you want to use your client as a sink.
- [Apache Pulsar Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/pulsar-connector)
- [Reliable Topic Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/reliable-topic-connector)
- [Socket Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/socket-connector)
- [Get Started with Feast Streaming Features | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/streaming-features-with-feast): This tutorial will get you started with streaming features using the Hazelcast integration with Feast.
- [Test Source Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/test-connectors): Test sources make it convenient to get started with pipelines without having to use an actual data source. They can also be used for unit testing different pipelines where you can expect a more deterministic import.
- [Vector Collection Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/integrate/vector-collection-connector): Vector collection stores vectors with their related metadata. This allows entries to be found efficiently based on vector distance.
- [JCache API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/jcache/api)
- [JCache - Hazelcast Instance Integration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/jcache/hazelcast-integration)
- [Hazelcast JCache Extension - ICache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/jcache/icache)
- [Hazelcast JCache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/jcache/jcache)
- [JCache Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/jcache/overview)
- [JCache Providers | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/jcache/providers)
- [JCache Setup and Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/jcache/setup)
- [Testing for JCache Specification Compliance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/jcache/tck)
- [Deploying on Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/kubernetes/deploying-in-kubernetes): Discover ways to deploy Hazelcast clusters in Kubernetes (K8s) environments.
- [Add custom JAR files to the classpath | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/kubernetes/helm-adding-custom-jar)
- [Configuring SSL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/kubernetes/helm-configuring-ssl)
- [Dynamic Persistence Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/kubernetes/helm-dynamic-persistence-configuration)
- [Enabling External Access to Cluster | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/kubernetes/helm-enabling-external-access)
- [Deploying Hazelcast Community Edition on Kubernetes with Helm | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/kubernetes/helm-hazelcast-chart): This chart bootstraps a link:https://github.com/hazelcast/hazelcast-docker/tree/master/hazelcast-oss[Hazelcast] and link:https://github.com/hazelcast/management-center-docker[Management Center] deployments on a link:http://kubernetes.io[Kubernetes] cluster using the link:https://helm.sh[Helm] package manager.
- [Deploying Hazelcast Enterprise Edition on Kubernetes with Helm | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/kubernetes/helm-hazelcast-enterprise-chart): This chart bootstraps a link:https://github.com/hazelcast/hazelcast-docker/tree/master/hazelcast-enterprise[Hazelcast Enterprise Edition] and link:https://github.com/hazelcast/management-center-docker[Management Center] deployments on a link:http://kubernetes.io[Kubernetes] cluster using the link:https://helm.sh[Helm] package manager.
- [Helm Upgrade Guide | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/kubernetes/helm-upgrade-guide)
- [Kubernetes Auto Discovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/kubernetes/kubernetes-auto-discovery): Before you start a Hazelcast cluster in Kubernetes (K8s), it's important to configure settings to ensure that members can form a cluster and to prevent any unexpected data loss.
- [Running Hazelcast Enterprise Edition with Persistence under Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/kubernetes/kubernetes-persistence): Hazelcast Enterprise Edition members configured with persistence enabled can monitor the Kubernetes (K8s) context and automate Hazelcast cluster state management to ensure the optimal cluster behavior during shutdown and restart.
- [Troubleshooting and Limitations in Kubernetes Environments | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/kubernetes/troubleshooting-and-limitations): Find advice for troubleshooting issues you might face while deploying Hazelcast via Helm.
- [List of Hazelcast Metrics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/list-of-metrics)
- [Cluster and Member States | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/maintain-cluster/cluster-member-states): Cluster states determine what cluster operations are available. By changing the state of a cluster, you can grant or restrict cluster operations such as repartitioning as well as change the behavior of those operations.
- [Dynamic Configuration using the REST API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/maintain-cluster/dynamic-config-via-rest): This tutorial provides a step-by-step guide to help you add a data structure dynamically using the REST API.
- [REST API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/maintain-cluster/enterprise-rest-api)
- [Enabling Lite Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/maintain-cluster/lite-members)
- [Configuring Logging | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/maintain-cluster/logging): Options available for the logging mechanism of Hazelcast clusters.
- [Filtering Members with Attributes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/maintain-cluster/member-attributes)
- [Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/maintain-cluster/monitoring): Options available for monitoring the health and operations of Hazelcast clusters.
- [Community Edition REST API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/maintain-cluster/rest-api)
- [Swagger UI for REST API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/maintain-cluster/rest-api-swagger)
- [Rolling Upgrades | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/maintain-cluster/rolling-upgrades): You can use rolling upgrades to upgrade the version of Hazelcast members in a running cluster without interrupting the operation of the cluster.
- [Shutting Down Members and Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/maintain-cluster/shutdown): Maintaining a cluster often requires shutting down clusters or individual members to make changes take effect. Hazelcast offers convenient methods for shutting down clusters as well as graceful and ungraceful options for specific members.
- [Cluster utilities | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/management/cluster-utilities): Hazelcast Platform is provided with a range of programmatic utilities that you can use to manage your Hazelcast clusters, including command line interfaces and scripts.
- [Configuring a MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/mapstore/configuration-guide): This topic explains how to configure a map with a MapStore. It includes configuration options for loading data, as well as caching behaviors, and MapStore reuse.
- [Using the generic MapLoader | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/mapstore/configuring-a-generic-maploader): With the xref:working-with-external-data.adoc#options[generic MapLoader], you can configure a map to cache data from an external system. This topic includes an example of how to configure a map with a generic MapLoader that connects to a MySQL database.
- [Using the generic MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/mapstore/configuring-a-generic-mapstore): With the xref:working-with-external-data.adoc#options[generic MapStore], you can configure a map to cache data from and write data back to an external system. This topic includes an example of how to configure a map with a generic MapStore that connects to a MySQL database.
- [Implementing a Custom MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/mapstore/implement-a-mapstore): You can use the Java <code>MapStore</code> and <code>MapLoader</code> interfaces to implement a custom MapStore with your own logic, such as for database connections, loading data from an external system, and writing data back to the external system.
- [Map Operations that Trigger Methods on a MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/mapstore/mapstore-triggers): These are the map operations that trigger methods on a configured MapStore.
- [Building a Cache with MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/mapstore/working-with-external-data): MapStore is an API for building a cache on top of Hazelcast. To build a cache, you can either use a pre-built component, which requires little or no coding. Or, you can use a custom option that allows you to write the interface yourself.
- [Move to Enterprise Edition from Community Edition | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/migrate/community-to-enterprise): With Enterprise Edition, you can benefit from additional and extended features, patch releases, Hazelcast Support, and more connectors. If you are using the Open Source Edition and want to upgrade to Enterprise, you can do this with clusters of the same version from 5.5.
- [Using the Data Migration Tool | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/migrate/data-migration-tool): You can use the Data Migration Tool (DMT) to migrate your data from version 4.x or 5.x Community Edition and Enterprise Edition Hazelcast clusters when upgrading to 5.3.x or later versions of Enterprise Edition, or moving to the latest Cloud release. The DMT can also be used for infrastructure consolidation or separation with selective migration of application data between clusters.
- [DMT Command Reference | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/migrate/dmt-command-reference)
- [Migrating Data from IMDG 3.12.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/migrate/migration-tool-imdg): This guide explains how to migrate data in maps or JCache data structures from a running IMDG 3.12.x cluster to a Hazelcast 5.x cluster.
- [Upgrade Cluster to Enterprise Edition | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/migrate/rolling-restart): You can upgrade your Open Source cluster to an Enterprise cluster using an in-place rolling restart to change each member in turn.
- [Upgrading from IMDG 3.12.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/migrate/upgrading-from-imdg-3)
- [Upgrading from IMDG 4.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/migrate/upgrading-from-imdg-4): This guide covers the most important changes that affect users of IMDG 4.x who want to upgrade to Hazelcast.
- [Upgrading from Jet | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/migrate/upgrading-from-jet): This guide covers the most important changes that affect users of Jet 4.x who want to upgrade to Hazelcast.
- [Dealing with Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/network-partitioning/dealing-with-network-partitions)
- [Network Partitioning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/network-partitioning/network-partitioning)
- [Partial Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/network-partitioning/partial-network-partitions)
- [Split-Brain Protection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/network-partitioning/split-brain-protection)
- [Split-Brain Recovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/network-partitioning/split-brain-recovery)
- [API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/osgi/api)
- [Configuring Hazelcast OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/osgi/configuring-osgi-support)
- [Design | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/osgi/design)
- [OSGI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/osgi/osgi)
- [OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/osgi/osgi-support)
- [Using Hazelcast OSGI Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/osgi/using-osgi-service)
- [Caching Deserialized Values | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/performance/caching-deserialized-values)
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/phone-homes)
- [About Stream Processing Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/building-pipelines): Streaming jobs are those that process an infinite amount of data such as a continuous event stream. Because these jobs continue to run until they are canceled, you must use timestamps to define time windows in which to collect events.
- [Capture Changes from MySQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/cdc)
- [Setting Up a Database for Change Data Capture | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/cdc-database-setup)
- [Join Change Data Capture Records | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/cdc-join)
- [Change Data Capture (CDC) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/cdc-overview): Change Data Capture (CDC) is a pipeline pattern for observing changes made to a database and extracting them in a form usable by other systems, for the purposes of replication, analysis and more.
- [Capture Changes from PostgreSQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/cdc-postgres)
- [Configuring Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/configuring-jobs): Before submitting a job to a cluster, you can configure its name, whether to record metrics, how it behaves when cluster members fail, and more.
- [Building a Custom Aggregate Operation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/custom-aggregate-operation)
- [Adding Batching to a Custom Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/custom-batch-source): To improve the throughput of your custom sources, you can add batching to reads.
- [Create a Custom Sink | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/custom-sink)
- [Creating a Custom Streaming Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/custom-stream-source): If Hazelcast is missing a built-in source, or a suitable Kafka Connect Source connector is unavailable, you build your own streaming source, using the Jet API.
- [Extract Transform Load (ETL) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/etl-overview): ETL is a pipeline pattern for collecting data from various sources, transforming (changing) it to conform to some rules, and loading it into a sink. This pattern is often used to form materialized views where data is processed and put into a Hazelcast map for fast in-memory queries.
- [Mapping Data in a Pipeline Using a a gRPC Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/grpc): When processing data in a pipeline, you can use an external service to execute a function on input data, and pass the output to the next stage of pipeline. A popular way of exposing external services is to use the gRPC protocol.
- [Ingesting Data from Sources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/ingesting-from-sources): In order to process data, you first need to ingest it into your pipeline, using one or more sources.
- [Managing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/job-management): Once a job is submitted, it has its own lifecycle on the cluster which is distinct from the submitter. To manage the lifecycle of jobs, you can use either SQL or CLI commands to list, cancel, suspend, resume, and restart them.
- [Monitoring Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/job-monitoring): To ensure the reliability of streaming jobs and their workloads, try implementing some basic monitoring. With Hazelcast, you can monitor the status of streaming jobs to quickly identify job failures for troubleshooting.
- [Jet Job Placement Control | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/job-placement-control): Your Jet processing jobs can be distributed across a defined subset of the cluster. This approach provides finer control of your Jet processing, which means that you can distribute your workload to meet your requirements.
- [Securing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/job-security): While submitting jobs, you can upload custom code that bypasses client permissions. Jobs also have access to data outside Hazelcast such as files on the device that's running a member. As a result, it's important to be aware of how to secure your Hazelcast member against malicious jobs.
- [Updating Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/job-update): Update streaming jobs without losing computation state.
- [Connect to Apache Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/kafka)
- [Connect to Amazon Kinesis | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/kinesis)
- [Enrich a Stream | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/map-join): In this tutorial, you build a pipeline that takes a stream of trades from a stock exchange and enriches it with a full company name for nicer presentation. Each trade contains a stock symbol, also known as ticker, which uniquely identifies the stock. You will use the ticker to look up the full company name in a replicated map.
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/object-events)
- [Receiving Pipeline Results on the Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/observables)
- [About Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/overview): Learn about the core concepts of data pipelines and how you can build your own with the Hazelcast Jet engine.
- [Group Messages from Apache Pulsar | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/pulsar)
- [Apply a Custom Transform with Python | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/python)
- [Sending Results to Sinks | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/sending-data-to-sinks): After defining the processing steps in a pipeline, you must send the results to at least one destination called a sink. Hazelcast comes with built-in sinks as well as a public API for building your own.
- [Serializing Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/serialization)
- [Subscribe to Changes to a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/stream-imap)
- [Get Started with Stream Processing (Client/Server) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/stream-processing-client): This tutorial shows you how to use a Hazelcast cluster as a data processing engine for your client applications. At the end of this tutorial, you'll know how to build a data pipeline in Java and submit it as a job to your Hazelcast cluster.
- [Get Started with Stream Processing (Embedded) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/stream-processing-embedded): This tutorial shows you how to use Hazelcast as a streaming engine that's embedded in your Java application. At the end of this tutorial, you'll know how to ingest data from some test sources and filter it continuously to generate results in real time.
- [Submitting Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/submitting-jobs): Submit data pipelines to a Hazelcast cluster for execution.
- [Transforms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/transforms): Hazelcast offers several transforms which can be used to process data. Explore the available transforms and learn how to use them.
- [Apply Windowed Aggregation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/windowing)
- [Testing Sources and Sinks for XA Transaction Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/pipelines/xa): In order to have end-to-end exactly-once processing in pipelines, sources and sinks need to support it too. Although many sources and sinks ensure atomicity (all distributed participants either commit the transaction or roll back), some do not survive a client disconnection. You can test whether a source or a sink will survive a client disconnection, using either JDBC or Java Messaging Service (JMS).
- [This page is a placeholder | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/placeholder)
- [Cloud Discovery Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/plugins/cloud-discovery)
- [Framework Integration Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/plugins/framework-integration)
- [Hazelcast Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/plugins/hazelcast-plugins)
- [Other Integrations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/plugins/other-integrations)
- [Web Session Replication Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/plugins/web-session-replication)
- [Indexing Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/query/indexing-maps): Indexes improve the performance of queries on map entries by reducing the number of entries that members need to iterate through.
- [Running Distributed Queries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/query/overview): Explore the tools that Hazelcast offers for running distributed queries.
- [Predicates API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/query/predicate-overview): The Predicates API is a programming interface for querying data in Hazelcast, which is similar to the Java Persistence Query Language (JPQL).
- [Community Edition Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/release-notes/community): These release notes list any new features, enhancements, fixes, security issues and breaking changes that were made for Hazelcast Platform Community Edition.
- [Enterprise Edition Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/release-notes/enterprise): These release notes list any new features, enhancements, fixes, security issues and breaking changes that were made for Hazelcast Platform Enterprise Edition.
- [Hazelcast Platform Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/release-notes/releases): Overview of releases and detailed release notes for Enterprise Edition and Community Edition versions of Hazelcast Platform.
- [Security Hardening Recommendations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/secure-cluster/hardening-recommendations)
- [Security Defaults | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/secure-cluster/security-defaults)
- [Authentication overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/authentication-overview)
- [Client Authorization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/client-authorization)
- [Default authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/default-authentication)
- [Enabling Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/enable-security)
- [Encryption | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/encryption)
- [FIPS 140-2 | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/fips-140-2)
- [Identity configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/identity-configuration)
- [Integrating OpenSSL / BoringSSL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/integrating-openssl)
- [JAAS Authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/jaas-authentication)
- [Kerberos Authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/kerberos-authentication)
- [LDAP Authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/ldap-authentication)
- [Logging Auditable Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/logging-auditable-events)
- [Security Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/overview)
- [Security Debugging | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/security-debugging)
- [Security Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/security-interceptor)
- [Simple Authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/simple-authentication)
- [Socket Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/socket-interceptor)
- [TLS Authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/tls-authentication)
- [Other TLS-Related Configurations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/tls-configuration)
- [TLS/SSL Basics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/tls-ssl)
- [Validating Secrets Using Strength Policy | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/security/validating-secrets)
- [Compact Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/serialization/compact-serialization)
- [Custom Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/serialization/custom-serialization)
- [Global Serializer | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/serialization/global-serializer)
- [Implementing DataSerializable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/serialization/implementing-dataserializable)
- [Implementing HazelcastInstanceAware | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/serialization/implementing-hazelcastinstanceaware)
- [IdentifiedDataSerializable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/serialization/implementing-identifieddataserializable)
- [Implementing Java Serializable and Externalizable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/serialization/implementing-java-serializable)
- [Implementing Portable Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/serialization/implementing-portable-serialization)
- [Serializing Objects and Classes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/serialization/serialization): For data to be sent over a network between cluster members and/or clients, it needs to be serialized into raw bytes. Hazelcast has many serialization options to choose from, depending on what you plan on doing with your data.
- [Configuring Serializers | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/serialization/serialization-configuration): You can configure clusters to be able to serialize and deserialize custom objects and classes as well as override built-in serializers and whitelist certain Java classes.
- [Serializing into JSON | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/serialization/serializing-json): If you want to query JSON strings that are stored in Hazelcast, you can serialize them, using <code>HazelcastJsonValue</code>.
- [Hazelcast Simulator | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/simulator)
- [Add caching to Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/spring/add-caching)
- [Configure Hazelcast in Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/spring/configuration)
- [Configure Hibernate second-level cache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/spring/hibernate)
- [Integrate with Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/spring/overview)
- [Spring Hazelcast Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/spring/spring-hazelcast-support)
- [Spring Session and Spring Security guide | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/spring/spring-session-guide)
- [Enable SpringAware data structures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/spring/springaware)
- [Configure Hazelcast Transaction Manager | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/spring/transaction-manager)
- [ALTER JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/alter-job): With the <code>ALTER JOB</code> statement, you can suspend, resume, or restart a job that is running on a cluster. You can also update the configuration of a suspended job and resume it.
- [CREATE DATA CONNECTION | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/create-data-connection): The <code>CREATE DATA CONNECTION</code> statement creates the metadata required to connect to an external system for later use.
- [CREATE INDEX | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/create-index): The CREATE INDEX statement creates a sorted, hash, or bitmap index for a given map.
- [CREATE JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/create-job): The CREATE JOB statement submits a job to Hazelcast to run independently of the SQL client. With this statement, you can run a SQL statement in the background.
- [CREATE MAPPING | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/create-mapping): The CREATE MAPPING statement creates a table that stores essential metadata about a source's data model, data connection or connection parameters, and serialization formats so that the SQL service can connect to the data source and query it.
- [CREATE OR REPLACE SNAPSHOT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/create-snapshot): The CREATE OR REPLACE SNAPSHOT statement creates a named snapshot that you can use to start other jobs or keep as a backup.
- [CREATE VIEW | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/create-view): The CREATE VIEW statement creates a virtual table based on the result set of an SQL query. Views can be reused in other queries.
- [SQL Data Types | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/data-types): Hazelcast supports a subset of SQL data types. Each data type is mapped to a Java class, which represents the type's value in Hazelcast.
- [DELETE | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/delete): The DELETE statement deletes map entries that match the condition in a given WHERE clause.
- [DROP DATA CONNECTION | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/drop-data-connection): The <code>DROP DATA CONNECTION</code> statement deletes a data connection. Dropping a data connection affects all existing mappings where the data connection is in use, but will not affect any queries that are already running.
- [DROP JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/drop-job): The DROP JOB statement cancels a job and gives you the option to create a named snapshot from its state.
- [DROP MAPPING | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/drop-mapping): The DROP MAPPING statement removes an existing mapping.
- [DROP SNAPSHOT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/drop-snapshot): The DROP SNAPSHOT statement deletes a named snapshot.
- [DROP VIEW | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/drop-view): The DROP VIEW statement deletes a view.
- [EXPLAIN | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/explain): The EXPLAIN statement returns the execution plan for a given statement, without executing it.
- [Meta-information about Mappings | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/finding-mappings)
- [Expressions, Functions and Operators | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/functions-and-operators): Hazelcast supports a subset of standard SQL expressions, functions, and operators as well as non-standard functions for special cases such as windowed aggregation.
- [Get started with SQL over maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/get-started-sql): In this tutorial, you learn the basics of querying maps in SQL by running ad-hoc and batch queries on some test data.
- [Get started with SQL over files | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/get-started-sql-files): In this tutorial, you learn the basics of querying files in SQL by creating and querying a CSV file.
- [Improving the Performance of SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/improving-performance): Use this topic to find advice on improving the performance of slow queries.
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/interactive-sql-files)
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/interactive-sql-kafka)
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/interactive-sql-maps)
- [Get started with SQL over Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/learn-sql): In this tutorial, you use an interactive SQL shell on a Hazelcast member to query Kafka topics in real-time.
- [Creating a Mapping to a File System | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/mapping-to-a-file-system): To query data in files, you need to create a mapping to a file, using the unified file connector so that the SQL service knows how to access the data.
- [Mapping to JDBC | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/mapping-to-jdbc): To query external JDBC data stores, you can create a mapping to them with the JDBC connector.
- [Mapping to Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/mapping-to-kafka): To query streams in Kafka topics, you need to create a mapping with the Kafka connector so that the SQL service knows how to access the messages.
- [Mapping to Hazelcast Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/mapping-to-maps): To query entries in maps, you need to create a mapping with the map connector so that the SQL service knows how to access the entries.
- [Mapping to MongoDB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/mapping-to-mongo): To query MongoDB data connections, you can create a mapping to them with the Mongo connector.
- [Using Query Parameters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/parameterized-queries): In Hazelcast clients, you can use query parameters to build safer, faster SQL queries.
- [Partition pruning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/partition-pruning): The partition pruning optimization technique reduces latency for faster IMap SQL queries.
- [Querying Maps with SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/querying-maps-sql): You can use SQL to run optimized distributed queries on the keys and values of maps in a local cluster.
- [Stream Processing in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/querying-streams): You can run SQL queries on single streams, join a stream with a table, or join two or more streams.
- [SELECT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/select): The SELECT statement reads data from tables, allowing you to query and process your data based on one or more parameters.
- [SHOW JOBS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/show-jobs): The SHOW JOBS statement displays a sorted list of all named jobs. The list includes any existing jobs that were submitted through the Java API as long as they have a name. The list does not include jobs that have already completed with or without an error.
- [SHOW MAPPINGS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/show-mappings): The SHOW MAPPINGS statement displays a sorted list of all mappings.
- [SHOW RESOURCES | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/show-resources): The <code>SHOW RESOURCES</code> statement displays a list of all resources, along with their data types, that are accessible via a named data connection. These are the resources for which you can create a mapping. Each type of data connection has a unique set of resources. For example:
- [INSERT INTO/SINK INTO | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/sink-into): The <code>INSERT INTO</code>/<code>SINK INTO</code> statements write data to platforms that are connected to Hazelcast through connectors.
- [SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/sql-overview): You can use SQL to query data in maps, Kafka topics, or a variety of file systems. Results can be sent directly to the client or inserted into maps or Kafka topics.
- [Configuring Reflection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/sql-reflection-configuration): Clusters can be configured to restrict the capability of creating objects through reflection during SQL execution.
- [SQL Statements | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/sql-statements): Hazelcast supports the following SQL statements. Explore the available statements and find more details about them.
- [Troubleshooting SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/troubleshooting): This topic provides solutions to some common errors in SQL queries.
- [UPDATE | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/update): The UPDATE statement overwrites the values of map entries that match the condition in a given WHERE clause.
- [User-Defined Types in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/user-defined-types)
- [Working with JSON Data in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/sql/working-with-json): In Hazelcast, the SQL service supports ways of working with JSON data: `json-flat`, which does not allow you to query nested keys/values and `json`, which supports nested queries and JSON functions.
- [Backing Up the Persistence Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/storage/backing-up-persistence): You can trigger backups of your persistence store, using the Java API, REST API, or Management Center. Backing up the persistence store is useful if you want to copy the data onto other clusters without having to shut down your cluster.
- [Configuring Persistence | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/storage/configuring-persistence): You can configure clusters to persist data structures, job snapshots, and SQL metadata on disk. You can also implement configuration options to fine-tune backups, encryption, and auto-recovery.
- [Copying Persisted Data onto other Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/storage/copying-persistence): When you persist data on disk, you may want to copy that data onto another cluster to perform testing, QA, or reproduce an issue on production data.
- [High-Density Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/storage/high-density-memory): The High-Density Memory Store is Hazelcast's enterprise in-memory storage solution. It solves garbage collection limitations so that applications can exploit hardware memory more efficiently without the need of oversized clusters.
- [Persistence Performance Benchmark | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/storage/performance): Find summaries of Persistence performance tests that were performed with a single Hazelcast member running on a physical server and on AWS R3.
- [Persisting Data on Disk | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/storage/persistence): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from planned cluster-wide shutdowns, unplanned cluster-wide failures, and to accelerate individual member restarts by reducing the volume of data sent over the network.
- [Persistence Design Details | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/storage/persistence-design)
- [Store Persistence Data on Intel® Optane™ DC Persistent Memory | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/storage/persistence-on-intel): In this tutorial, you'll use Intel® Optane™ DC Persistent Memory (PMem) to improve the performance of disk reads and writes, allowing your cluster to access data on disk faster.
- [Triggering a Force-Start | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/storage/triggering-force-start): To recover a cluster that has Persistence enabled after a cluster-wide restart, you can force a cluster to delete their persistence stores when one or more members fail to restart.
- [Triggering a Partial-Start | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/storage/triggering-partial-start): To recover a cluster that has Persistence enabled after a cluster-wide restart, you can force a cluster to start without some members when one or more of them fail.
- [System Properties | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/system-properties)
- [Testing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/test/testing)
- [Testing Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/test/testing-apps)
- [Creating a Transaction Interface | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/transactions/creating-a-transaction-interface)
- [Providing XA Transactions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/transactions/providing-xa-transactions)
- [Error Handling Strategies for Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/troubleshoot/error-handling): Jobs may not run as expected due to I/O errors in sources and sinks, or coding and input data errors in your pipelines. To handle these errors you can use one of the following strategies.
- [Recovery from Client Connection Failures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/troubleshoot/recovery-clients)
- [Recovery from a Partial or Total Failure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/troubleshoot/recovery-members)
- [Actions and Remedies for Alerts | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/troubleshoot/remedies-for-alerts): Find advice for remedies for the Hazelcast alerts.
- [Troubleshooting Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/troubleshoot/troubleshooting): Find advice for troubleshooting issues in your Hazelcast applications or your cluster deployments.
- [Deploy Hazelcast using Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/tutorials/kubernetes): In this tutorial, you will deploy a Hazelcast cluster to Kubernetes and connect it to a Kubernetes application.
- [Advanced Features | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/wan/advanced-features)
- [Configuring for IMap and ICache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/wan/configuring-for-map-and-cache)
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/wan/defining-wan-replication)
- [Failure Detection and Recovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/wan/failures)
- [WAN Replication Modes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/wan/modes)
- [WAN Quickstart | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/wan/quick-start)
- [REST API for WAN Wrap-Up | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/wan/rest-api)
- [Fine-Tuning WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/wan/tuning)
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/wan/wan)
- [What is Hazelcast Platform? | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/what-is-hazelcast): Hazelcast Platform uniquely combines a distributed compute engine and a fast data store in one runtime. It offers unmatched performance, resilience and scale for real-time and AI-driven applications.
- [What’s New in Hazelcast Platform | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.6/whats-new): Here are the highlights of what's new and improved in Hazelcast Platform 5.6, including Management Center and Platform Operator for Kubernetes updates.
- [What is Hazelcast Platform? | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/): Hazelcast Platform uniquely combines a distributed compute engine and a fast data store in one runtime. It offers unmatched performance, resilience and scale for real-time and AI-driven applications.
- [Hazelcast Architecture | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/architecture/architecture): Hazelcast is a distributed computation and storage platform for consistent low-latency querying, aggregation, and stateful computation against event streams and traditional data sources. This guide outlines how Hazelcast works under the hood to help you understand some important concepts.
- [Data Partitioning and Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/architecture/data-partitioning): Partitioning and replication are two common techniques used together in distributed systems to achieve scalable, available, and transparent data distribution.
- [Jet: How Hazelcast Models and Executes Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/architecture/distributed-computing): Hazelcast models your pipeline code into a directed acyclic graph (DAG) which consists of stages. Each processing stage accepts the events from upstream stages, processes them, and passes the results to the downstream stage. To run a job, Hazelcast transforms the pipeline DAG into the core DAG. The top-level component that does this is called the planner.
- [How Hazelcast Handles Event Disorder | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/architecture/event-time-processing): To make sure that late events do not slow down jobs, Hazelcast allows you to define a threshold (lag) for how late events can be before they are ignored. To determine a late event, Hazelcast uses distributed watermarks to define the current time and compare it against the configured lag.
- [Cooperative Multithreading | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/architecture/execution-engine)
- [In-Memory Storage | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/architecture/in-memory-storage)
- [Jet: Sliding Window Aggregation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/architecture/sliding-window)
- [Ask AI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/ask-ai): Use our Ask AI feature to get instant answers to technical questions and help troubleshoot problems.
- [Caching Data | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/cache/overview): Hazelcast provides APIs and plugins for building distributed caches for your data, including web sessions, database queries, and compute results. Get familiar with Hazelcast as a cache and find useful resources for your use case.
- [Capacity Planning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/capacity-planning): Capacity planning involves estimating and validating the capacity of a cluster in order to determine which recommendations and best practices can help that cluster achieve its best reasonable performance.
- [Hazelcast Command-Line Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clients/clc)
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clients/client-overview): Overview of the main Hazelcast clients and APIs
- [C++ Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clients/cplusplus)
- [Get started with the Hazelcast C++ Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clients/cpp-client-getting-started): This tutorial will get you started with the Hazelcast C++ client and show you how to manipulate a map.
- [Get started with the Hazelcast .NET Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clients/csharp-client-getting-started): In this tutorial you will see how to connect with the Hazelcast .NET client and manipulate a map.
- [.NET Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clients/dotnet)
- [Go Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clients/go)
- [Get started with the Hazelcast Go Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clients/go-client-getting-started): This tutorial will get you started with the Hazelcast Go client and show you how to manipulate a map.
- [Getting Started with a Hazelcast Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clients/hazelcast-clients): Hazelcast has clients in Java, .NET, Python, C++, Go, Node.js and Memcache. You can use these clients to communicate with cluster members.
- [Java Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clients/java): Hazelcast provides a Java Client and Embedded Server within the standard distribution you can start using right away.
- [Get started with the Hazelcast Java Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clients/java-client-getting-started): This tutorial will get you started with the Hazelcast Java client and show you how to manipulate a map.
- [Use Memcache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clients/memcache)
- [Node.js Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clients/nodejs)
- [Get started with the Hazelcast Node.js Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clients/nodejs-client-getting-started): This tutorial will get you started with the Hazelcast Node.js client and show you how to manipulate a map.
- [Python Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clients/python)
- [Get started with the Hazelcast Python Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clients/python-client-getting-started): This tutorial will get you started with the Hazelcast Python client and show you how to manipulate a map.
- [REST Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clients/rest)
- [AWS Deployments | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/cluster-performance/aws-deployments)
- [Back Pressure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/cluster-performance/back-pressure)
- [Best practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/cluster-performance/best-practices)
- [Data Affinity | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/cluster-performance/data-affinity): Data affinity ensures that related entries exist on the same member. If related data is on the same member, operations can
- [IMap bulk read operations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/cluster-performance/imap-bulk-read-operations): Learn about best practices for IMap bulk read operations.
- [Near Cache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/cluster-performance/near-cache)
- [Performance Tips | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/cluster-performance/performance-tips): The production checklist provides a set of best practices and recommendations to ensure a smooth transition to a production environment which runs a Hazelcast cluster.
- [Performance Tuning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/cluster-performance/performance-tuning)
- [Pipelining | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/cluster-performance/pipelining)
- [Thread-Per-Core (TPC) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/cluster-performance/thread-per-core-tpc): Find out more about Thread-Per-Core (TPC) and how to enable this feature on clients and cluster members.
- [Threading | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/cluster-performance/threading): Your application server has its own threads. Hazelcast does not use these; it manages its own threads.
- [Accessing Domain Objects Without Domain Classes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/accessing-domain-objects)
- [Creating Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/creating-clusters)
- [Deadline Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/deadline-detector)
- [Deploying User Code from Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/deploying-code-from-clients)
- [Deploying User Code on the Member | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/deploying-code-on-member)
- [Discovering Members by Multicast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/discovering-by-multicast)
- [Discovering Members by TCP | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/discovering-by-tcp)
- [Discovering Java Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/discovering-native-clients)
- [Discovery Mechanisms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/discovery-mechanisms)
- [Failure Detector Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/failure-detector-configuration)
- [User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/legacy-ucd): The previous method of dynamically loading custom classes or domain classes from other members, or deploying your code from your client was known as User Code Deployment. This method has been deprecated and will be removed at the next major version. The legacy information for the deprecated User Code Deployment solution has been retained in this section for your reference.
- [Network Configurations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/network-configuration)
- [Partition Group Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/partition-group-configuration)
- [Phi Accrual Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/phi-accrual-detector)
- [Ping Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/ping-detector)
- [Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/ucn-data-structures): To allow your data structures to resolve your user code, you must reference the required namespace in the data structure configuration. You can configure the same namespace for multiple data structures.
- [Configure Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/ucn-dynamic-client): Clients use the dynamic configuration API to create and update User Code Namespaces on the cluster.
- [Dynamic Configuration API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/ucn-dynamic-config): You can use the dynamic configuration API to deploy resources from your client or HazelcastInstance member. This means that you can configure namespaces and their resources, and replace the resources at runtime for use when a user customization is next instantiated or executed.
- [Enable User Code Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/ucn-enable): For security reasons, you must enable User Code Namespaces using static configuration. You can do this programmatically, or using the Hazelcast configuration file.
- [Member Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/ucn-member-side): User Code Namespaces are referenced by name, and can be statically configured in the Hazelcast configuration file. You can specify JAR, JARS IN ZIP, and CLASS resources in the configuration file.
- [Migrate from User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/ucn-migrate-ucd): User Code Namespaces improves and extends the capabilities of User Code Deployment and is applicable to more use cases. Hazelcast recommends that Enterprise Edition users deprecate their User Code Deployment implementations and migrate to using User Code Namespaces.
- [Non-associated Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/ucn-non-associated): You can configure a default namespace with resources that can be used by any data structure that does not have an associated User Code Namespaces defined, or, for example, a partition loss listener. A default namespace is also useful when you are using an API that is not namespace-aware.
- [Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/ucn-security): You can control who can create, deploy, or replace your User Code Namespaces using permissions. You can also provide permissions for the instantiation and registration of user customizations that lookup code in your User Code Namespaces.
- [Static Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/ucn-static-config): You can configure User Code Namespaces using static configuration in an XML or YAML file, or programmatically. The configuration is applied on start-up.
- [Programmatic Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/ucn-static-programmatic): You can configure your User Code Namespaces and data structures programmatically. You can specify JAR, JARS IN ZIP, and CLASS resources in programmatic configuration.
- [User Code Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/clusters/user-code-namespaces): User Code Namespaces provide a container for Java classpath resources, such as user code and accompanying artifacts like property files. This provides namespace isolation to ensure that access to resources in different namespaces can be managed through configuration.
- [Common Exception Types | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/common-exception-types)
- [Compact Serialization Binary Specification | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/compact-binary-specification): The Compact Serialization Binary Specification defines the binary format of the Compact Serialization, the supported types, and the Compact Schema.
- [Distributed Computing | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/computing/distributed-computing): Explore the tools that Hazelcast offers for distributed computing on cluster members.
- [Durable Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/computing/durable-executor-service)
- [Java Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/computing/executor-service)
- [Scheduled Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/computing/scheduled-executor-service)
- [Member Configuration Files | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/configuration/configuring-declaratively): You can declare settings for Hazelcast members, using a YAML or XML configuration file. Although Hazelcast members read from a single configuration file, you can store settings in multiple files and import them into a single root file to enable reuse.
- [Configuring Hazelcast in Embedded Mode | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/configuration/configuring-programmatically): You can use a configuration object (config object) to configure members with the Java member API. To create new instances of members, pass the config object to those instances.
- [Configuring with System Properties and Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/configuration/configuring-with-system-properties): You can use xref:ROOT:system-properties.adoc[system properties] and environment variables to configure Hazelcast and override existing settings in a root configuration file. Environment variables are useful for configuring members in containerized environments.
- [Configuring Hazelcast in Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/configuration/configuring-within-spring)
- [Dynamic Configuration for Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/configuration/dynamic-config): You can use dynamic configuration to add new configuration to members at runtime or update some supported configuration such as Enterprise Edition license keys. This feature is useful if you want to configure a running cluster without having to restart the members.
- [Configuring Dynamic Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/configuration/dynamic-config-persistence): You can configure members to keep dynamic configuration changes in memory or persist them to a YAML or XML configuration file.
- [Dynamic Configuration with Programmatic APIs (Java) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/configuration/dynamic-config-programmatic-api): You can use the Java member or client APIs to add dynamic configuration to some supported features at runtime.
- [Updating or Reloading Dynamic Configuration in REST | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/configuration/dynamic-config-update-and-reload): You can use the /config/update and /config/reload REST endpoints to add dynamic configuration for some supported features at runtime.
- [Configuring the Jet Engine | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/configuration/jet-configuration)
- [Configuring JVM Parameters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/configuration/jvm-parameters)
- [Configuration Pattern Matcher | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/configuration/pattern-matcher)
- [Hazelcast Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/configuration/understanding-configuration): To configure a Hazelcast cluster or client, you can choose either static or dynamic configuration. Explore the options and decide which one is best for your application.
- [Using Wildcards | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/configuration/using-wildcards)
- [Best Practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/cp-subsystem/best-practices): Consider the following, a wrap-up of the aforementioned recommendations, to get the best throughput out of your CP Subsystem use case.
- [Configuring CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/cp-subsystem/configuration): You can configure clusters to enable the CP Subsystem as well as fine-tune many other options such as CP groups sizes and persistence of CP state.
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/cp-subsystem/cp-subsystem): CP Subsystem is a component of a Hazelcast cluster that builds a strongly consistent layer for a set of distributed data structures. As well as network partitions, the CP Subsystem withstands server and client failures.
- [Managing and Monitoring the CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/cp-subsystem/management): The CP Subsystem requires manual intervention while expanding or shrinking its size, or when a CP member crashes or becomes unreachable. When a CP member becomes unreachable, it is not automatically removed from CP Subsystem because it could still be active and partitioned away.
- [Build MapLoader using Data Connection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-connections/build-map-loader-data-connection)
- [Build pipeline service using Data Connection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-connections/build-pipeline-service-data-connection)
- [Use Data Connection service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-connections/data-connection-service): Using the Data Connection Service gives access to the configured xref:data-connections-configuration.adoc[data connections] in custom components.
- [Configuring Data Connections to External Systems | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-connections/data-connections-configuration): A data connection contains the metadata that Hazelcast needs to connect an external system. You can define a data connection in your members' configuration files, in the Java member API, or in SQL, and reuse the same connection details in the Pipeline API, SQL mappings, and MapStores.
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-connections/mongo-dc-configuration)
- [Making Your Map Data Safe | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/backing-up-maps): Maps are in-memory data structures, which means they are potentially vulnerable to data loss in the event of a system failure. Hazelcast offers several features to minimize the chances of data loss, including in-memory backups and persisted data stores.
- [Cardinality Estimator Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/cardinality-estimator-service)
- [CPMap | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/cpmap)
- [Creating a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/creating-a-map): Maps store data in key/value pairs called entries, which can be one of many data types. To create a map, you just need to give it a name, then write some data to it.
- [Distributed Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/distributed-data-structures)
- [Entry Processor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/entry-processor)
- [Event Journal | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/event-journal)
- [FencedLock | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/fencedlock)
- [Flake ID Generator | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/flake-id-generator)
- [IAtomicLong | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/iatomiclong)
- [IAtomicReference | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/iatomicreference)
- [ICountDownLatch | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/icountdownlatch)
- [ISemaphore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/isemaphore)
- [List | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/list)
- [Acting Upon Changes to a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/listening-for-map-entries): You can set up monitoring of a map to look for specific events, such as adding an entry, updating a specific entry, or deleting an entry. You can use these events to trigger execution of code, or even intercept the event and change it before it affects the data in memory.
- [Locking Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/locking-maps): Although maps are thread-safe, you may prefer to have manual control over which members have access to a map entry at a given time. Hazelcast offers two ways of locking map entries: pessimistic locking and optimistic locking.
- [Managing Map Memory | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/managing-map-memory): Depending on how you use maps, they may become too large for your cluster's memory, or the data may become stale and useless to your applications. To handle these situations, you can set expiration and eviction policies.
- [Distributed Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/map): Distributed maps, also known as maps or IMaps, are key-value pairs that are partitioned across a cluster. Use maps to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/map-config): Map configuration is part of the overall Hazelcast server configuration. When you create your map, it inherits the configuration that is set up on the server. It is important to plan your map configuration ahead of time, as you cannot change the configuration of a map once it is created without restarting your entire cluster.
- [MultiMap | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/multimap)
- [PN Counter | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/pn-counter)
- [Preventing Out of Memory Exceptions when Querying a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/preventing-out-of-memory): Query-based map methods such as entrySet()` may trigger an out of memory exception (OOME), depending on the size of your map and the available memory of each member. To prevent these exceptions, you can configure your cluster to limit query results.
- [Priority Queue | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/priority-queue)
- [Queue | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/queue)
- [Reading Data From a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/reading-a-map): Data in a map is distributed among members in a Hazelcast cluster. To read entries from a map, you can use simple get requests, distributed queries, or use the map as a source in a data pipeline.
- [Reading Map Metrics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/reading-map-metrics): By default, you can read metrics for a given map, such as the primary and backup entry count, last update time, and locked entry count on each member of your cluster. You can access these statistics for the entire map, for the map entries on a specific cluster member, or specific map entries.
- [Reliable Topic | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/reliable-topic)
- [Replicated Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/replicated-map)
- [Ringbuffer | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/ringbuffer)
- [Set | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/set)
- [Setting the In-Memory Format of Map Entries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/setting-data-format): The in-memory format you set to store your data can have a significant impact on the performance of your application. When data is moved either between a client and the Hazelcast cluster or between cluster members, it is always in serialized (binary) format. Depending on your use case, it may be more efficient to store the data in that serialized format, either on-heap or off-heap, or deserialize it back to the original object format.
- [Topic | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/topic)
- [Updating Map Entries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/updating-map-entries): Maps are not static. You can update or remove individual map entries, a group of map entries, or the entire map.
- [Vector Collection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/vector-collections): The primary object for interacting with vector storage is a Vector Collection. A Vector Collection holds information about the vectors and associated metadata (user values).
- [VectorCollection data structure design | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/vector-search-overview): A Hazelcast vector database engine is a specialized type of database, which is optimized for storing, searching, and managing vector embeddings and additional metadata. You can include values in the metadata to provide filtering, additional processing, or analysis of vectors.
- [Vector search tutorial | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/data-structures/vector-search-tutorial): This tutorial guides you through using Hazelcast Enterprise to build an image search system.
- [Choosing an Application Topology | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/deploy/choosing-a-deployment-option): Hazelcast offers two topologies to use Hazelcast: embedded in a Java application or in a client/server topology. To help you choose a topology that meets your requirements, this topic describes each option.
- [Public Clouds | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/deploy/deploying-in-cloud): Deploy a Hazelcast cluster in cloud environments including Hazelcast Cloud, Amazon AWS, Google Cloud Platform, and Azure.
- [Deploying a Cluster on Amazon AWS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/deploy/deploying-on-aws): Deploy Hazelcast clusters on Amazon AWS EC2 and AWS ECS/Fargate environments and allow them to discover each other automatically.
- [Deploying a Cluster on Microsoft Azure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/deploy/deploying-on-azure): Deploy Hazelcast clusters on Azure and allow them to discover each other automatically.
- [Deploying a Cluster on Google Cloud Platform | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/deploy/deploying-on-gcp): Deploy Hazelcast clusters on Google Cloud Platform and allow them to discover each other automatically.
- [Deploy on Docker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/deploy/deploying-with-docker): In this deployment guide, you will learn how to form a cluster from Hazelcast member containers running on more than one Docker host in the same local area network (LAN).
- [Manage Enterprise Edition license keys | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/deploy/enterprise-licenses): To use Hazelcast Enterprise Edition, you need an Enterprise Edition license key. This topic explains how to get a license key, install it on a member, and manage it.
- [Supported Versions and Compatibilities | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/deploy/versioning-compatibility): This section provides the supported versions and interoperability of Hazelcast Platform and its modules.
- [Cluster Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/events/cluster-events)
- [Listening to Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/events/distributed-events)
- [Event Listeners for Hazelcast Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/events/event-listeners-for-clients)
- [Global Event Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/events/global-event-configuration)
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/events/object-events)
- [Config Properties SPI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/extending-hazelcast/config-properties-spi)
- [Discovery SPI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/extending-hazelcast/discovery-spi)
- [Extending Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/extending-hazelcast/extending-hazelcast)
- [OperationParker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/extending-hazelcast/operationparker)
- [Frequently Asked Questions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/faq)
- [Backups | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/fault-tolerance/backups)
- [Fault Tolerance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/fault-tolerance/fault-tolerance)
- [Timeouts | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/fault-tolerance/timeouts)
- [Authenticate client connections | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/getting-started/authenticate-client-tutorial): This tutorial introduces you to member security by setting up authentication for client connections.
- [Deploy blue-green clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/getting-started/deploy-blue-green-tutorial): This tutorial introduces you to blue-green cluster deployments. You'll learn know how to set up a client to operate continuously even when its connected to a cluster that fails.
- [Hazelcast editions and distributions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/getting-started/editions): Hazelcast offers Enterprise Edition and Community Edition versions of Hazelcast Platform, each available as either a full or slim distribution, or via a number of package managers.
- [Start a Local Cluster from Binary | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/getting-started/get-started-binary): This tutorial introduces you to Hazelcast in a client/server topology. At the end of this tutorial, you'll know how to start a cluster from the binary distribution, store data in memory, visualize your data and more.
- [Start a Local Cluster with the CLI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/getting-started/get-started-cli): Follow this five-minute tutorial to set up a Hazelcast cluster for testing or evaluation purposes. In five minutes, you will learn how to install Hazelcast with a package manager, start a local cluster with the CLI, write data to memory and visualize that data.
- [Start a Local Cluster in Docker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/getting-started/get-started-docker): This tutorial introduces you to Hazelcast in a client/server topology. At the end of this tutorial, you'll know how to start a cluster in a single Docker host, store data in memory, visualize your data and more.
- [Get started with Hazelcast Enterprise Edition | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/getting-started/get-started-enterprise): This quickstart tutorial will get you started with Hazelcast Platform Enterprise Edition and take you from installation all the way through to a working three member cluster with persistence enabled.
- [Start a Local Embedded Cluster | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/getting-started/get-started-java): This tutorial introduces you to Hazelcast in an embedded topology. At the end of this tutorial, you'll know how to start a cluster in your Java application and store data in memory.
- [Get started with REST API using Docker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/getting-started/get-started-rest-api-with-docker): This tutorial provides a step-by-step guide to help you enable, run and use the REST API with minimal configuration using Docker.
- [Get Started with REST API using Java | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/getting-started/get-started-rest-api-with-java): This tutorial provides a step-by-step guide to help you enable, run and use the REST API with minimal configuration using Java.
- [Install Hazelcast Enterprise Edition | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/getting-started/install-enterprise): To install Hazelcast Enterprise Edition, you can use Docker, the binary, or Java. To unlock the Enterprise Edition features, you must install your Enterprise Edition license key.
- [Install Hazelcast Community Edition | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/getting-started/install-hazelcast): You can install the Community Edition of Hazelcast using a package manager, Docker, or the binary. Alternatively, you can add Hazelcast as a dependency in your Java project.
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/getting-started/interactive-quickstart)
- [Persist Map Entries on Disk | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/getting-started/persistence): This tutorial introduces you to Hazelcast with Persistence enabled. At the end of this tutorial, you'll know how to enable Persistence for a map in your cluster and see the recovery of the map entries after a cluster shutdown.
- [Developer Resources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/getting-started/resources)
- [Get Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/getting-started/support): Hazelcast provides two types of support: one for the community and one for paying customers.
- [Replicate a map across clusters in a WAN | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/getting-started/wan-replication-tutorial): This tutorial introduces you to WAN Replication (also known as Geo-Replication) by showing how to replicate map entries across two clusters.
- [Glossary | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/glossary)
- [Ingesting Data from External Sources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/ingest/overview): Explore the Hazelcast components for ingesting data from both on-premise systems and cloud deployments.
- [CDC Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/cdc-connectors)
- [Connector Guides | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/connectors): Hazelcast comes with a wide range of built-in connectors for accessing data in other platforms. You can also use Hazelcast with pre-built connectors for importing data from external systems. Both types of connector are configured to read and write data in the most efficient way for their respective platform.
- [Custom Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/custom-connectors)
- [Connectors for Databases | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/database-connectors)
- [Elasticsearch Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/elasticsearch-connector)
- [Configure Feature Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/feast-config): To use a Feast project, you must configure the feature store. The configuration is defined in a YAML configuration file.
- [Get Started with Feast Batch Features | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/feature-engineering-with-feast): This tutorial will get you started with feature engineering using the Hazelcast integration with Feast.
- [Unified File Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/file-connector): The unified file connector provides a simple way to read files across different sources. Using this connector, you can read files from the local filesystem, HDFS and cloud storage systems such as Amazon S3, Google Cloud Storage or Azure Blob Storage. This connector supports various data formats, including text files, CSV, JSON, and Avro.
- [Get started with Vert.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/get-started-with-vertx)
- [HTTP Listener Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/http-connector)
- [InfluxDB Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/influxdb-connector)
- [Install Feast and Connect to Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/install-connect): Before you can use Feast with Hazelcast as an online store, you must install Feast and connect to Hazelcast.
- [Integrate with Feast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/integrate-with-feast): Feast (<strong>Fea</strong>ture <strong>St</strong>ore) is a customizable operational data system, which uses your existing infratstructure to manage and serve machine learning features to real-time models. When integrated with Hazelcast, you can benefit from an online store that supports materializing feature values in a running Hazelcast cluster.
- [Integrate with Vert.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/integrate-with-vertx)
- [JCache Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/jcache-connector): The JCache connector is mostly equivalent to the map connector, the main difference being that the JCache connector is compliant with the JCache standard API. As a sink, since JCache doesn't support entry processors, only the default variant is available.
- [JDBC Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/jdbc-connector)
- [JMS Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/jms-connector)
- [Kafka Connect Source Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/kafka-connect-connectors): With a Kafka Connect Source connector, you can reliably import data from an external system, such as a database, key-value store, search index, or file system, directly into a Hazelcast data pipeline. The data is available for stream processing. <strong>No Kafka cluster is required</strong>.
- [Apache Kafka Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/kafka-connector): The Kafka connector allows you to stream, filter, and transform events between Hazelcast clusters and Kafka.
- [Amazon Kinesis Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/kinesis-connector)
- [Legacy CDC Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/legacy-cdc-connectors)
- [Legacy File Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/legacy-file-connector): The legacy file connector allows you to read and write to files, using the Jet API. This connector is still maintained, but all new development goes into the unified file connector.
- [List Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/list-connector)
- [Map Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/map-connector): A map is a distributed in-memory key-value data structure that can be used as a batch or streaming data source as well as a data sink.
- [Connectors for Messaging Systems | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/messaging-system-connectors)
- [MongoDB Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/mongodb-connector)
- [Observable Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/observable-connector): The observable connector provides a way of receiving query results on the same client that submitted a job. This connector is useful when you are using the Jet API for ad-hoc queries and you want to use your client as a sink.
- [Apache Pulsar Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/pulsar-connector)
- [Reliable Topic Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/reliable-topic-connector)
- [Socket Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/socket-connector)
- [Get Started with Feast Streaming Features | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/streaming-features-with-feast): This tutorial will get you started with streaming features using the Hazelcast integration with Feast.
- [Test Source Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/test-connectors): Test sources make it convenient to get started with pipelines without having to use an actual data source. They can also be used for unit testing different pipelines where you can expect a more deterministic import.
- [Vector Collection Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/integrate/vector-collection-connector): Vector collection stores vectors with their related metadata. This allows entries to be found efficiently based on vector distance.
- [JCache API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/jcache/api)
- [JCache - Hazelcast Instance Integration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/jcache/hazelcast-integration)
- [Hazelcast JCache Extension - ICache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/jcache/icache)
- [Hazelcast JCache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/jcache/jcache)
- [JCache Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/jcache/overview)
- [JCache Providers | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/jcache/providers)
- [JCache Setup and Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/jcache/setup)
- [Testing for JCache Specification Compliance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/jcache/tck)
- [Deploying on Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/kubernetes/deploying-in-kubernetes): Discover ways to deploy Hazelcast clusters in Kubernetes (K8s) environments.
- [Add custom JAR files to the classpath | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/kubernetes/helm-adding-custom-jar)
- [Configuring SSL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/kubernetes/helm-configuring-ssl)
- [Dynamic Persistence Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/kubernetes/helm-dynamic-persistence-configuration)
- [Enabling External Access to Cluster | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/kubernetes/helm-enabling-external-access)
- [Deploying Hazelcast Community Edition on Kubernetes with Helm | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/kubernetes/helm-hazelcast-chart): This chart bootstraps a link:https://github.com/hazelcast/hazelcast-docker/tree/master/hazelcast-oss[Hazelcast] and link:https://github.com/hazelcast/management-center-docker[Management Center] deployments on a link:http://kubernetes.io[Kubernetes] cluster using the link:https://helm.sh[Helm] package manager.
- [Deploying Hazelcast Enterprise Edition on Kubernetes with Helm | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/kubernetes/helm-hazelcast-enterprise-chart): This chart bootstraps a link:https://github.com/hazelcast/hazelcast-docker/tree/master/hazelcast-enterprise[Hazelcast Enterprise Edition] and link:https://github.com/hazelcast/management-center-docker[Management Center] deployments on a link:http://kubernetes.io[Kubernetes] cluster using the link:https://helm.sh[Helm] package manager.
- [Helm Upgrade Guide | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/kubernetes/helm-upgrade-guide)
- [Kubernetes Auto Discovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/kubernetes/kubernetes-auto-discovery): Before you start a Hazelcast cluster in Kubernetes (K8s), it's important to configure settings to ensure that members can form a cluster and to prevent any unexpected data loss.
- [Running Hazelcast Enterprise Edition with Persistence under Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/kubernetes/kubernetes-persistence): Hazelcast Enterprise Edition members configured with persistence enabled can monitor the Kubernetes (K8s) context and automate Hazelcast cluster state management to ensure the optimal cluster behavior during shutdown and restart.
- [Troubleshooting and Limitations in Kubernetes Environments | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/kubernetes/troubleshooting-and-limitations): Find advice for troubleshooting issues you might face while deploying Hazelcast via Helm.
- [List of Hazelcast Metrics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/list-of-metrics)
- [Cluster and Member States | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/maintain-cluster/cluster-member-states): Cluster states determine what cluster operations are available. By changing the state of a cluster, you can grant or restrict cluster operations such as repartitioning as well as change the behavior of those operations.
- [Dynamic Configuration using the REST API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/maintain-cluster/dynamic-config-via-rest): This tutorial provides a step-by-step guide to help you add a data structure dynamically using the REST API.
- [REST API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/maintain-cluster/enterprise-rest-api)
- [Enabling Lite Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/maintain-cluster/lite-members)
- [Configuring Logging | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/maintain-cluster/logging): Options available for the logging mechanism of Hazelcast clusters.
- [Filtering Members with Attributes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/maintain-cluster/member-attributes)
- [Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/maintain-cluster/monitoring): Options available for monitoring the health and operations of Hazelcast clusters.
- [Community Edition REST API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/maintain-cluster/rest-api)
- [Swagger UI for REST API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/maintain-cluster/rest-api-swagger)
- [Restart a cluster | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/maintain-cluster/restart-cluster): Static configuration is configuration that cannot be changed while members are running. To apply updates to static configuration, you must restart the cluster.
- [Rolling Upgrades | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/maintain-cluster/rolling-upgrades): You can use rolling upgrades to upgrade the version of Hazelcast members in a running cluster without interrupting the operation of the cluster.
- [Shutting Down Members and Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/maintain-cluster/shutdown): Maintaining a cluster often requires shutting down clusters or individual members to make changes take effect. Hazelcast offers convenient methods for shutting down clusters as well as graceful and ungraceful options for specific members.
- [Management Center | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/management-center): Management Center is a tool for managing and monitoring Hazelcast Platform clusters.
- [Cluster utilities | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/management/cluster-utilities): Hazelcast Platform is provided with a range of programmatic utilities that you can use to manage your Hazelcast clusters, including command line interfaces and scripts.
- [Configuring a MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/mapstore/configuration-guide): This topic explains how to configure a map with a MapStore. It includes configuration options for loading data, as well as caching behaviors, and MapStore reuse.
- [Using the generic MapLoader | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/mapstore/configuring-a-generic-maploader): With the xref:working-with-external-data.adoc#options[generic MapLoader], you can configure a map to cache data from an external system. This topic includes an example of how to configure a map with a generic MapLoader that connects to a MySQL database.
- [Using the generic MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/mapstore/configuring-a-generic-mapstore): With the xref:working-with-external-data.adoc#options[generic MapStore], you can configure a map to cache data from and write data back to an external system. This topic includes an example of how to configure a map with a generic MapStore that connects to a MySQL database.
- [Implementing a Custom MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/mapstore/implement-a-mapstore): You can use the Java <code>MapStore</code> and <code>MapLoader</code> interfaces to implement a custom MapStore with your own logic, such as for database connections, loading data from an external system, and writing data back to the external system.
- [Map Operations that Trigger Methods on a MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/mapstore/mapstore-triggers): These are the map operations that trigger methods on a configured MapStore.
- [Building a Cache with MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/mapstore/working-with-external-data): MapStore is an API for building a cache on top of Hazelcast. To build a cache, you can either use a pre-built component, which requires little or no coding. Or, you can use a custom option that allows you to write the interface yourself.
- [Move to Enterprise Edition from Community Edition | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/migrate/community-to-enterprise): With Enterprise Edition, you can benefit from additional and extended features, patch releases, Hazelcast Support, and more connectors. If you are using the Open Source Edition and want to upgrade to Enterprise, you can do this with clusters of the same version from 5.5.
- [Using the Data Migration Tool | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/migrate/data-migration-tool): You can use the Data Migration Tool (DMT) to migrate your data from version 4.x or 5.x Community Edition and Enterprise Edition Hazelcast clusters when upgrading to 5.3.x or later versions of Enterprise Edition, or moving to the latest Cloud release. The DMT can also be used for infrastructure consolidation or separation with selective migration of application data between clusters.
- [DMT Command Reference | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/migrate/dmt-command-reference)
- [Migrating Data from IMDG 3.12.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/migrate/migration-tool-imdg): This guide explains how to migrate data in maps or JCache data structures from a running IMDG 3.12.x cluster to a Hazelcast 5.x cluster.
- [Upgrade Cluster to Enterprise Edition | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/migrate/rolling-restart): You can upgrade your Open Source cluster to an Enterprise cluster using an in-place rolling restart to change each member in turn.
- [Upgrading from IMDG 3.12.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/migrate/upgrading-from-imdg-3)
- [Upgrading from IMDG 4.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/migrate/upgrading-from-imdg-4): This guide covers the most important changes that affect users of IMDG 4.x who want to upgrade to Hazelcast.
- [Upgrading from Jet | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/migrate/upgrading-from-jet): This guide covers the most important changes that affect users of Jet 4.x who want to upgrade to Hazelcast.
- [Dealing with Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/network-partitioning/dealing-with-network-partitions)
- [Network Partitioning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/network-partitioning/network-partitioning)
- [Partial Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/network-partitioning/partial-network-partitions)
- [Split-Brain Protection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/network-partitioning/split-brain-protection)
- [Split-Brain Recovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/network-partitioning/split-brain-recovery)
- [API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/osgi/api)
- [Configuring Hazelcast OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/osgi/configuring-osgi-support)
- [Design | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/osgi/design)
- [OSGI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/osgi/osgi)
- [OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/osgi/osgi-support)
- [Using Hazelcast OSGI Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/osgi/using-osgi-service)
- [Caching Deserialized Values | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/performance/caching-deserialized-values)
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/phone-homes)
- [About Stream Processing Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/building-pipelines): Streaming jobs are those that process an infinite amount of data such as a continuous event stream. Because these jobs continue to run until they are canceled, you must use timestamps to define time windows in which to collect events.
- [Capture Changes from MySQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/cdc)
- [Setting Up a Database for Change Data Capture | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/cdc-database-setup)
- [Join Change Data Capture Records | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/cdc-join)
- [Change Data Capture (CDC) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/cdc-overview): Change Data Capture (CDC) is a pipeline pattern for observing changes made to a database and extracting them in a form usable by other systems, for the purposes of replication, analysis and more.
- [Capture Changes from PostgreSQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/cdc-postgres)
- [Configuring Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/configuring-jobs): Before submitting a job to a cluster, you can configure its name, whether to record metrics, and how it behaves when cluster members fail.
- [Building a Custom Aggregate Operation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/custom-aggregate-operation)
- [Adding Batching to a Custom Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/custom-batch-source): To improve the throughput of your custom sources, you can add batching to reads.
- [Create a Custom Sink | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/custom-sink)
- [Creating a Custom Streaming Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/custom-stream-source): If Hazelcast is missing a built-in source, or a suitable Kafka Connect Source connector is unavailable, you build your own streaming source, using the Jet API.
- [Extract Transform Load (ETL) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/etl-overview): ETL is a pipeline pattern for collecting data from various sources, transforming (changing) it to conform to some rules, and loading it into a sink. This pattern is often used to form materialized views where data is processed and put into a Hazelcast map for fast in-memory queries.
- [Mapping Data in a Pipeline Using a a gRPC Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/grpc): When processing data in a pipeline, you can use an external service to execute a function on input data, and pass the output to the next stage of pipeline. A popular way of exposing external services is to use the gRPC protocol.
- [Ingesting Data from Sources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/ingesting-from-sources): In order to process data, you first need to ingest it into your pipeline, using one or more sources.
- [Managing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/job-management): Once a job is submitted, it has its own lifecycle on the cluster which is distinct from the submitter. To manage the lifecycle of jobs, you can use either SQL or CLI commands to list, cancel, suspend, resume, and restart them.
- [Monitoring Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/job-monitoring): To ensure the reliability of streaming jobs and their workloads, try implementing some basic monitoring. With Hazelcast, you can monitor the status of streaming jobs to quickly identify job failures for troubleshooting.
- [Jet Job Placement Control | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/job-placement-control): Your Jet processing jobs can be distributed across a defined subset of the cluster. This approach provides finer control of your Jet processing, which means that you can distribute your workload to meet your requirements.
- [Securing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/job-security): While submitting jobs, you can upload custom code that bypasses client permissions. Jobs also have access to data outside Hazelcast such as files on the device that's running a member. As a result, it's important to be aware of how to secure your Hazelcast member against malicious jobs.
- [Updating Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/job-update): Update streaming jobs without losing computation state.
- [Connect to Apache Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/kafka)
- [Connect to Amazon Kinesis | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/kinesis)
- [Enrich a Stream | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/map-join): In this tutorial, you build a pipeline that takes a stream of trades from a stock exchange and enriches it with a full company name for nicer presentation. Each trade contains a stock symbol, also known as ticker, which uniquely identifies the stock. You will use the ticker to look up the full company name in a replicated map.
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/object-events)
- [Receiving Pipeline Results on the Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/observables)
- [About Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/overview): Learn about the core concepts of data pipelines and how you can build your own with the Hazelcast Jet engine.
- [Group Messages from Apache Pulsar | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/pulsar)
- [Apply a Custom Transform with Python | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/python)
- [Sending Results to Sinks | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/sending-data-to-sinks): After defining the processing steps in a pipeline, you must send the results to at least one destination called a sink. Hazelcast comes with built-in sinks as well as a public API for building your own.
- [Serializing Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/serialization)
- [Subscribe to Changes to a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/stream-imap)
- [Get Started with Stream Processing (Client/Server) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/stream-processing-client): This tutorial shows you how to use a Hazelcast cluster as a data processing engine for your client applications. At the end of this tutorial, you'll know how to build a data pipeline in Java and submit it as a job to your Hazelcast cluster.
- [Get Started with Stream Processing (Embedded) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/stream-processing-embedded): This tutorial shows you how to use Hazelcast as a streaming engine that's embedded in your Java application. At the end of this tutorial, you'll know how to ingest data from some test sources and filter it continuously to generate results in real time.
- [Submitting Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/submitting-jobs): Submit data pipelines to a Hazelcast cluster for execution.
- [Transforms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/transforms): Hazelcast offers several transforms which can be used to process data. Explore the available transforms and learn how to use them.
- [Apply Windowed Aggregation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/windowing)
- [Testing Sources and Sinks for XA Transaction Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/pipelines/xa): In order to have end-to-end exactly-once processing in pipelines, sources and sinks need to support it too. Although many sources and sinks ensure atomicity (all distributed participants either commit the transaction or roll back), some do not survive a client disconnection. You can test whether a source or a sink will survive a client disconnection, using either JDBC or Java Messaging Service (JMS).
- [This page is a placeholder | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/placeholder)
- [Cloud Discovery Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/plugins/cloud-discovery)
- [Framework Integration Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/plugins/framework-integration)
- [Hazelcast Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/plugins/hazelcast-plugins)
- [Other Integrations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/plugins/other-integrations)
- [Web Session Replication Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/plugins/web-session-replication)
- [Indexing Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/query/indexing-maps): Indexes improve the performance of queries on map entries by reducing the number of entries that members need to iterate through.
- [Running Distributed Queries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/query/overview): Explore the tools that Hazelcast offers for running distributed queries.
- [Predicates API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/query/predicate-overview): The Predicates API is a programming interface for querying data in Hazelcast, which is similar to the Java Persistence Query Language (JPQL).
- [Community Edition Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/release-notes/community): These release notes list any new features, enhancements, fixes and breaking changes that were made for Hazelcast Platform Community Edition.
- [Enterprise Edition Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/release-notes/enterprise): These release notes list any new features, enhancements, fixes and breaking changes that were made for Hazelcast Platform Enterprise Edition.
- [Hazelcast Platform Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/release-notes/releases): These release notes list any new features, enhancements, fixes and breaking changes that were made for Hazelcast Platform.
- [Security Hardening Recommendations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/secure-cluster/hardening-recommendations)
- [Security Defaults | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/secure-cluster/security-defaults)
- [Authentication overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/authentication-overview)
- [Client Authorization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/client-authorization)
- [Default authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/default-authentication)
- [Enabling Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/enable-security)
- [Encryption | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/encryption)
- [FIPS 140-2 | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/fips-140-2)
- [Identity configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/identity-configuration)
- [Integrating OpenSSL / BoringSSL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/integrating-openssl)
- [JAAS Authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/jaas-authentication)
- [Kerberos Authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/kerberos-authentication)
- [LDAP Authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/ldap-authentication)
- [Logging Auditable Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/logging-auditable-events)
- [Security Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/overview)
- [Security Debugging | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/security-debugging)
- [Security Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/security-interceptor)
- [Simple Authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/simple-authentication)
- [Socket Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/socket-interceptor)
- [TLS Authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/tls-authentication)
- [Other TLS-Related Configurations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/tls-configuration)
- [TLS/SSL Basics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/tls-ssl)
- [Validating Secrets Using Strength Policy | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/security/validating-secrets)
- [Compact Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/serialization/compact-serialization)
- [Custom Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/serialization/custom-serialization)
- [Global Serializer | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/serialization/global-serializer)
- [Implementing DataSerializable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/serialization/implementing-dataserializable)
- [Implementing HazelcastInstanceAware | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/serialization/implementing-hazelcastinstanceaware)
- [IdentifiedDataSerializable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/serialization/implementing-identifieddataserializable)
- [Implementing Java Serializable and Externalizable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/serialization/implementing-java-serializable)
- [Implementing Portable Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/serialization/implementing-portable-serialization)
- [Serializing Objects and Classes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/serialization/serialization): For data to be sent over a network between cluster members and/or clients, it needs to be serialized into raw bytes. Hazelcast has many serialization options to choose from, depending on what you plan on doing with your data.
- [Configuring Serializers | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/serialization/serialization-configuration): You can configure clusters to be able to serialize and deserialize custom objects and classes as well as override built-in serializers and whitelist certain Java classes.
- [Serializing into JSON | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/serialization/serializing-json): If you want to query JSON strings that are stored in Hazelcast, you can serialize them, using <code>HazelcastJsonValue</code>.
- [Add caching to Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/spring/add-caching)
- [Configure Hazelcast in Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/spring/configuration)
- [Configure Hibernate second-level cache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/spring/hibernate)
- [Integrate with Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/spring/overview)
- [Spring Hazelcast Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/spring/spring-hazelcast-support)
- [Spring Session and Spring Security guide | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/spring/spring-session-guide)
- [Enable SpringAware data structures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/spring/springaware)
- [Configure Hazelcast Transaction Manager | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/spring/transaction-manager)
- [ALTER JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/alter-job): With the <code>ALTER JOB</code> statement, you can suspend, resume, or restart a job that is running on a cluster. You can also update the configuration of a suspended job and resume it.
- [CREATE DATA CONNECTION | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/create-data-connection): The <code>CREATE DATA CONNECTION</code> statement creates the metadata required to connect to an external system for later use.
- [CREATE INDEX | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/create-index): The CREATE INDEX statement creates a sorted, hash, or bitmap index for a given map.
- [CREATE JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/create-job): The CREATE JOB statement submits a job to Hazelcast to run independently of the SQL client. With this statement, you can run a SQL statement in the background.
- [CREATE MAPPING | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/create-mapping): The CREATE MAPPING statement creates a table that stores essential metadata about a source's data model, data connection or connection parameters, and serialization formats so that the SQL service can connect to the data source and query it.
- [CREATE OR REPLACE SNAPSHOT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/create-snapshot): The CREATE OR REPLACE SNAPSHOT statement creates a named snapshot that you can use to start other jobs or keep as a backup.
- [CREATE VIEW | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/create-view): The CREATE VIEW statement creates a virtual table based on the result set of an SQL query. Views can be reused in other queries.
- [SQL Data Types | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/data-types): Hazelcast supports a subset of SQL data types. Each data type is mapped to a Java class, which represents the type's value in Hazelcast.
- [DELETE | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/delete): The DELETE statement deletes map entries that match the condition in a given WHERE clause.
- [DROP DATA CONNECTION | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/drop-data-connection): The <code>DROP DATA CONNECTION</code> statement deletes a data connection. Dropping a data connection affects all existing mappings where the data connection is in use, but will not affect any queries that are already running.
- [DROP JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/drop-job): The DROP JOB statement cancels a job and gives you the option to create a named snapshot from its state.
- [DROP MAPPING | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/drop-mapping): The DROP MAPPING statement removes an existing mapping.
- [DROP SNAPSHOT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/drop-snapshot): The DROP SNAPSHOT statement deletes a named snapshot.
- [DROP VIEW | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/drop-view): The DROP VIEW statement deletes a view.
- [EXPLAIN | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/explain): The EXPLAIN statement returns the execution plan for a given statement, without executing it.
- [Meta-information about Mappings | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/finding-mappings)
- [Expressions, Functions and Operators | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/functions-and-operators): Hazelcast supports a subset of standard SQL expressions, functions, and operators as well as non-standard functions for special cases such as windowed aggregation.
- [Get started with SQL over maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/get-started-sql): In this tutorial, you learn the basics of querying maps in SQL by running ad-hoc and batch queries on some test data.
- [Get started with SQL over files | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/get-started-sql-files): In this tutorial, you learn the basics of querying files in SQL by creating and querying a CSV file.
- [Improving the Performance of SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/improving-performance): Use this topic to find advice on improving the performance of slow queries.
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/interactive-sql-files)
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/interactive-sql-kafka)
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/interactive-sql-maps)
- [Get started with SQL over Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/learn-sql): In this tutorial, you use an interactive SQL shell on a Hazelcast member to query Kafka topics in real-time.
- [Creating a Mapping to a File System | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/mapping-to-a-file-system): To query data in files, you need to create a mapping to a file, using the unified file connector so that the SQL service knows how to access the data.
- [Mapping to JDBC | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/mapping-to-jdbc): To query external JDBC data stores, you can create a mapping to them with the JDBC connector.
- [Mapping to Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/mapping-to-kafka): To query streams in Kafka topics, you need to create a mapping with the Kafka connector so that the SQL service knows how to access the messages.
- [Mapping to Hazelcast Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/mapping-to-maps): To query entries in maps, you need to create a mapping with the map connector so that the SQL service knows how to access the entries.
- [Mapping to MongoDB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/mapping-to-mongo): To query MongoDB data connections, you can create a mapping to them with the Mongo connector.
- [Using Query Parameters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/parameterized-queries): In Hazelcast clients, you can use query parameters to build safer, faster SQL queries.
- [Partition pruning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/partition-pruning): The partition pruning optimization technique reduces latency for faster IMap SQL queries.
- [Querying Maps with SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/querying-maps-sql): You can use SQL to run optimized distributed queries on the keys and values of maps in a local cluster.
- [Stream Processing in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/querying-streams): You can run SQL queries on single streams, join a stream with a table, or join two or more streams.
- [SELECT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/select): The SELECT statement reads data from tables, allowing you to query and process your data based on one or more parameters.
- [SHOW JOBS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/show-jobs): The SHOW JOBS statement displays a sorted list of all named jobs. The list includes any existing jobs that were submitted through the Java API as long as they have a name. The list does not include jobs that have already completed with or without an error.
- [SHOW MAPPINGS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/show-mappings): The SHOW MAPPINGS statement displays a sorted list of all mappings.
- [SHOW RESOURCES | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/show-resources): The <code>SHOW RESOURCES</code> statement displays a list of all resources, along with their data types, that are accessible via a named data connection. These are the resources for which you can create a mapping. Each type of data connection has a unique set of resources. For example:
- [INSERT INTO/SINK INTO | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/sink-into): The <code>INSERT INTO</code>/<code>SINK INTO</code> statements write data to platforms that are connected to Hazelcast through connectors.
- [SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/sql-overview): You can use SQL to query data in maps, Kafka topics, or a variety of file systems. Results can be sent directly to the client or inserted into maps or Kafka topics.
- [Configuring Reflection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/sql-reflection-configuration): Clusters can be configured to restrict the capability of creating objects through reflection during SQL execution.
- [SQL Statements | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/sql-statements): Hazelcast supports the following SQL statements. Explore the available statements and find more details about them.
- [Troubleshooting SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/troubleshooting): This topic provides solutions to some common errors in SQL queries.
- [UPDATE | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/update): The UPDATE statement overwrites the values of map entries that match the condition in a given WHERE clause.
- [User-Defined Types in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/user-defined-types)
- [Working with JSON Data in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/sql/working-with-json): In Hazelcast, the SQL service supports ways of working with JSON data: `json-flat`, which does not allow you to query nested keys/values and `json`, which supports nested queries and JSON functions.
- [Backing Up the Persistence Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/storage/backing-up-persistence): You can trigger backups of your persistence store, using the Java API, REST API, or Management Center. Backing up the persistence store is useful if you want to copy the data onto other clusters without having to shut down your cluster.
- [Configuring Persistence | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/storage/configuring-persistence): You can configure clusters to persist data structures, job snapshots, and SQL metadata on disk. You can also implement configuration options to fine-tune backups, encryption, and auto-recovery.
- [Copying Persisted Data onto other Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/storage/copying-persistence): When you persist data on disk, you may want to copy that data onto another cluster to perform testing, QA, or reproduce an issue on production data.
- [High-Density Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/storage/high-density-memory): The High-Density Memory Store is Hazelcast's enterprise in-memory storage solution. It solves garbage collection limitations so that applications can exploit hardware memory more efficiently without the need of oversized clusters.
- [Persistence Performance Benchmark | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/storage/performance): Find summaries of Persistence performance tests that were performed with a single Hazelcast member running on a physical server and on AWS R3.
- [Persisting Data on Disk | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/storage/persistence): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from planned cluster-wide shutdowns, unplanned cluster-wide failures, and to accelerate individual member restarts by reducing the volume of data sent over the network.
- [Persistence Design Details | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/storage/persistence-design)
- [Store Persistence Data on Intel® Optane™ DC Persistent Memory | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/storage/persistence-on-intel): In this tutorial, you'll use Intel® Optane™ DC Persistent Memory (PMem) to improve the performance of disk reads and writes, allowing your cluster to access data on disk faster.
- [Triggering a Force-Start | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/storage/triggering-force-start): To recover a cluster that has Persistence enabled after a cluster-wide restart, you can force a cluster to delete their persistence stores when one or more members fail to restart.
- [Triggering a Partial-Start | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/storage/triggering-partial-start): To recover a cluster that has Persistence enabled after a cluster-wide restart, you can force a cluster to start without some members when one or more of them fail.
- [System Properties | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/system-properties)
- [Best practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/test/testing-bestpractices): The following practices help improve test reliability, execution speed, and reproducibility when writing tests for Hazelcast-powered applications.
- [Testing distributed applications | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/test/testing-caches): This guide explains how to write unit, component, integration, and in-JVM tests for Hazelcast clusters and clients using Hazelcast’s built-in test support utilities.
- [Common test utilities | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/test/testing-common): This section describes Hazelcast's common test utilities across caching and streaming applications.
- [Helper methods | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/test/testing-helpers): The following tables document the helper methods available in Hazelcast. Member methods are available only when the test class inherits the respective support class, hence only in JUnit 4. Static methods can also be used in other frameworks.
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/test/testing-intro): Testing is essential to validate the correctness, reliability, and performance of applications that integrate with Hazelcast.
- [Test Hazelcast performance with Simulator | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/test/testing-performance): https://github.com/hazelcast/hazelcast-simulator[Hazelcast Simulator] is a high-performance, production-grade testing framework for running performance, stress, and latency tests on Hazelcast clusters. It allows you to simulate complex workloads and evaluate distributed systems in a realistic and reproducible manner.
- [Set up dependencies and tests | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/test/testing-setup)
- [Test streaming pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/test/testing-streaming): Hazelcast provides a set of testing utilities for validating streaming pipelines executed by the Jet engine. These utilities allow you to simulate input data and assert on the output of distributed dataflows.
- [Creating a Transaction Interface | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/transactions/creating-a-transaction-interface)
- [Providing XA Transactions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/transactions/providing-xa-transactions)
- [Error Handling Strategies for Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/troubleshoot/error-handling): Jobs may not run as expected due to I/O errors in sources and sinks, or coding and input data errors in your pipelines. To handle these errors you can use one of the following strategies.
- [Recovery from Client Connection Failures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/troubleshoot/recovery-clients)
- [Recovery from a Partial or Total Failure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/troubleshoot/recovery-members)
- [Actions and Remedies for Alerts | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/troubleshoot/remedies-for-alerts): Find advice for remedies for the Hazelcast alerts.
- [Troubleshooting Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/troubleshoot/troubleshooting): Find advice for troubleshooting issues in your Hazelcast applications or your cluster deployments.
- [Deploy Hazelcast using Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/tutorials/kubernetes): In this tutorial, you will deploy a Hazelcast cluster to Kubernetes and connect it to a Kubernetes application.
- [Advanced Features | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/wan/advanced-features)
- [Configuring for IMap and ICache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/wan/configuring-for-map-and-cache)
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/wan/defining-wan-replication)
- [Failure Detection and Recovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/wan/failures)
- [WAN Replication Modes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/wan/modes)
- [WAN Quickstart | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/wan/quick-start)
- [REST API for WAN Wrap-Up | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/wan/rest-api)
- [Fine-Tuning WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/wan/tuning)
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/wan/wan)
- [What is Hazelcast Platform? | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/what-is-hazelcast): Hazelcast Platform uniquely combines a distributed compute engine and a fast data store in one runtime. It offers unmatched performance, resilience and scale for real-time and AI-driven applications.
- [What’s New in Hazelcast Platform | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.5/whats-new): Here are the highlights of what's new and improved in Hazelcast Platform 5.5, including vector search, compute isolation, multi-member routing, and dynamic configuration using REST API.
- [What is Hazelcast Platform? | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/): Hazelcast Platform uniquely combines a distributed compute engine and a fast data store in one runtime. It offers unmatched performance, resilience and scale for real-time and AI-driven applications.
- [Hazelcast Architecture | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/architecture/architecture): Hazelcast is a distributed computation and storage platform for consistent low-latency querying, aggregation, and stateful computation against event streams and traditional data sources. This guide outlines how Hazelcast works under the hood to help you understand some important concepts.
- [Data Partitioning and Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/architecture/data-partitioning): Partitioning and replication are two common techniques used together in distributed systems to achieve scalable, available, and transparent data distribution.
- [Jet: How Hazelcast Models and Executes Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/architecture/distributed-computing): Hazelcast models your pipeline code into a directed acyclic graph (DAG) which consists of stages. Each processing stage accepts the events from upstream stages, processes them, and passes the results to the downstream stage. To run a job, Hazelcast transforms the pipeline DAG into the core DAG. The top-level component that does this is called the planner.
- [How Hazelcast Handles Event Disorder | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/architecture/event-time-processing): To make sure that late events do not slow down jobs, Hazelcast allows you to define a threshold (lag) for how late events can be before they are ignored. To determine a late event, Hazelcast uses distributed watermarks to define the current time and compare it against the configured lag.
- [Cooperative Multithreading | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/architecture/execution-engine)
- [In-Memory Storage | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/architecture/in-memory-storage)
- [Jet: Sliding Window Aggregation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/architecture/sliding-window)
- [Caching Data | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/cache/overview): Hazelcast provides APIs and plugins for building distributed caches for your data, including web sessions, database queries, and compute results. Get familiar with Hazelcast as a cache and find useful resources for your use case.
- [Capacity Planning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/capacity-planning): Capacity planning involves estimating and validating the capacity of a cluster in order to determine which recommendations and best practices can help that cluster achieve its best reasonable performance.
- [Hazelcast Command-Line Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clients/clc)
- [C++ Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clients/cplusplus)
- [.NET Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clients/dotnet)
- [Go Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clients/go)
- [Getting Started with a Hazelcast Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clients/hazelcast-clients): Hazelcast has clients in Java, C++, .NET, Node.js, Go, Python, and Memcache. You can use these clients to communicate with cluster members.
- [Java Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clients/java)
- [Memcache Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clients/memcache)
- [Node.js Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clients/nodejs)
- [Python Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clients/python)
- [REST Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clients/rest)
- [AWS Deployments | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/cluster-performance/aws-deployments)
- [Back Pressure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/cluster-performance/back-pressure)
- [Best Practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/cluster-performance/best-practices)
- [Data Affinity | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/cluster-performance/data-affinity): Data affinity ensures that related entries exist on the same member. If related data is on the same member, operations can
- [Near Cache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/cluster-performance/near-cache)
- [Performance Tips | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/cluster-performance/performance-tips): The production checklist provides a set of best practices and recommendations to ensure a smooth transition to a production environment which runs a Hazelcast cluster.
- [Performance Tuning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/cluster-performance/performance-tuning)
- [Pipelining | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/cluster-performance/pipelining)
- [Thread-Per-Core (TPC) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/cluster-performance/thread-per-core-tpc): Find out more about Thread-Per-Core (TPC) and how to enable this feature on clients and cluster members.
- [Threading | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/cluster-performance/threading): Your application server has its own threads. Hazelcast does not use these; it manages its own threads.
- [Accessing Domain Objects Without Domain Classes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/accessing-domain-objects)
- [Creating Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/creating-clusters)
- [Deadline Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/deadline-detector)
- [Deploying User Code from Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/deploying-code-from-clients)
- [Deploying User Code on the Member | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/deploying-code-on-member)
- [Discovering Members by Multicast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/discovering-by-multicast)
- [Discovering Members by TCP | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/discovering-by-tcp)
- [Discovering Java Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/discovering-native-clients)
- [Discovery Mechanisms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/discovery-mechanisms)
- [Failure Detector Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/failure-detector-configuration)
- [User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/legacy-ucd): The previous method of dynamically loading custom classes or domain classes from other members, or deploying your code from your client was known as User Code Deployment. This method has been deprecated and will be removed at the next major version. The legacy information for the deprecated User Code Deployment solution has been retained in this section for your reference.
- [Network Configurations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/network-configuration)
- [Partition Group Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/partition-group-configuration)
- [Phi Accrual Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/phi-accrual-detector)
- [Ping Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/ping-detector)
- [Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/ucn-data-structures): To allow your data structures to resolve your user code, you must reference the required namespace in the data structure configuration. You can configure the same namespace for multiple data structures.
- [Configure Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/ucn-dynamic-client): Clients use the dynamic configuration API to create and update User Code Namespaces on the cluster.
- [Dynamic Configuration API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/ucn-dynamic-config): You can use the dynamic configuration API to deploy resources from your client or HazelcastInstance member. This means that you can configure namespaces and their resources, and replace the resources at runtime for use when a user customization is next instantiated or executed.
- [Enable User Code Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/ucn-enable): For security reasons, you must enable User Code Namespaces using static configuration. You can do this programmatically, or using the Hazelcast configuration file.
- [Member Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/ucn-member-side): User Code Namespaces are referenced by name, and can be statically configured in the Hazelcast configuration file. You can specify JAR, JARS IN ZIP, and CLASS resources in the configuration file.
- [Migrate from User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/ucn-migrate-ucd): User Code Namespaces improves and extends the capabilities of User Code Deployment and is applicable to more use cases. Hazelcast recommends that Enterprise Edition users deprecate their User Code Deployment implementations and migrate to using User Code Namespaces.
- [Non-associated Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/ucn-non-associated): You can configure a default namespace with resources that can be used by any data structure that does not have an associated User Code Namespaces defined, or, for example, a partition loss listener. A default namespace is also useful when you are using an API that is not namespace-aware.
- [Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/ucn-security): You can control who can create, deploy, or replace your User Code Namespaces using permissions. You can also provide permissions for the instantiation and registration of user customizations that lookup code in your User Code Namespaces.
- [Static Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/ucn-static-config): You can configure User Code Namespaces using static configuration in an XML or YAML file, or programatically. The configuration is applied on start-up.
- [Programmatic Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/ucn-static-programmatic): You can configure your User Code Namespaces and data structures programmatically. You can specify JAR, JARS IN ZIP, and CLASS resources in programmatic configuration.
- [User Code Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/user-code-namespaces): User Code Namespaces provide a container for Java classpath resources, such as user code and accompanying artifacts like property files. This provides namespace isolation to ensure that access to resources in different namespaces can be managed through configuration.
- [Common Exception Types | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/common-exception-types)
- [Compact Serialization Binary Specification | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/compact-binary-specification): The Compact Serialization Binary Specification defines the binary format of the Compact Serialization, the supported types, and the Compact Schema.
- [Distributed Computing | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/computing/distributed-computing): Explore the tools that Hazelcast offers for distributed computing on cluster members.
- [Durable Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/computing/durable-executor-service)
- [Entry Processor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/computing/entry-processor)
- [Java Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/computing/executor-service)
- [Scheduled Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/computing/scheduled-executor-service)
- [Member Configuration Files | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/configuration/configuring-declaratively): You can declare settings for Hazelcast members, using a YAML or XML configuration file. Although Hazelcast members read from a single configuration file, you can store settings in multiple files and import them into a single root file to enable reuse.
- [Configuring Hazelcast in Embedded Mode | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/configuration/configuring-programmatically): You can use a configuration object (config object) to configure members with the Java member API. To create new instances of members, pass the config object to those instances.
- [Configuring with System Properties and Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/configuration/configuring-with-system-properties): You can use xref:ROOT:system-properties.adoc[system properties] and environment variables to configure Hazelcast and override existing settings in a root configuration file. Environment variables are useful for configuring members in containerized environments.
- [Configuring Hazelcast in Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/configuration/configuring-within-spring)
- [Dynamic Configuration for Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/configuration/dynamic-config): You can use dynamic configuration to add new configuration to members at runtime or update some supported configuration such as Enterprise license keys. This feature is useful if you want to configure a running cluster without having to restart the members.
- [Configuring Dynamic Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/configuration/dynamic-config-persistence): You can configure members to keep dynamic configuration changes in memory or persist them to a YAML or XML configuration file.
- [Dynamic Configuration with Programmatic APIs (Java) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/configuration/dynamic-config-programmatic-api): You can use the Java member or client APIs to add dynamic configuration to some supported features at runtime.
- [Updating or Reloading Dynamic Configuration in REST | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/configuration/dynamic-config-update-and-reload): You can use the /config/update and /config/reload REST endpoints to add dynamic configuration for some supported features at runtime.
- [Configuring the Jet Engine | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/configuration/jet-configuration)
- [Configuring JVM Parameters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/configuration/jvm-parameters)
- [Configuration Pattern Matcher | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/configuration/pattern-matcher)
- [Hazelcast Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/configuration/understanding-configuration): To configure a Hazelcast cluster or client, you can choose either static or dynamic configuration. Explore the options and decide which one is best for your application.
- [Using Wildcards | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/configuration/using-wildcards)
- [Best Practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/cp-subsystem/best-practices): Consider the following, a wrap-up of the aforementioned recommendations, to get the best throughput out of your CP Subsystem use case.
- [Configuring CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/cp-subsystem/configuration): You can configure clusters to enable the CP Subsystem as well as fine-tune many other options such as CP groups sizes and persistence of CP state.
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/cp-subsystem/cp-subsystem): CP Subsystem is a component of a Hazelcast cluster that builds a strongly consistent layer for a set of distributed data structures. As well as network partitions, the CP Subsystem withstands server and client failures.
- [Managing and Monitoring the CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/cp-subsystem/management): The CP Subsystem requires manual intervention while expanding or shrinking its size, or when a CP member crashes or becomes unreachable. When a CP member becomes unreachable, it is not automatically removed from CP Subsystem because it could still be active and partitioned away.
- [Configuring Data Connections to External Systems | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-connections/data-connections-configuration): A data connection contains the metadata that Hazelcast needs to connect an external system. You can define a data connection in your members' configuration files, in the Java member API, or in SQL, and reuse the same connection details in the Pipeline API, SQL mappings, and MapStores.
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-connections/mongo-dc-configuration)
- [Making Your Map Data Safe | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/backing-up-maps): Maps are in-memory data structures, which means they are potentially vulnerable to data loss in the event of a system failure. Hazelcast offers several features to minimize the chances of data loss, including in-memory backups and persisted data stores.
- [Cardinality Estimator Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/cardinality-estimator-service)
- [CPMap | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/cpmap)
- [Creating a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/creating-a-map): Maps store data in key/value pairs called entries, which can be one of many data types. To create a map, you just need to give it a name, then write some data to it.
- [Distributed Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/distributed-data-structures)
- [Event Journal | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/event-journal)
- [FencedLock | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/fencedlock)
- [Flake ID Generator | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/flake-id-generator)
- [IAtomicLong | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/iatomiclong)
- [IAtomicReference | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/iatomicreference)
- [ICountDownLatch | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/icountdownlatch)
- [ISemaphore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/isemaphore)
- [List | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/list)
- [Acting Upon Changes to a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/listening-for-map-entries): You can set up monitoring of a map to look for specific events, such as adding an entry, updating a specific entry, or deleting an entry. You can use these events to trigger execution of code, or even intercept the event and change it before it affects the data in memory.
- [Locking Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/locking-maps): Although maps are thread-safe, you may prefer to have manual control over which members have access to a map entry at a given time. Hazelcast offers two ways of locking map entries: pessimistic locking and optimistic locking.
- [Managing Map Memory | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/managing-map-memory): Depending on how you use maps, they may become too large for your cluster's memory, or the data may become stale and useless to your applications. To handle these situations, you can set expiration and eviction policies.
- [Distributed Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/map): Distributed maps, also known as maps or IMaps, are key-value pairs that are partitioned across a cluster. Use maps to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/map-config): Map configuration is part of the overall Hazelcast server configuration. When you create your map, it inherits the configuration that is set up on the server. It is important to plan your map configuration ahead of time, as you cannot change the configuration of a map once it is created without restarting your entire cluster.
- [MultiMap | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/multimap)
- [PN Counter | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/pn-counter)
- [Preventing Out of Memory Exceptions when Querying a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/preventing-out-of-memory): Query-based map methods such as entrySet()` may trigger an out of memory exception (OOME), depending on the size of your map and the available memory of each member. To prevent these exceptions, you can configure your cluster to limit query results.
- [Priority Queue | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/priority-queue)
- [Queue | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/queue)
- [Reading Data From a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/reading-a-map): Data in a map is distributed among members in a Hazelcast cluster. To read entries from a map, you can use simple get requests, distributed queries, or use the map as a source in a data pipeline.
- [Reading Map Metrics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/reading-map-metrics): By default, you can read metrics for a given map, such as the primary and backup entry count, last update time, and locked entry count on each member of your cluster. You can access these statistics for the entire map, for the map entries on a specific cluster member, or specific map entries.
- [Reliable Topic | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/reliable-topic)
- [Replicated Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/replicated-map)
- [Ringbuffer | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/ringbuffer)
- [Set | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/set)
- [Setting the In-Memory Format of Map Entries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/setting-data-format): The in-memory format you set to store your data can have a significant impact on the performance of your application. When data is moved either between a client and the Hazelcast cluster or between cluster members, it is always in serialized (binary) format. Depending on your use case, it may be more efficient to store the data in that serialized format, either on-heap or off-heap, or deserialize it back to the original object format.
- [Topic | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/topic)
- [Updating Map Entries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/data-structures/updating-map-entries): Maps are not static. You can update or remove individual map entries, a group of map entries, or the entire map.
- [Choosing an Application Topology | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/deploy/choosing-a-deployment-option): Hazelcast offers two topologies to use Hazelcast: embedded in a Java application or in a client/server topology. To help you choose a topology that meets your requirements, this topic describes each option.
- [Public Clouds | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/deploy/deploying-in-cloud): Deploy a Hazelcast cluster in cloud environments including Hazelcast Cloud, Amazon AWS, Google Cloud Platform, and Azure.
- [Deploying a Cluster on Amazon AWS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/deploy/deploying-on-aws): Deploy Hazelcast clusters on Amazon AWS EC2 and AWS ECS/Fargate environments and allow them to discover each other automatically.
- [Deploying a Cluster on Microsoft Azure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/deploy/deploying-on-azure): Deploy Hazelcast clusters on Azure and allow them to discover each other automatically.
- [Deploying a Cluster on Google Cloud Platform | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/deploy/deploying-on-gcp): Deploy Hazelcast clusters on Google Cloud Platform and allow them to discover each other automatically.
- [Deploying on Docker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/deploy/deploying-with-docker): In this deployment guide, you will learn how to form a cluster from Hazelcast member containers running on more than one Docker host in the same local area network (LAN).
- [Managing Enterprise Edition License Keys | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/deploy/enterprise-licenses): To use Hazelcast Enterprise Edition, you need an Enterprise Edition license key. This topic explains how to get a license key, install it on a member, and manage it.
- [Supported Versions and Compatibilities | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/deploy/versioning-compatibility): This section provides the supported versions and interoperability of Hazelcast Platform and its modules.
- [Cluster Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/events/cluster-events)
- [Listening to Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/events/distributed-events)
- [Event Listeners for Hazelcast Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/events/event-listeners-for-clients)
- [Global Event Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/events/global-event-configuration)
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/events/object-events)
- [Config Properties SPI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/extending-hazelcast/config-properties-spi)
- [Discovery SPI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/extending-hazelcast/discovery-spi)
- [Extending Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/extending-hazelcast/extending-hazelcast)
- [OperationParker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/extending-hazelcast/operationparker)
- [Frequently Asked Questions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/faq)
- [Backups | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/fault-tolerance/backups)
- [Fault Tolerance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/fault-tolerance/fault-tolerance)
- [Timeouts | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/fault-tolerance/timeouts)
- [Authenticate Client Connections | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/getting-started/authenticate-clients): This tutorial introduces you to member security by setting up authentication for client connections. At the end of this tutorial, you'll know how to configure member and client security settings to allow only authorized clients to connect to a cluster.
- [Deploy Blue-Green Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/getting-started/blue-green): This tutorial introduces you to blue-green cluster deployments. At the end of this tutorial, you'll know how to set up a client to operate continuously even when its connected to a cluster that fails.
- [Hazelcast Editions and Distributions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/getting-started/editions): Hazelcast offers Enterprise Edition and Community Edition versions of its software, each available as either a full or slim distribution.
- [Get Started with Hazelcast Enterprise | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/getting-started/enterprise-overview): This series of tutorials showcases some of the most useful features of Hazelcast Enterprise.
- [Start a Local Cluster from Binary | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/getting-started/get-started-binary): This tutorial introduces you to Hazelcast in a client/server topology. At the end of this tutorial, you'll know how to start a cluster from the binary distribution, store data in memory, visualize your data and more.
- [Start a Local Cluster with the CLI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/getting-started/get-started-cli): Follow this five-minute tutorial to set up a Hazelcast cluster for testing or evaluation purposes. In five minutes, you will learn how to install Hazelcast with a package manager, start a local cluster with the CLI, write data to memory and visualize that data.
- [Start a Local Cluster in Docker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/getting-started/get-started-docker): This tutorial introduces you to Hazelcast in a client/server topology. At the end of this tutorial, you'll know how to start a cluster in a single Docker host, store data in memory, visualize your data and more.
- [Start a Local Embedded Cluster | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/getting-started/get-started-java): This tutorial introduces you to Hazelcast in an embedded topology. At the end of this tutorial, you'll know how to start a cluster in your Java application and store data in memory.
- [Installing Hazelcast Enterprise Edition | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/getting-started/install-enterprise): To install Hazelcast Enterprise Edition, you can use Docker, the binary, or Java. To unlock the Enterprise Edition features, you must install your Enterprise Edition license key.
- [Installing Hazelcast Community Edition | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/getting-started/install-hazelcast): You can install the Community Edition of Hazelcast, using the command line interface (CLI), Docker, the binary, or Java.
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/getting-started/interactive-quickstart)
- [Persist Map Entries on Disk | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/getting-started/persistence): This tutorial introduces you to Hazelcast with Persistence enabled. At the end of this tutorial, you'll know how to enable Persistence for a map in your cluster and see the recovery of the map entries after a cluster shutdown.
- [Developer Resources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/getting-started/resources)
- [Getting Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/getting-started/support): Hazelcast provides two types of support: one for the community and one for paying customers.
- [Replicate a Map over Clusters in a WAN | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/getting-started/wan): This tutorial introduces you to WAN Replication by replicating map entries across two clusters: London and Tokyo. At the end of this tutorial, you'll know how to synchronize a map from one cluster to another.
- [Glossary | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/glossary)
- [Ingesting Data from External Sources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/ingest/overview): Explore the Hazelcast components for ingesting data from both on-premise systems and cloud deployments.
- [CDC Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/cdc-connectors)
- [Connector Guides | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/connectors): Hazelcast comes with a wide range of built-in connectors for accessing data in other platforms. You can also use Hazelcast with pre-built connectors for importing data from external systems. Both types of connector are configured to read and write data in the most efficient way for their respective platform.
- [Custom Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/custom-connectors)
- [Connectors for Databases | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/database-connectors)
- [Elasticsearch Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/elasticsearch-connector)
- [Unified File Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/file-connector): The unified file connector provides a simple way to read files across different sources. Using this connector, you can read files from the local filesystem, HDFS and cloud storage systems such as Amazon S3, Google Cloud Storage or Azure Blob Storage. This connector supports various data formats, including text files, CSV, JSON, and Avro.
- [HTTP Listener Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/http-connector)
- [InfluxDB Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/influxdb-connector)
- [JCache Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/jcache-connector): The JCache connector is mostly equivalent to the map connector, the main difference being that the JCache connector is compliant with the JCache standard API. As a sink, since JCache doesn't support entry processors, only the default variant is available.
- [JDBC Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/jdbc-connector)
- [JMS Message Queue Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/jms-connector)
- [Kafka Connect Source Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/kafka-connect-connectors): With a Kafka Connect Source connector, you can reliably import data from an external system, such as a database, key-value store, search index, or file system, directly into a Hazelcast data pipeline. The data is available for stream processing. <strong>No Kafka cluster is required</strong>.
- [Apache Kafka Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/kafka-connector): The Kafka connector allows you to stream, filter, and transform events between Hazelcast clusters and Kafka.
- [Amazon Kinesis Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/kinesis-connector)
- [Legacy File Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/legacy-file-connector): The legacy file connector allows you to read and write to files, using the Jet API. This connector is still maintained, but all new development goes into the unified file connector.
- [List Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/list-connector)
- [Map Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/map-connector): A map is a distributed in-memory key-value data structure that can be used as a batch or streaming data source as well as a data sink.
- [Connectors for Messaging Systems | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/messaging-system-connectors)
- [MongoDB Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/mongodb-connector)
- [Observable Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/observable-connector): The observable connector provides a way of receiving query results on the same client that submitted a job. This connector is useful when you are using the Jet API for ad-hoc queries and you want to use your client as a sink.
- [Apache Pulsar Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/pulsar-connector)
- [Redis Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/redis-connector)
- [Reliable Topic Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/reliable-topic-connector)
- [Socket Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/socket-connector)
- [Test Source Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/test-connectors): Test sources make it convenient to get started with pipelines without having to use an actual data source. They can also be used for unit testing different pipelines where you can expect a more deterministic import.
- [Twitter Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/integrate/twitter-connector)
- [JCache API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/jcache/api)
- [JCache - Hazelcast Instance Integration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/jcache/hazelcast-integration)
- [Hazelcast JCache Extension - ICache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/jcache/icache)
- [Hazelcast JCache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/jcache/jcache)
- [JCache Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/jcache/overview)
- [JCache Providers | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/jcache/providers)
- [JCache Setup and Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/jcache/setup)
- [Testing for JCache Specification Compliance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/jcache/tck)
- [Deploying on Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/kubernetes/deploying-in-kubernetes): Discover ways to deploy Hazelcast clusters in Kubernetes (K8s) environments.
- [Adding custom JAR files to the Platform/Management Center Classpath | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/kubernetes/helm-adding-custom-jar)
- [Configuring SSL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/kubernetes/helm-configuring-ssl)
- [Dynamic Persistence Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/kubernetes/helm-dynamic-persistence-configuration)
- [Enabling External Access to Cluster | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/kubernetes/helm-enabling-external-access)
- [Deploying Hazelcast Open Source on Kubernetes with Helm | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/kubernetes/helm-hazelcast-chart): This chart bootstraps a link:https://github.com/hazelcast/hazelcast-docker/tree/master/hazelcast-oss[Hazelcast] and link:https://github.com/hazelcast/management-center-docker[Management Center] deployments on a link:http://kubernetes.io[Kubernetes] cluster using the link:https://helm.sh[Helm] package manager.
- [Deploying Hazelcast Enterprise on Kubernetes with Helm | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/kubernetes/helm-hazelcast-enterprise-chart): This chart bootstraps a link:https://github.com/hazelcast/hazelcast-docker/tree/master/hazelcast-enterprise[Hazelcast Enterprise] and link:https://github.com/hazelcast/management-center-docker[Management Center] deployments on a link:http://kubernetes.io[Kubernetes] cluster using the link:https://helm.sh[Helm] package manager.
- [Helm Upgrade Guide | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/kubernetes/helm-upgrade-guide)
- [Kubernetes Auto Discovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/kubernetes/kubernetes-auto-discovery): Before you start a Hazelcast cluster in Kubernetes, it's important to configure settings to ensure that members can form a cluster and to prevent any unexpected data loss.
- [Running Hazelcast Enterprise Edition with Persistence under Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/kubernetes/kubernetes-persistence): Hazelcast Enterprise Edition members configured with persistence enabled can monitor the Kubernetes (K8s) context and automate Hazelcast cluster state management to ensure the optimal cluster behavior during shutdown and restart.
- [Troubleshooting and Limitations in Kubernetes Environments | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/kubernetes/troubleshooting-and-limitations): Find advice for troubleshooting issues you might face while deploying Hazelcast via Helm.
- [List of Hazelcast Metrics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/list-of-metrics)
- [Cluster and Member States | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/maintain-cluster/cluster-member-states): Cluster states determine what cluster operations are available. By changing the state of a cluster, you can grant or restrict cluster operations such as repartitioning as well as change the behavior of those operations.
- [REST API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/maintain-cluster/enterprise-rest-api)
- [Enabling Lite Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/maintain-cluster/lite-members)
- [Configuring Logging | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/maintain-cluster/logging): Options available for the logging mechanism of Hazelcast clusters.
- [Filtering Members with Attributes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/maintain-cluster/member-attributes)
- [Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/maintain-cluster/monitoring): Options available for monitoring the health and operations of Hazelcast clusters.
- [Community Edition REST API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/maintain-cluster/rest-api)
- [Rolling Upgrades | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/maintain-cluster/rolling-upgrades): You can use rolling upgrades to upgrade the version of Hazelcast members in a running cluster without interrupting the operation of the cluster.
- [Shutting Down Members and Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/maintain-cluster/shutdown): Maintaining a cluster often requires shutting down clusters or individual members to make changes take effect. Hazelcast offers convenient methods for shutting down clusters as well as graceful and ungraceful options for specific members.
- [Management Center | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/management-center): Management Center is a tool for managing and monitoring Hazelcast Platform clusters.
- [Cluster utilities | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/management/cluster-utilities): Hazelcast Platform is provided with a range of programmatic utilities that you can use to manage your Hazelcast clusters, including command line interfaces and scripts.
- [Configuring a MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/mapstore/configuration-guide): This topic explains how to configure a map with a MapStore. It includes configuration options for loading data, as well as caching behaviors, and MapStore reuse.
- [Using the generic MapLoader | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/mapstore/configuring-a-generic-maploader): With the xref:working-with-external-data.adoc#options[generic MapLoader], you can configure a map to cache data from an external system. This topic includes an example of how to configure a map with a generic MapLoader that connects to a MySQL database.
- [Using the generic MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/mapstore/configuring-a-generic-mapstore): With the xref:working-with-external-data.adoc#options[generic MapStore], you can configure a map to cache data from and write data back to an external system. This topic includes an example of how to configure a map with a generic MapStore that connects to a MySQL database.
- [Implementing a Custom MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/mapstore/implement-a-mapstore): You can use the Java <code>MapStore</code> and <code>MapLoader</code> interfaces to implement a custom MapStore with your own logic, such as for database connections, loading data from an external system, and writing data back to the external system.
- [Map Operations that Trigger Methods on a MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/mapstore/mapstore-triggers): These are the map operations that trigger methods on a configured MapStore.
- [Building a Cache with MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/mapstore/working-with-external-data): MapStore is an API for building a cache on top of Hazelcast. To build a cache, you can either use a pre-built component, which requires little or no coding. Or, you can use a custom option that allows you to write the interface yourself.
- [Using the Data Migration Tool | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/migrate/data-migration-tool): You can use the Data Migration Tool (DMT) to migrate your data from version 4.x or 5.x Community Edition and Enterprise Edition Hazelcast clusters when upgrading to 5.3.x or later versions of Enterprise Edition, or moving to the latest Cloud release. The DMT can also be used for infrastructure consolidation or separation with selective migration of application data between clusters.
- [DMT Command Reference | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/migrate/dmt-command-reference)
- [Migrating Data from IMDG 3.12.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/migrate/migration-tool-imdg): This guide explains how to migrate data in maps or JCache data structures from a running IMDG 3.12.x cluster to a Hazelcast 5.x cluster.
- [Upgrading from IMDG 3.12.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/migrate/upgrading-from-imdg-3)
- [Upgrading from IMDG 4.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/migrate/upgrading-from-imdg-4): This guide covers the most important changes that affect users of IMDG 4.x who want to upgrade to Hazelcast.
- [Upgrading from Jet | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/migrate/upgrading-from-jet): This guide covers the most important changes that affect users of Jet 4.x who want to upgrade to Hazelcast.
- [Dealing with Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/network-partitioning/dealing-with-network-partitions)
- [Network Partitioning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/network-partitioning/network-partitioning)
- [Partial Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/network-partitioning/partial-network-partitions)
- [Split-Brain Protection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/network-partitioning/split-brain-protection)
- [Split-Brain Recovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/network-partitioning/split-brain-recovery)
- [API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/osgi/api)
- [Configuring Hazelcast OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/osgi/configuring-osgi-support)
- [Design | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/osgi/design)
- [OSGI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/osgi/osgi)
- [OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/osgi/osgi-support)
- [Using Hazelcast OSGI Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/osgi/using-osgi-service)
- [Caching Deserialized Values | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/performance/caching-deserialized-values)
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/phone-homes)
- [About Stream Processing Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/building-pipelines): Streaming jobs are those that process an infinite amount of data such as a continuous event stream. Because these jobs continue to run until they are canceled, you must use timestamps to define time windows in which to collect events.
- [Capture Changes from MySQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/cdc)
- [Setting Up a Database for Change Data Capture | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/cdc-database-setup)
- [Join Change Data Capture Records | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/cdc-join)
- [Change Data Capture (CDC) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/cdc-overview): Change Data Capture (CDC) is a pipeline pattern for observing changes made to a database and extracting them in a form usable by other systems, for the purposes of replication, analysis and more.
- [Capture Changes from PostgreSQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/cdc-postgres)
- [Configuring Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/configuring-jobs): Before submitting a job to a cluster, you can configure its name, whether to record metrics, and how it behaves when cluster members fail.
- [Building a Custom Aggregate Operation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/custom-aggregate-operation)
- [Adding Batching to a Custom Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/custom-batch-source): To improve the throughput of your custom sources, you can add batching to reads.
- [Create a Custom Sink | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/custom-sink)
- [Creating a Custom Streaming Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/custom-stream-source): If Hazelcast is missing a built-in source, or a suitable Kafka Connect Source connector is unavailable, you build your own streaming source, using the Jet API.
- [Extract Transform Load (ETL) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/etl-overview): ETL is a pipeline pattern for collecting data from various sources, transforming (changing) it to conform to some rules, and loading it into a sink. This pattern is often used to form materialized views where data is processed and put into a Hazelcast map for fast in-memory queries.
- [Mapping Data in a Pipeline Using a a gRPC Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/grpc): When processing data in a pipeline, you can use an external service to execute a function on input data, and pass the output to the next stage of pipeline. A popular way of exposing external services is to use the gRPC protocol.
- [Ingesting Data from Sources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/ingesting-from-sources): In order to process data, you first need to ingest it into your pipeline, using one or more sources.
- [Managing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/job-management): Once a job is submitted, it has its own lifecycle on the cluster which is distinct from the submitter. To manage the lifecycle of jobs, you can use either SQL or CLI commands to list, cancel, suspend, resume, and restart them.
- [Monitoring Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/job-monitoring): To ensure the reliability of streaming jobs and their workloads, try implementing some basic monitoring. With Hazelcast, you can monitor the status of streaming jobs to quickly identify job failures for troubleshooting.
- [Securing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/job-security): While submitting jobs, you can upload custom code that bypasses client permissions. Jobs also have access to data outside Hazelcast such as files on the device that's running a member. As a result, it's important to be aware of how to secure your Hazelcast member against malicious jobs.
- [Updating Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/job-update): Update streaming jobs without losing computation state.
- [Connect to Apache Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/kafka)
- [Connect to Amazon Kinesis | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/kinesis)
- [Enrich a Stream | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/map-join): In this tutorial, you build a pipeline that takes a stream of trades from a stock exchange and enriches it with a full company name for nicer presentation. Each trade contains a stock symbol, also known as ticker, which uniquely identifies the stock. You will use the ticker to look up the full company name in a replicated map.
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/object-events)
- [Receiving Pipeline Results on the Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/observables)
- [About Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/overview): Learn about the core concepts of data pipelines and how you can build your own with the Hazelcast Jet engine.
- [Group Messages from Apache Pulsar | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/pulsar)
- [Apply a Custom Transform with Python | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/python)
- [Sending Results to Sinks | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/sending-data-to-sinks): After defining the processing steps in a pipeline, you must send the results to at least one destination called a sink. Hazelcast comes with built-in sinks as well as a public API for building your own.
- [Serializing Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/serialization)
- [Spring Boot Starter | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/spring-boot)
- [Subscribe to Changes to a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/stream-imap)
- [Get Started with Stream Processing (Client/Server) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/stream-processing-client): This tutorial shows you how to use a Hazelcast cluster as a data processing engine for your client applications. At the end of this tutorial, you'll know how to build a data pipeline in Java and submit it as a job to your Hazelcast cluster.
- [Get Started with Stream Processing (Embedded) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/stream-processing-embedded): This tutorial shows you how to use Hazelcast as a streaming engine that's embedded in your Java application. At the end of this tutorial, you'll know how to ingest data from some test sources and filter it continuously to generate results in real time.
- [Submitting Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/submitting-jobs): Submit data pipelines to a Hazelcast cluster for execution.
- [Transforms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/transforms): Hazelcast offers several transforms which can be used to process data. Explore the available transforms and learn how to use them.
- [Apply Windowed Aggregation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/windowing)
- [Testing Sources and Sinks for XA Transaction Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/pipelines/xa): In order to have end-to-end exactly-once processing in pipelines, sources and sinks need to support it too. Although many sources and sinks ensure atomicity (all distributed participants either commit the transaction or roll back), some do not survive a client disconnection. You can test whether a source or a sink will survive a client disconnection, using either JDBC or Java Messaging Service (JMS).
- [This page is a placeholder | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/placeholder)
- [Cloud Discovery Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/plugins/cloud-discovery)
- [Framework Integration Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/plugins/framework-integration)
- [Hazelcast Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/plugins/hazelcast-plugins)
- [Other Integrations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/plugins/other-integrations)
- [Web Session Replication Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/plugins/web-session-replication)
- [Indexing Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/query/indexing-maps): Indexes improve the performance of queries on map entries by reducing the number of entries that members need to iterate through.
- [Running Distributed Queries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/query/overview): Explore the tools that Hazelcast offers for running distributed queries.
- [Predicates API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/query/predicate-overview): The Predicates API is a programming interface for querying data in Hazelcast, which is similar to the Java Persistence Query Language (JPQL).
- [5.4.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/release-notes/5-4-0)
- [5.4.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/release-notes/5-4-1)
- [5.4.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/release-notes/5-4-2): These release notes list any new features, enhancements, fixes, and breaking changes implemented between version 5.4.1 and version 5.4.2 of Hazelcast Platform.
- [5.4.3 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/release-notes/5-4-3): These release notes list any new features, enhancements, fixes, and breaking changes implemented between version 5.4.2 and version 5.4.3 of Hazelcast Platform.
- [Hazelcast Platform 5.4.x release notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/release-notes/releases)
- [Security Hardening Recommendations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/secure-cluster/hardening-recommendations)
- [Security Defaults | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/secure-cluster/security-defaults)
- [Cluster Member Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/security/cluster-member-security)
- [Default authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/security/default-authentication)
- [Enabling JAAS Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/security/enabling-jaas)
- [Encryption | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/security/encryption)
- [FIPS 140-2 | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/security/fips-140-2)
- [Integrating OpenSSL / BoringSSL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/security/integrating-openssl)
- [JAAS authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/security/jaas-authentication)
- [Logging Auditable Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/security/logging-auditable-events)
- [Client Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/security/native-client-security): To protect your members from a malicious client, you can allow them to identify clients and restrict their permissions to access either data in data structures or features such as user code deployment.
- [Security Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/security/overview)
- [Security Debugging | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/security/security-debugging)
- [Security Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/security/security-interceptor)
- [Security Realms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/security/security-realms)
- [Simple Authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/security/simple-authentication)
- [Socket Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/security/socket-interceptor)
- [Other TLS-Related Configurations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/security/tls-configuration)
- [TLS/SSL Basics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/security/tls-ssl)
- [Validating Secrets Using Strength Policy | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/security/validating-secrets)
- [Compact Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/serialization/compact-serialization)
- [Custom Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/serialization/custom-serialization)
- [Global Serializer | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/serialization/global-serializer)
- [Implementing DataSerializable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/serialization/implementing-dataserializable)
- [Implementing HazelcastInstanceAware | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/serialization/implementing-hazelcastinstanceaware)
- [IdentifiedDataSerializable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/serialization/implementing-identifieddataserializable)
- [Implementing Java Serializable and Externalizable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/serialization/implementing-java-serializable)
- [Implementing Portable Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/serialization/implementing-portable-serialization)
- [Serializing Objects and Classes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/serialization/serialization): For data to be sent over a network between cluster members and/or clients, it needs to be serialized into raw bytes. Hazelcast has many serialization options to choose from, depending on what you plan on doing with your data.
- [Configuring Serializers | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/serialization/serialization-configuration): You can configure clusters to be able to serialize and deserialize custom objects and classes as well as override built-in serializers and whitelist certain Java classes.
- [Serializing into JSON | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/serialization/serializing-json): If you want to query JSON strings that are stored in Hazelcast, you can serialize them, using <code>HazelcastJsonValue</code>.
- [Hazelcast Simulator | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/simulator)
- [Adding Caching to Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/spring/add-caching)
- [Spring Best Practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/spring/best-practices)
- [Configuring Hazelcast in Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/spring/configuration)
- [Configuring Hibernate Second-Level Cache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/spring/hibernate)
- [Integrating with Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/spring/overview)
- [Enabling SpringAware Objects | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/spring/springaware)
- [Configuring Hazelcast Transaction Manager | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/spring/transaction-manager)
- [ALTER JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/alter-job): With the <code>ALTER JOB</code> statement, you can suspend, resume, or restart a job that is running on a cluster. You can also update the configuration of a suspended job and resume it.
- [CREATE DATA CONNECTION | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/create-data-connection): The <code>CREATE DATA CONNECTION</code> statement creates the metadata required to connect to an external system for later use.
- [CREATE INDEX | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/create-index): The CREATE INDEX statement creates a sorted, hash, or bitmap index for a given map.
- [CREATE JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/create-job): The CREATE JOB statement submits a job to Hazelcast to run independently of the SQL client. With this statement, you can run a SQL statement in the background.
- [CREATE MAPPING | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/create-mapping): The CREATE MAPPING statement creates a table that stores essential metadata about a source's data model, data connection or connection parameters, and serialization formats so that the SQL service can connect to the data source and query it.
- [CREATE OR REPLACE SNAPSHOT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/create-snapshot): The CREATE OR REPLACE SNAPSHOT statement creates a named snapshot that you can use to start other jobs or keep as a backup.
- [CREATE VIEW | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/create-view): The CREATE VIEW statement creates a virtual table based on the result set of an SQL query. Views can be reused in other queries.
- [SQL Data Types | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/data-types): Hazelcast supports a subset of SQL data types. Each data type is mapped to a Java class, which represents the type's value in Hazelcast.
- [DELETE | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/delete): The DELETE statement deletes map entries that match the condition in a given WHERE clause.
- [DROP DATA CONNECTION | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/drop-data-connection): The <code>DROP DATA CONNECTION</code> statement deletes a data connection. Dropping a data connection affects all existing mappings where the data connection is in use, but will not affect any queries that are already running.
- [DROP JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/drop-job): The DROP JOB statement cancels a job and gives you the option to create a named snapshot from its state.
- [DROP MAPPING | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/drop-mapping): The DROP MAPPING statement removes an existing mapping.
- [DROP SNAPSHOT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/drop-snapshot): The DROP SNAPSHOT statement deletes a named snapshot.
- [DROP VIEW | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/drop-view): The DROP VIEW statement deletes a view.
- [EXPLAIN | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/explain): The EXPLAIN statement returns the execution plan for a given statement, without executing it.
- [Meta-information about Mappings | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/finding-mappings)
- [Expressions, Functions and Operators | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/functions-and-operators): Hazelcast supports a subset of standard SQL expressions, functions, and operators as well as non-standard functions for special cases such as windowed aggregation.
- [Get Started with SQL Over Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/get-started-sql): In this tutorial, you learn the basics of querying maps in SQL by running ad-hoc and batch queries on some test data.
- [Get Started with SQL Over Files | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/get-started-sql-files): In this tutorial, you learn the basics of querying files in SQL by creating and querying a CSV file.
- [Improving the Performance of SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/improving-performance): Use this topic to find advice on improving the performance of slow queries.
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/interactive-sql-files)
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/interactive-sql-kafka)
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/interactive-sql-maps)
- [Get Started with SQL Over Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/learn-sql): In this tutorial, you use an interactive SQL shell on a Hazelcast member to query Kafka topics in real-time.
- [Creating a Mapping to a File System | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/mapping-to-a-file-system): To query data in files, you need to create a mapping to a file, using the unified file connector so that the SQL service knows how to access the data.
- [Mapping to JDBC | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/mapping-to-jdbc): To query external JDBC data stores, you can create a mapping to them with the JDBC connector.
- [Mapping to Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/mapping-to-kafka): To query streams in Kafka topics, you need to create a mapping with the Kafka connector so that the SQL service knows how to access the messages.
- [Mapping to Hazelcast Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/mapping-to-maps): To query entries in maps, you need to create a mapping with the map connector so that the SQL service knows how to access the entries.
- [Mapping to MongoDB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/mapping-to-mongo): To query MongoDB data connections, you can create a mapping to them with the Mongo connector.
- [Using Query Parameters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/parameterized-queries): In Hazelcast clients, you can use query parameters to build safer, faster SQL queries.
- [Partition pruning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/partition-pruning): The partition pruning optimization technique reduces latency for faster IMap SQL queries.
- [Querying Maps with SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/querying-maps-sql): You can use SQL to run optimized distributed queries on the keys and values of maps in a local cluster.
- [Stream Processing in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/querying-streams): You can run SQL queries on single streams, join a stream with a table, or join two or more streams.
- [SELECT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/select): The SELECT statement reads data from tables, allowing you to query and process your data based on one or more parameters.
- [SHOW JOBS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/show-jobs): The SHOW JOBS statement displays a sorted list of all named jobs. The list includes any existing jobs that were submitted through the Java API as long as they have a name. The list does not include jobs that have already completed with or without an error.
- [SHOW MAPPINGS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/show-mappings): The SHOW MAPPINGS statement displays a sorted list of all mappings.
- [SHOW RESOURCES | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/show-resources): The <code>SHOW RESOURCES</code> statement displays a list of all resources, along with their data types, that are accessible via a named data connection. These are the resources for which you can create a mapping. Each type of data connection has a unique set of resources. For example:
- [INSERT INTO/SINK INTO | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/sink-into): The <code>INSERT INTO</code>/<code>SINK INTO</code> statements write data to platforms that are connected to Hazelcast through connectors.
- [SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/sql-overview): You can use SQL to query data in maps, Kafka topics, or a variety of file systems. Results can be sent directly to the client or inserted into maps or Kafka topics.
- [Configuring Reflection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/sql-reflection-configuration): Clusters can be configured to restrict the capability of creating objects through reflection during SQL execution.
- [SQL Statements | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/sql-statements): Hazelcast supports the following SQL statements. Explore the available statements and find more details about them.
- [Troubleshooting SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/troubleshooting): This topic provides solutions to some common errors in SQL queries.
- [UPDATE | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/update): The UPDATE statement overwrites the values of map entries that match the condition in a given WHERE clause.
- [User-Defined Types in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/user-defined-types)
- [Working with JSON Data in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/sql/working-with-json): In Hazelcast, the SQL service supports ways of working with JSON data: `json-flat`, which does not allow you to query nested keys/values and `json`, which supports nested queries and JSON functions.
- [Backing Up the Persistence Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/storage/backing-up-persistence): You can trigger backups of your persistence store, using the Java API, REST API, or Management Center. Backing up the persistence store is useful if you want to copy the data onto other clusters without having to shut down your cluster.
- [Configuring Persistence | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/storage/configuring-persistence): You can configure clusters to persist data structures, job snapshots, and SQL metadata on disk. You can also implement configuration options to fine-tune backups, encryption, and auto-recovery.
- [Copying Persisted Data onto other Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/storage/copying-persistence): When you persist data on disk, you may want to copy that data onto another cluster to perform testing, QA, or reproduce an issue on production data.
- [High-Density Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/storage/high-density-memory): The High-Density Memory Store is Hazelcast's enterprise in-memory storage solution. It solves garbage collection limitations so that applications can exploit hardware memory more efficiently without the need of oversized clusters.
- [Persistence Performance Benchmark | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/storage/performance): Find summaries of Persistence performance tests that were performed with a single Hazelcast member running on a physical server and on AWS R3.
- [Persisting Data on Disk | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/storage/persistence): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Persistence Design Details | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/storage/persistence-design)
- [Store Persistence Data on Intel® Optane™ DC Persistent Memory | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/storage/persistence-on-intel): In this tutorial, you'll use Intel® Optane™ DC Persistent Memory (PMem) to improve the performance of disk reads and writes, allowing your cluster to access data on disk faster.
- [Triggering a Force-Start | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/storage/triggering-force-start): To recover a cluster that has Persistence enabled after a cluster-wide restart, you can force a cluster to delete their persistence stores when one or more members fail to restart.
- [Triggering a Partial-Start | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/storage/triggering-partial-start): To recover a cluster that has Persistence enabled after a cluster-wide restart, you can force a cluster to start without some members when one or more of them fail.
- [System Properties | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/system-properties)
- [Testing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/test/testing)
- [Testing Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/test/testing-apps)
- [Creating a Transaction Interface | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/transactions/creating-a-transaction-interface)
- [Providing XA Transactions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/transactions/providing-xa-transactions)
- [Error Handling Strategies for Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/troubleshoot/error-handling): Jobs may not run as expected due to I/O errors in sources and sinks, or coding and input data errors in your pipelines. To handle these errors you can use one of the following strategies.
- [Recovery from Client Connection Failures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/troubleshoot/recovery-clients)
- [Recovery from a Partial or Total Failure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/troubleshoot/recovery-members)
- [Actions and Remedies for Alerts | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/troubleshoot/remedies-for-alerts): Find advice for remedies for the Hazelcast alerts.
- [Troubleshooting Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/troubleshoot/troubleshooting): Find advice for troubleshooting issues in your Hazelcast applications or your cluster deployments.
- [Deploy Hazelcast using Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/tutorials/kubernetes): In this tutorial, you will deploy a Hazelcast cluster to Kubernetes and connect it to a Kubernetes application.
- [Advanced Features | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/wan/advanced-features)
- [Configuring for IMap and ICache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/wan/configuring-for-map-and-cache)
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/wan/defining-wan-replication)
- [Failure Detection and Recovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/wan/failures)
- [WAN Replication Modes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/wan/modes)
- [WAN Quickstart | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/wan/quick-start)
- [REST API for WAN Wrap-Up | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/wan/rest-api)
- [Fine-Tuning WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/wan/tuning)
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/wan/wan)
- [What is Hazelcast Platform? | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/what-is-hazelcast): Hazelcast Platform uniquely combines a distributed compute engine and a fast data store in one runtime. It offers unmatched performance, resilience and scale for real-time and AI-driven applications.
- [What’s New in Hazelcast Platform | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.4/whats-new): Here are the highlights of what's new and improved in Hazelcast Platform
- [Hazelcast Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/): Hazelcast Platform uniquely combines a distributed compute engine and a fast data store in one runtime. It offers unmatched performance, resilience and scale for real-time and AI-driven applications.
- [Hazelcast Architecture | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/architecture/architecture): Hazelcast is a distributed computation and storage platform for consistent low-latency querying, aggregation, and stateful computation against event streams and traditional data sources. This guide outlines how Hazelcast works under the hood to help you understand some important concepts.
- [Data Partitioning and Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/architecture/data-partitioning): Partitioning and replication are two common techniques used together in distributed systems to achieve scalable, available, and transparent data distribution.
- [Design Decisions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/architecture/design-docs)
- [Jet: How Hazelcast Models and Executes Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/architecture/distributed-computing): Hazelcast models your pipeline code into a directed acyclic graph (DAG) which consists of stages. Each processing stage accepts the events from upstream stages, processes them, and passes the results to the downstream stage. To run a job, Hazelcast transforms the pipeline DAG into the core DAG. The top-level component that does this is called the planner.
- [How Hazelcast Handles Event Disorder | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/architecture/event-time-processing): To make sure that late events do not slow down jobs, Hazelcast allows you to define a threshold (lag) for how late events can be before they are ignored. To determine a late event, Hazelcast uses distributed watermarks to define the current time and compare it against the configured lag.
- [Cooperative Multithreading | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/architecture/execution-engine)
- [In-Memory Storage | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/architecture/in-memory-storage)
- [Jet: Sliding Window Aggregation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/architecture/sliding-window)
- [Caching Data | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/cache/overview): Hazelcast provides APIs and plugins for building distributed caches for your data, including web sessions, database queries, and compute results. Get familiar with Hazelcast as a cache and find useful resources for your use case.
- [Capacity Planning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/capacity-planning): Capacity planning involves estimating and validating the capacity of a cluster in order to determine which recommendations and best practices can help that cluster achieve its best reasonable performance.
- [Hazelcast Command-Line Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clients/clc)
- [C++ Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clients/cplusplus)
- [.NET Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clients/dotnet)
- [Go Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clients/go)
- [Getting Started with a Hazelcast Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clients/hazelcast-clients): Hazelcast has clients in Java, C++, .NET, Node.js, Go, Python, and Memcache. You can use these clients to communicate with cluster members.
- [Java Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clients/java)
- [Memcache Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clients/memcache)
- [Node.js Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clients/nodejs)
- [Python Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clients/python)
- [REST Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clients/rest)
- [Best Practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/cluster-performance/best-practices)
- [Performance Tuning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/cluster-performance/performance-tuning)
- [Accessing Domain Objects Without Domain Classes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clusters/accessing-domain-objects)
- [Creating Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clusters/creating-clusters)
- [Deadline Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clusters/deadline-detector)
- [Deploying User Code from Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clusters/deploying-code-from-clients)
- [Deploying User Code on the Member | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clusters/deploying-code-on-member)
- [Discovering Members by Multicast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clusters/discovering-by-multicast)
- [Discovering Members by TCP | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clusters/discovering-by-tcp)
- [Discovering Java Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clusters/discovering-native-clients)
- [Discovery Mechanisms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clusters/discovery-mechanisms)
- [Failure Detector Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clusters/failure-detector-configuration)
- [Logging Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clusters/logging-configuration)
- [Network Configurations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clusters/network-configuration)
- [Partition Group Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clusters/partition-group-configuration)
- [Phi Accrual Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clusters/phi-accrual-detector)
- [Ping Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clusters/ping-detector)
- [Setting Up Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/clusters/setting-up-clusters)
- [Common Exception Types | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/common-exception-types)
- [Compact Serialization Binary Specification | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/compact-binary-specification): The Compact Serialization Binary Specification defines the binary format of the Compact Serialization, the supported types, and the Compact Schema.
- [Distributed Computing | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/computing/distributed-computing): Explore the tools that Hazelcast offers for distributed computing on cluster members.
- [Durable Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/computing/durable-executor-service)
- [Entry Processor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/computing/entry-processor)
- [Java Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/computing/executor-service)
- [Scheduled Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/computing/scheduled-executor-service)
- [Checking Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/configuration/checking-configuration)
- [Member Configuration Files | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/configuration/configuring-declaratively): You can declare settings for Hazelcast members, using a YAML or XML configuration file. Although Hazelcast members read from a single configuration file, you can store settings in multiple files and import them into a single root file to enable reuse.
- [Configuring Hazelcast in Embedded Mode | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/configuration/configuring-programmatically): You can use a configuration object (config object) to configure members with the Java member API. To create new instances of members, pass the config object to those instances.
- [Configuring with System Properties and Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/configuration/configuring-with-system-properties): You can use xref:ROOT:system-properties.adoc[system properties] and environment variables to configure Hazelcast and override existing settings in a root configuration file. Environment variables are useful for configuring members in containerized environments.
- [Configuring Hazelcast in Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/configuration/configuring-within-spring)
- [Dynamic Configuration for Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/configuration/dynamic-config): You can use dynamic configuration to add new configuration to members at runtime or update some supported configuration such as Enterprise license keys. This feature is useful if you want to configure a running cluster without having to restart the members.
- [Configuring Dynamic Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/configuration/dynamic-config-persistence): You can configure members to keep dynamic configuration changes in memory or persist them to a YAML or XML configuration file.
- [Dynamic Configuration with Programmatic APIs (Java) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/configuration/dynamic-config-programmatic-api): You can use the Java member or client APIs to add dynamic configuration to some supported features at runtime.
- [Updating or Reloading Dynamic Configuration in REST | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/configuration/dynamic-config-update-and-reload): You can use the /config/update and /config/reload REST endpoints to add dynamic configuration for some supported features at runtime.
- [Configuring the Jet Engine | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/configuration/jet-configuration)
- [Configuring JVM Parameters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/configuration/jvm-parameters)
- [Configuration Pattern Matcher | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/configuration/pattern-matcher)
- [Hazelcast Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/configuration/understanding-configuration): To configure a Hazelcast cluster or client, you can choose either static or dynamic configuration. Explore the options and decide which one is best for your application.
- [Using Wildcards | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/configuration/using-wildcards)
- [Best Practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/cp-subsystem/best-practices): Consider the following, a wrap-up of the aforementioned recommendations, to get the best throughput out of your CP Subsystem use case.
- [Configuring CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/cp-subsystem/configuration): You can configure clusters to enable the CP Subsystem as well as fine-tune many other options such as CP groups sizes and persistence of CP state.
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/cp-subsystem/cp-subsystem): CP Subsystem is a component of a Hazelcast cluster that builds a strongly consistent layer for a set of distributed data structures. As well as network partitions, the CP Subsystem withstands server and client failures.
- [Managing and Monitoring the CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/cp-subsystem/management): The CP Subsystem requires manual intervention while expanding or shrinking its size, or when a CP member crashes or becomes unreachable. When a CP member becomes unreachable, it is not automatically removed from CP Subsystem because it could still be active and partitioned away.
- [Configuring Data Connections to External Systems | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-connections/data-connections-configuration): A data connection contains the metadata that Hazelcast needs to connect an external system. You can define a data connection in your members' configuration files, in the Java member API, or in SQL, and reuse the same connection details in the Pipeline API, SQL mappings, and MapStores.
- [Making Your Map Data Safe | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/backing-up-maps): Maps are in-memory data structures, which means they are potentially vulnerable to data loss in the event of a system failure. Hazelcast offers several features to minimize the chances of data loss, including in-memory backups and persisted data stores.
- [Cardinality Estimator Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/cardinality-estimator-service)
- [Creating a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/creating-a-map): Maps store data in key/value pairs called entries, which can be one of many data types. To create a map, you just need to give it a name, then write some data to it.
- [Distributed Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/distributed-data-structures)
- [Event Journal | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/event-journal)
- [FencedLock | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/fencedlock)
- [Flake ID Generator | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/flake-id-generator)
- [IAtomicLong | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/iatomiclong)
- [IAtomicReference | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/iatomicreference)
- [ICountDownLatch | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/icountdownlatch)
- [ISemaphore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/isemaphore)
- [List | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/list)
- [Acting Upon Changes to a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/listening-for-map-entries): You can set up monitoring of a map to look for specific events, such as adding an entry, updating a specific entry, or deleting an entry. You can use these events to trigger execution of code, or even intercept the event and change it before it affects the data in memory.
- [Locking Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/locking-maps): Although maps are thread-safe, you may prefer to have manual control over which members have access to a map entry at a given time. Hazelcast offers two ways of locking map entries: pessimistic locking and optimistic locking.
- [Managing Map Memory | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/managing-map-memory): Depending on how you use maps, they may become too large for your cluster's memory, or the data may become stale and useless to your applications. To handle these situations, you can set expiration and eviction policies.
- [Distributed Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/map): Distributed maps, also known as maps or IMaps, are key-value pairs that are partitioned across a cluster. Use maps to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/map-config): Map configuration is part of the overall Hazelcast server configuration. When you create your map, it inherits the configuration that is set up on the server. It is important to plan your map configuration ahead of time, as you cannot change the configuration of a map once it is created without restarting your entire cluster.
- [MultiMap | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/multimap)
- [PN Counter | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/pn-counter)
- [Preventing Out of Memory Exceptions when Querying a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/preventing-out-of-memory): Query-based map methods such as entrySet()` may trigger an out of memory exception (OOME), depending on the size of your map and the available memory of each member. To prevent these exceptions, you can configure your cluster to limit query results.
- [Priority Queue | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/priority-queue)
- [Queue | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/queue)
- [Reading Data From a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/reading-a-map): Data in a map is distributed among members in a Hazelcast cluster. To read entries from a map, you can use simple get requests, distributed queries, or use the map as a source in a data pipeline.
- [Reading Map Metrics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/reading-map-metrics): By default, you can read metrics for a given map, such as the primary and backup entry count, last update time, and locked entry count on each member of your cluster. You can access these statistics for the entire map, for the map entries on a specific cluster member, or specific map entries.
- [Reliable Topic | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/reliable-topic)
- [Replicated Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/replicated-map)
- [Ringbuffer | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/ringbuffer)
- [Set | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/set)
- [Setting the In-Memory Format of Map Entries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/setting-data-format): The in-memory format you set to store your data can have a significant impact on the performance of your application. When data is moved either between a client and the Hazelcast cluster or between cluster members, it is always in serialized (binary) format. Depending on your use case, it may be more efficient to store the data in that serialiized format, either on-heap or off-heap, or deserialize it back to the original object format.
- [Topic | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/topic)
- [Updating Map Entries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/data-structures/updating-map-entries): Maps are not static. You can update or remove individual map entries, a group of map entries, or the entire map.
- [Choosing an Application Topology | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/deploy/choosing-a-deployment-option): Hazelcast offers two topologies to use Hazelcast: embedded in a Java application or in a client/server topology. To help you choose a topology that meets your requirements, this topic describes each option.
- [Public Clouds | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/deploy/deploying-in-cloud): Deploy a Hazelcast cluster in cloud environments including Hazelcast Cloud, Amazon AWS, Google Cloud Platform, and Azure.
- [Deploying a Cluster on Amazon AWS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/deploy/deploying-on-aws): Deploy Hazelcast clusters on Amazon AWS EC2 and AWS ECS/Fargate environments and allow them to discover each other automatically.
- [Deploying a Cluster on Microsoft Azure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/deploy/deploying-on-azure): Deploy Hazelcast clusters on Azure and allow them to discover each other automatically.
- [Deploying a Cluster on Google Cloud Platform | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/deploy/deploying-on-gcp): Deploy Hazelcast clusters on Google Cloud Platform and allow them to discover each other automatically.
- [Deploying on Docker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/deploy/deploying-with-docker): In this deployment guide, you will learn how to form a cluster from Hazelcast member containers running on more than one Docker host in the same local area network (LAN).
- [Managing Enterprise License Keys | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/deploy/enterprise-licenses): To use Hazelcast Enterprise, you need an Enterprise license key. This topic explains how to get a license key, install it on a member, and manage it.
- [Supported Versions and Compatibilities | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/deploy/versioning-compatibility): This section provides the supported versions and interoperability of Hazelcast Platform and its modules.
- [Cluster Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/events/cluster-events)
- [Listening to Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/events/distributed-events)
- [Event Listeners for Hazelcast Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/events/event-listeners-for-clients)
- [Global Event Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/events/global-event-configuration)
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/events/object-events)
- [Config Properties SPI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/extending-hazelcast/config-properties-spi)
- [Discovery SPI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/extending-hazelcast/discovery-spi)
- [Extending Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/extending-hazelcast/extending-hazelcast)
- [OperationParker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/extending-hazelcast/operationparker)
- [Frequently Asked Questions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/faq)
- [Backups | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/fault-tolerance/backups)
- [Fault Tolerance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/fault-tolerance/fault-tolerance)
- [Timeouts | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/fault-tolerance/timeouts)
- [Authenticate Client Connections | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/getting-started/authenticate-clients): This tutorial introduces you to member security by setting up authentication for client connections. At the end of this tutorial, you'll know how to configure member and client security settings to allow only authorized clients to connect to a cluster.
- [Deploy Blue-Green Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/getting-started/blue-green): This tutorial introduces you to blue-green cluster deployments. At the end of this tutorial, you'll know how to set up a client to operate continuously even when its connected to a cluster that fails.
- [Hazelcast Editions and Distributions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/getting-started/editions): Hazelcast offers Enterprise and Open Source editions of its member software, each available as either a full or slim distribution.
- [Get Started with Hazelcast Enterprise | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/getting-started/enterprise-overview): This series of tutorials showcases some of the most useful features of Hazelcast Enterprise.
- [Start a Local Cluster from Binary | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/getting-started/get-started-binary): This tutorial introduces you to Hazelcast in a client/server topology. At the end of this tutorial, you'll know how to start a cluster from the binary distribution, store data in memory, visualize your data and more.
- [Start a Local Cluster with the CLI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/getting-started/get-started-cli): Follow this five-minute tutorial to set up a Hazelcast cluster for testing or evaluation purposes. In five minutes, you will learn how to install Hazelcast with a package manager, start a local cluster with the CLI, write data to memory and visualize that data.
- [Start a Local Cluster in Docker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/getting-started/get-started-docker): This tutorial introduces you to Hazelcast in a client/server topology. At the end of this tutorial, you'll know how to start a cluster in a single Docker host, store data in memory, visualize your data and more.
- [Start a Local Embedded Cluster | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/getting-started/get-started-java): This tutorial introduces you to Hazelcast in an embedded topology. At the end of this tutorial, you'll know how to start a cluster in your Java application and store data in memory.
- [Installing Hazelcast Enterprise | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/getting-started/install-enterprise): To install Hazelcast Enterprise, you can use Docker, the binary, or Java. To unlock the Enterprise features, you must install your Enterprise license key.
- [Installing Hazelcast Open Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/getting-started/install-hazelcast): You can install the Open Source edition of Hazelcast, using the command line interface (CLI), Docker, the binary, or Java.
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/getting-started/interactive-quickstart)
- [Persist Map Entries on Disk | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/getting-started/persistence): This tutorial introduces you to Hazelcast with Persistence enabled. At the end of this tutorial, you'll know how to enable Persistence for a map in your cluster and see the recovery of the map entries after a cluster shutdown.
- [Developer Resources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/getting-started/resources)
- [Getting Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/getting-started/support): Hazelcast provides two types of support: one for the community and one for paying customers.
- [Replicate a Map over Clusters in a WAN | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/getting-started/wan): This tutorial introduces you to WAN Replication by replicating map entries across two clusters: London and Tokyo. At the end of this tutorial, you'll know how to synchronize a map from one cluster to another.
- [Glossary | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/glossary)
- [Ingesting Data from External Sources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/ingest/overview): Explore the Hazelcast components for ingesting data from both on-premise systems as well as cloud deployments.
- [CDC Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/cdc-connectors)
- [Connector Guides | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/connectors): Hazelcast comes with a wide range of built-in connectors for accessing data in other platforms. You can also use Hazelcast with pre-built connectors for importing data from external systems. Both types of connector are configured to read and write data in the most efficient way for their respective platform.
- [Custom Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/custom-connectors)
- [Data Structure Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/data-structure-connectors): Data structure connectors allow you to access data stored in Hazelcast data structures. Use these connectors to integrate Hazelcast data structures into your pipelines as sources or sinks.
- [Connectors for Databases | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/database-connectors)
- [Elasticsearch Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/elasticsearch-connector)
- [Unified File Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/file-connector): The unified file connector provides a simple way to read files across different sources. Using this connector, you can read files from the local filesystem, HDFS and cloud storage systems such as Amazon S3, Google Cloud Storage or Azure Blob Storage. This connector supports various data formats, including text files, CSV, JSON, and Avro.
- [HTTP Listener Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/http-connector)
- [InfluxDB Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/influxdb-connector)
- [JCache Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/jcache-connector): The JCache connector is mostly equivalent to the map connector, the main difference being that the JCache connector is compliant with the JCache standard API. As a sink, since JCache doesn't support entry processors, only the default variant is available.
- [JDBC Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/jdbc-connector)
- [JMS Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/jms-connector)
- [Kafka Connect Source Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/kafka-connect-connectors): With a Kafka Connect Source connector, you can reliably import data from an external system, such as a database, key-value store, search index, or file system, directly into a Hazelcast data pipeline. The data is available for stream processing. <strong>No Kafka cluster is required</strong>.
- [Apache Kafka Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/kafka-connector): The Kafka connector allows you to stream, filter, and transform events between Hazelcast clusters and Kafka.
- [Amazon Kinesis Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/kinesis-connector)
- [Legacy File Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/legacy-file-connector): The legacy file connector allows you to read and write to files, using the Jet API. This connector is still maintained, but all new development goes into the unified file connector.
- [List Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/list-connector)
- [Map Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/map-connector): A map is a distributed in-memory key-value data structure that can be used as a batch or streaming data source as well as a data sink.
- [Connectors for Messaging Systems | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/messaging-system-connectors)
- [MongoDB Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/mongodb-connector)
- [Observable Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/observable-connector): The observable connector provides a way of receiving query results on the same client that submitted a job. This connector is useful when you are using the Jet API for ad-hoc queries and you want to use your client as a sink.
- [Apache Pulsar Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/pulsar-connector)
- [Redis Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/redis-connector)
- [Reliable Topic Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/reliable-topic-connector)
- [Socket Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/socket-connector)
- [Test Source Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/test-connectors): Test sources make it convenient to get started with pipelines without having to use an actual data source. They can also be used for unit testing different pipelines where you can expect a more deterministic import.
- [Twitter Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/integrate/twitter-connector)
- [JCache API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/jcache/api)
- [JCache - Hazelcast Instance Integration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/jcache/hazelcast-integration)
- [Hazelcast JCache Extension - ICache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/jcache/icache)
- [Hazelcast JCache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/jcache/jcache)
- [JCache Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/jcache/overview)
- [JCache Providers | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/jcache/providers)
- [JCache Setup and Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/jcache/setup)
- [Testing for JCache Specification Compliance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/jcache/tck)
- [Deploying on Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/kubernetes/deploying-in-kubernetes): Discover ways to deploy Hazelcast clusters in Kubernetes environments.
- [Adding custom JAR files to the Platform/Management Center Classpath | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/kubernetes/helm-adding-custom-jar)
- [Configuring SSL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/kubernetes/helm-configuring-ssl)
- [Dynamic Persistence Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/kubernetes/helm-dynamic-persistence-configuration)
- [Enabling External Access to Cluster | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/kubernetes/helm-enabling-external-access)
- [Deploying Hazelcast Open Source on Kubernetes with Helm | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/kubernetes/helm-hazelcast-chart): This chart bootstraps a link:https://github.com/hazelcast/hazelcast-docker/tree/master/hazelcast-oss[Hazelcast] and link:https://github.com/hazelcast/management-center-docker[Management Center] deployments on a link:http://kubernetes.io[Kubernetes] cluster using the link:https://helm.sh[Helm] package manager.
- [Deploying Hazelcast Enterprise on Kubernetes with Helm | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/kubernetes/helm-hazelcast-enterprise-chart): This chart bootstraps a link:https://github.com/hazelcast/hazelcast-docker/tree/master/hazelcast-enterprise[Hazelcast Enterprise] and link:https://github.com/hazelcast/management-center-docker[Management Center] deployments on a link:http://kubernetes.io[Kubernetes] cluster using the link:https://helm.sh[Helm] package manager.
- [Helm Upgrade Guide | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/kubernetes/helm-upgrade-guide)
- [Kubernetes Auto Discovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/kubernetes/kubernetes-auto-discovery): Before you start a Hazelcast cluster in Kubernetes, it's important to configure settings to ensure that members can form a cluster and to prevent any unexpected data loss.
- [Troubleshooting and Limitations in Kubernetes Environments | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/kubernetes/troubleshooting-and-limitations): Find advice for troubleshooting issues you might face while deploying Hazelcast via Helm.
- [List of Hazelcast Metrics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/list-of-metrics)
- [Cluster and Member States | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/maintain-cluster/cluster-member-states): Cluster states determine what cluster operations are available. By changing the state of a cluster, you can grant or restrict cluster operations such as repartitioning as well as change the behavior of those operations.
- [Enabling Lite Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/maintain-cluster/lite-members)
- [Configuring Logging | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/maintain-cluster/logging): Options available for the logging mechanism of Hazelcast clusters.
- [Filtering Members with Attributes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/maintain-cluster/member-attributes)
- [Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/maintain-cluster/monitoring): Options available for monitoring the health and operations of Hazelcast clusters.
- [REST API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/maintain-cluster/rest-api)
- [Rolling Upgrades | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/maintain-cluster/rolling-upgrades): You can use rolling upgrades to upgrade the version of Hazelcast members in a running cluster without interrupting the operation of the cluster.
- [Shutting Down Members and Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/maintain-cluster/shutdown): Maintaining a cluster often requires shutting down clusters or individual members to make changes take effect. Hazelcast offers convenient methods for shutting down clusters as well as graceful and ungraceful options for specific members.
- [Cluster Utilities | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/management/cluster-utilities)
- [Configuring a MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/mapstore/configuration-guide): This topic explains how to configure a map with a MapStore. It includes configuration options for loading data, as well as caching behaviors, and MapStore reuse.
- [Using the generic MapLoader | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/mapstore/configuring-a-generic-maploader): With the xref:working-with-external-data.adoc#options[generic MapLoader], you can configure a map to cache data from an external system. This topic includes an example of how to configure a map with a generic MapLoader that connects to a MySQL database.
- [Using the generic MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/mapstore/configuring-a-generic-mapstore): With the xref:working-with-external-data.adoc#options[generic MapStore], you can configure a map to cache data from and write data back to an external system. This topic includes an example of how to configure a map with a generic MapStore that connects to a MySQL database.
- [Implementing a Custom MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/mapstore/implement-a-mapstore): You can use the Java <code>MapStore</code> and <code>MapLoader</code> interfaces to implement a custom MapStore with your own logic, such as for database connections, loading data from an external system, and writing data back to the external system.
- [Map Operations that Trigger Methods on a MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/mapstore/mapstore-triggers): These are the map operations that trigger methods on a configured MapStore.
- [Building a Cache with MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/mapstore/working-with-external-data): MapStore is an API for building a cache on top of Hazelcast. To build a cache, you can either use a pre-built component, which requires little or no coding. Or, you can use a custom option that allows you to write the interface yourself.
- [Using the Data Migration Tool | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/migrate/data-migration-tool): You can use the Data Migration Tool (DMT) to migrate your data from version 4.x or 5.x Open Source and Enterprise Edition Hazelcast clusters when upgrading to 5.3.x or later versions of Enterprise Edition, or moving to the latest Cloud release. The DMT can also be used for infrastructure consolidation or separation with selective migration of application data between clusters.
- [DMT Command Reference | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/migrate/dmt-command-reference)
- [Evaluating 5.x (For IMDG 3.x Users) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/migrate/evaluation-tool)
- [Migrating Data from IMDG 3.12.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/migrate/migration-tool-imdg): This guide explains how to migrate data in maps or JCache data structures from a running IMDG 3.12.x cluster to a Hazelcast 5.x cluster.
- [Upgrading from IMDG 3.12.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/migrate/upgrading-from-imdg-3)
- [Upgrading from IMDG 4.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/migrate/upgrading-from-imdg-4): This guide covers the most important changes that affect users of IMDG 4.x who want to upgrade to Hazelcast.
- [Upgrading from Jet | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/migrate/upgrading-from-jet): This guide covers the most important changes that affect users of Jet 4.x who want to upgrade to Hazelcast.
- [Dealing with Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/network-partitioning/dealing-with-network-partitions)
- [Network Partitioning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/network-partitioning/network-partitioning)
- [Partial Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/network-partitioning/partial-network-partitions)
- [Split-Brain Protection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/network-partitioning/split-brain-protection)
- [Split-Brain Recovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/network-partitioning/split-brain-recovery)
- [API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/osgi/api)
- [Configuring Hazelcast OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/osgi/configuring-osgi-support)
- [Design | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/osgi/design)
- [OSGI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/osgi/osgi)
- [OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/osgi/osgi-support)
- [Using Hazelcast OSGI Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/osgi/using-osgi-service)
- [Back Pressure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/performance/back-pressure)
- [Performance Anti Patterns | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/performance/best-practices)
- [Caching Deserialized Values | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/performance/caching-deserialized-values)
- [CPU Thread Affinity | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/performance/cpu-thread-affinity)
- [Data Affinity | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/performance/data-affinity)
- [Near Cache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/performance/near-cache)
- [Performance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/performance/performance)
- [Pipelining | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/performance/pipelining)
- [Running on EC2 | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/performance/running-on-ec2)
- [SlowOperationDetector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/performance/slowoperationdetector)
- [Threading Model | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/performance/threading-model)
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/phone-homes)
- [About Stream Processing Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/building-pipelines): Streaming jobs are those that process a infinite amount of data such as a continuous event stream. Because these jobs continue to run until they are canceled, you must use timestamps to define time windows in which to collect events.
- [Capture Changes from MySQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/cdc)
- [Setting Up a Database for Change Data Capture | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/cdc-database-setup)
- [Join Change Data Capture Records | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/cdc-join)
- [Change Data Capture (CDC) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/cdc-overview): Change Data Capture (CDC) is a pipeline pattern for observing changes made to a database and extracting them in a form usable by other systems, for the purposes of replication, analysis and more.
- [Capture Changes from PostgreSQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/cdc-postgres)
- [Configuring Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/configuring-jobs): Before submitting a job to a cluster, you can configure its name, whether to record metrics, and how it behaves when cluster members fail.
- [Building a Custom Aggregate Operation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/custom-aggregate-operation)
- [Adding Batching to a Custom Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/custom-batch-source): To improve the throughput of your custom sources, you can add batching to reads.
- [Create a Custom Sink | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/custom-sink)
- [Creating a Custom Streaming Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/custom-stream-source): If Hazelcast is missing a built-in source, or a suitable Kafka Connect Source connector is unavailable, you build your own streaming source, using the Jet API.
- [Extract Transform Load (ETL) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/etl-overview): ETL is a pipeline pattern for collecting data from various sources, transforming (changing) it to conform to some rules, and loading it into a sink. This pattern is often used to form materialized views where data is processed and put into a Hazelcast map for fast in-memory queries.
- [Stream Processing and Event Timestamps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/event-time)
- [Mapping Data in a Pipeline Using a a gRPC Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/grpc): When processing data in a pipeline, you can use an external service to execute a function on input data, and pass the output to the next stage of pipeline. A popular way of exposing external services is to use the gRPC protocol.
- [Ingesting Data from Sources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/ingesting-from-sources): In order to process data, you first need to ingest it into your pipeline, using one or more sources.
- [Managing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/job-management): Once a job is submitted, it has its own lifecycle on the cluster which is distinct from the submitter. To manage the lifecycle of jobs, you can use either SQL or CLI commands to list, cancel, suspend, resume, and restart them.
- [Monitoring Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/job-monitoring): To ensure the reliability of streaming jobs and their workloads, try implementing some basic monitoring. With Hazelcast, you can monitor the status of streaming jobs to quickly identify job failures for troubleshooting.
- [Securing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/job-security): While submitting jobs, you can upload custom code that bypasses client permissions. Jobs also have access to data outside of Hazelcast such as files on the device that's running a member. As a result, it's important to be aware of how to secure your Hazelcast member against malicious jobs.
- [Updating Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/job-update): Update streaming jobs without losing computation state.
- [Connect to Apache Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/kafka)
- [Connect to Amazon Kinesis | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/kinesis)
- [Enrich a Stream | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/map-join): In this tutorial, you build a pipeline that takes a stream of trades from a stock exchange and enriches it with a full company name for nicer presentation. Each trade contains a stock symbol, also known as ticker, which uniquely identifies the stock. You will use the ticker to look up the full company name in a replicated map.
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/object-events)
- [Receiving Pipeline Results on the Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/observables)
- [About Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/overview): Learn about the core concepts of data pipelines and how you can build your own with the Hazelcast Jet engine.
- [Group Messages from Apache Pulsar | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/pulsar)
- [Apply a Custom Transform with Python | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/python)
- [Sending Results to Sinks | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/sending-data-to-sinks): After defining the processing steps in a pipeline, you must send the results to at least one destination called a sink. Hazelcast comes with built-in sinks as well as a public API for building your own.
- [Serializing Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/serialization)
- [Spring Boot Starter | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/spring-boot)
- [Subscribe to Changes to a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/stream-imap)
- [Get Started with Stream Processing (Client/Server) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/stream-processing-client): This tutorial shows you how to use a Hazelcast cluster as a data processing engine for your client applications. At the end of this tutorial, you'll know how to build a data pipeline in Java and submit it as a job to your Hazelcast cluster.
- [Get Started with Stream Processing (Embedded) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/stream-processing-embedded): This tutorial shows you how to use Hazelcast as a streaming engine that's embedded in your Java application. At the end of this tutorial, you'll know how to ingest data from some test sources and filter it continuously to generate results in real time.
- [Submitting Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/submitting-jobs): Submit data pipelines to a Hazelcast cluster for execution.
- [Transforms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/transforms): Hazelcast offers several transforms which can be used to process data. Explore the available transforms and learn how to use them.
- [Apply Windowed Aggregation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/windowing)
- [Testing Sources and Sinks for XA Transaction Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/pipelines/xa): In order to have end-to-end exactly-once processing in pipelines, sources and sinks need to support it too. Although many sources and sinks ensure atomicity (all distributed participants either commit the transaction or roll back), some do not survive a client disconnection. You can test whether a source or a sink will survive a client disconnection, using either JDBC or Java Messaging Service (JMS).
- [Cloud Discovery Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/plugins/cloud-discovery)
- [Framework Integration Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/plugins/framework-integration)
- [Hazelcast Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/plugins/hazelcast-plugins)
- [Other Integrations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/plugins/other-integrations)
- [Web Session Replication Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/plugins/web-session-replication)
- [Production Checklist | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/production-checklist): The production checklist provides a set of best practices and recommendations to ensure a smooth transition to a production environment which runs a Hazelcast cluster.
- [Indexing Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/query/indexing-maps): Indexes improve the performance of queries on map entries by reducing the number of entries that members need to iterate through.
- [Running Distributed Queries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/query/overview): Explore the tools that Hazelcast offers for running distributed queries.
- [Predicates API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/query/predicate-overview): The Predicates API is a programming interface for querying data in Hazelcast, which is similar to the Java Persistence Query Language (JPQL).
- [5.3.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/release-notes/5-3-0)
- [5.3.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/release-notes/5-3-1)
- [5.3.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/release-notes/5-3-2)
- [5.3.5 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/release-notes/5-3-5)
- [5.3.6 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/release-notes/5-3-6)
- [5.3.7 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/release-notes/5-3-7)
- [5.3.8 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/release-notes/5-3-8)
- [Hazelcast Platform 5.3.X Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/release-notes/releases)
- [Security Hardening Recommendations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/secure-cluster/hardening-recommendations)
- [Security Defaults | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/secure-cluster/security-defaults)
- [Cluster Member Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/security/cluster-member-security)
- [Default authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/security/default-authentication)
- [Enabling JAAS Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/security/enabling-jaas)
- [Encryption | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/security/encryption)
- [FIPS 140-2 | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/security/fips-140-2)
- [Integrating OpenSSL / BoringSSL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/security/integrating-openssl)
- [JAAS authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/security/jaas-authentication)
- [Logging Auditable Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/security/logging-auditable-events)
- [Client Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/security/native-client-security): To protect your members from a malicious client, you can allow them to identify clients and restrict their permissions to access either data in data structures or features such as user code deployment.
- [Security Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/security/overview)
- [Security Debugging | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/security/security-debugging)
- [Security Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/security/security-interceptor)
- [Security Realms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/security/security-realms)
- [Simple Authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/security/simple-authentication)
- [Socket Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/security/socket-interceptor)
- [Other TLS-Related Configurations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/security/tls-configuration)
- [TLS/SSL Basics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/security/tls-ssl)
- [Validating Secrets Using Strength Policy | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/security/validating-secrets)
- [Compact Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/serialization/compact-serialization)
- [Custom Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/serialization/custom-serialization)
- [Global Serializer | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/serialization/global-serializer)
- [Implementing DataSerializable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/serialization/implementing-dataserializable)
- [Implementing HazelcastInstanceAware | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/serialization/implementing-hazelcastinstanceaware)
- [IdentifiedDataSerializable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/serialization/implementing-identifieddataserializable)
- [Implementing Java Serializable and Externalizable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/serialization/implementing-java-serializable)
- [Implementing Portable Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/serialization/implementing-portable-serialization)
- [Serializing Objects and Classes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/serialization/serialization): For data to be sent over a network between cluster members and/or clients, it needs to be serialized into raw bytes. Hazelcast has many serialization options to choose from, depending on what you plan on doing with your data.
- [Configuring Serializers | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/serialization/serialization-configuration): You can configure clusters to be able to serialize and deserialize custom objects and classes as well as override built-in serializers and whitelist certain Java classes.
- [Serializing into JSON | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/serialization/serializing-json): If you want to query JSON strings that are stored in Hazelcast, you can serialize them, using <code>HazelcastJsonValue</code>.
- [Hazelcast Simulator | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/simulator)
- [Adding Caching to Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/spring/add-caching)
- [Spring Best Practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/spring/best-practices)
- [Configuring Hazelcast in Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/spring/configuration)
- [Configuring Hibernate Second-Level Cache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/spring/hibernate)
- [Integrating with Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/spring/overview)
- [Enabling SpringAware Objects | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/spring/springaware)
- [Configuring Hazelcast Transaction Manager | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/spring/transaction-manager)
- [ALTER JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/alter-job): With the <code>ALTER JOB</code> statement, you can suspend, resume, or restart a job that is running on a cluster. You can also update the configuration of a suspended job and resume it.
- [CREATE DATA CONNECTION | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/create-data-connection): The <code>CREATE DATA CONNECTION</code> statement creates the metadata required to connect to an external system for later use.
- [CREATE INDEX | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/create-index): The CREATE INDEX statement creates a sorted, hash, or bitmap index for a given map.
- [CREATE JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/create-job): The CREATE JOB statement submits a job to Hazelcast to run independently of the SQL client. With this statement, you can run a SQL statement in the background.
- [CREATE MAPPING | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/create-mapping): The CREATE MAPPING statement creates a table that stores essential metadata about a source's data model, data connection or connection parameters, and serialization formats so that the SQL service can connect to the data source and query it.
- [CREATE OR REPLACE SNAPSHOT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/create-snapshot): The CREATE OR REPLACE SNAPSHOT statement creates a named snapshot that you can use to start other jobs or keep as a backup.
- [CREATE VIEW | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/create-view): The CREATE VIEW statement creates a virtual table based on the result set of an SQL query. Views can be reused in other queries.
- [SQL Data Types | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/data-types): Hazelcast supports a subset of SQL data types. Each data type is mapped to a Java class, which represents the type's value in Hazelcast.
- [DELETE | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/delete): The DELETE statement deletes map entries that match the condition in a given WHERE clause.
- [DROP DATA CONNECTION | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/drop-data-connection): The <code>DROP DATA CONNECTION</code> statement deletes a data connection. Dropping a data connection affects all existing mappings where the data connection is in use, but will not affect any queries that are already running.
- [DROP JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/drop-job): The DROP JOB statement cancels a job and gives you the option to create a named snapshot from its state.
- [DROP MAPPING | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/drop-mapping): The DROP MAPPING statement removes an existing mapping.
- [DROP SNAPSHOT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/drop-snapshot): The DROP SNAPSHOT statement deletes a named snapshot.
- [DROP VIEW | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/drop-view): The DROP VIEW statement deletes a view.
- [EXPLAIN | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/explain): The EXPLAIN statement returns the execution plan for a given statement, without executing it.
- [Meta-information about Mappings | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/finding-mappings)
- [Expressions, Functions and Operators | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/functions-and-operators): Hazelcast supports a subset of standard SQL expressions, functions, and operators as well as non-standard functions for special cases such as windowed aggregation.
- [Get Started with SQL Over Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/get-started-sql): In this tutorial, you learn the basics of querying maps in SQL by running ad-hoc and batch queries on some test data.
- [Get Started with SQL Over Files | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/get-started-sql-files): In this tutorial, you learn the basics of querying files in SQL by creating and querying a CSV file.
- [Improving the Performance of SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/improving-performance): Use this topic to find advice on improving the performance of slow queries.
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/interactive-sql-files)
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/interactive-sql-kafka)
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/interactive-sql-maps)
- [Get Started with SQL Over Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/learn-sql): In this tutorial, you use an interactive SQL shell on a Hazelcast member to query Kafka topics in real-time.
- [Creating a Mapping to a File System | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/mapping-to-a-file-system): To query data in files, you need to create a mapping to a file, using the unified file connector so that the SQL service knows how to access the data.
- [Mapping to JDBC | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/mapping-to-jdbc): To query external JDBC data stores, you can create a mapping to them with the JDBC connector.
- [Mapping to Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/mapping-to-kafka): To query streams in Kafka topics, you need to create a mapping with the Kafka connector so that the SQL service knows how to access the messages.
- [Mapping to Hazelcast Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/mapping-to-maps): To query entries in maps, you need to create a mapping with the map connector so that the SQL service knows how to access the entries.
- [Mapping to MongoDB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/mapping-to-mongo): To query MongoDB data connections, you can create a mapping to them with the Mongo connector.
- [Using Query Parameters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/parameterized-queries): In Hazelcast clients, you can use query parameters to build safer, faster SQL queries.
- [Querying Maps with SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/querying-maps-sql): You can use SQL to run optimized distributed queries on the keys and values of maps in a local cluster.
- [Stream Processing in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/querying-streams): You can run SQL queries on single streams, join a stream with a table, or join two or more streams.
- [SELECT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/select): The SELECT statement reads data from tables, allowing you to query and process your data based on one or more parameters.
- [SHOW JOBS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/show-jobs): The SHOW JOBS statement displays a sorted list of all named jobs. The list includes any existing jobs that were submitted through the Java API as long as they have a name. The list does not include jobs that have already completed with or without an error.
- [SHOW MAPPINGS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/show-mappings): The SHOW MAPPINGS statement displays a sorted list of all mappings.
- [SHOW RESOURCES | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/show-resources): The <code>SHOW RESOURCES</code> statement displays a list of all resources, along with their data types, that are accessible via a named data connection. These are the resources for which you can create a mapping. Each type of data connection has a unique set of resources. For example:
- [INSERT INTO/SINK INTO | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/sink-into): The <code>INSERT INTO</code>/<code>SINK INTO</code> statements write data to platforms that are connected to Hazelcast through connectors.
- [SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/sql-overview): You can use SQL to query data in maps, Kafka topics, or a variety of file systems. Results can be sent directly to the client or inserted into maps or Kafka topics.
- [SQL Statements | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/sql-statements): Hazelcast supports the following SQL statements. Explore the available statements and find more details about them.
- [Troubleshooting SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/troubleshooting): This topic provides solutions to some common errors in SQL queries.
- [UPDATE | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/update): The UPDATE statement overwrites the values of map entries that match the condition in a given WHERE clause.
- [User-Defined Types in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/user-defined-types)
- [Working with JSON Data in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/sql/working-with-json): In Hazelcast, the SQL service supports ways of working with JSON data: `json-flat`, which does not allow you to query nested keys/values and `json`, which supports nested queries and JSON functions.
- [Backing Up the Persistence Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/storage/backing-up-persistence): You can trigger backups of your persistence store, using the Java API, REST API, or Management Center. Backing up the persistence store is useful if you want to copy the data onto other clusters without having to shut down your cluster.
- [Configuring Persistence | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/storage/configuring-persistence): You can configure clusters to persist data structures, job snapshots, and SQL metadata on disk. You can also implement configuration options to fine-tune backups, encryption, and auto-recovery.
- [Copying Persisted Data onto other Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/storage/copying-persistence): When you persist data on disk, you may want to copy that data onto another cluster to perform testing, QA, or reproduce an issue on production data.
- [High-Density Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/storage/high-density-memory): The High-Density Memory Store is Hazelcast's enterprise in-memory storage solution. It solves garbage collection limitations so that applications can exploit hardware memory more efficiently without the need of oversized clusters.
- [Persistence Performance Benchmark | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/storage/performance): Find summaries of Persistence performance tests that were performed with a single Hazelcast member running on a physical server and on AWS R3.
- [Persisting Data on Disk | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/storage/persistence): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Persistence Design Details | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/storage/persistence-design)
- [Store Persistence Data on Intel® Optane™ DC Persistent Memory | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/storage/persistence-on-intel): In this tutorial, you'll use Intel® Optane™ DC Persistent Memory (PMem) to improve the performance of disk reads and writes, allowing your cluster to access data on disk faster.
- [Triggering a Force-Start | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/storage/triggering-force-start): To recover a cluster that has Persistence enabled after a cluster-wide restart, you can force a cluster to delete their persistence stores when one or more members fail to restart.
- [Triggering a Partial-Start | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/storage/triggering-partial-start): To recover a cluster that has Persistence enabled after a cluster-wide restart, you can force a cluster to start without some members when one or more of them fail.
- [System Properties | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/system-properties)
- [Testing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/test/testing)
- [Testing Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/test/testing-apps)
- [Creating a Transaction Interface | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/transactions/creating-a-transaction-interface)
- [Providing XA Transactions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/transactions/providing-xa-transactions)
- [Error Handling Strategies for Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/troubleshoot/error-handling): Jobs may not run as expected due to I/O errors in sources and sinks, or coding and input data errors in your pipelines. To handle these errors you can use one of the following strategies.
- [Recovery from Client Connection Failures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/troubleshoot/recovery-clients)
- [Recovery from a Partial or Total Failure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/troubleshoot/recovery-members)
- [Actions and Remedies for Alerts | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/troubleshoot/remedies-for-alerts): Find advice for remedies for the Hazelcast alerts.
- [Troubleshooting Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/troubleshoot/troubleshooting): Find advice for troubleshooting issues in your Hazelcast applications or your cluster deployments.
- [Advanced Features | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/wan/advanced-features)
- [Configuring for IMap and ICache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/wan/configuring-for-map-and-cache)
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/wan/defining-wan-replication)
- [Failure Detection and Recovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/wan/failures)
- [WAN Replication Modes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/wan/modes)
- [WAN Quickstart | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/wan/quick-start)
- [REST API for WAN Wrap-Up | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/wan/rest-api)
- [Fine-Tuning WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/wan/tuning)
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.3/wan/wan)
- [Hazelcast Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/): Hazelcast Platform uniquely combines a distributed compute engine and a fast data store in one runtime. It offers unmatched performance, resilience and scale for real-time and AI-driven applications.
- [Hazelcast Architecture | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/architecture/architecture): Hazelcast is a distributed computation and storage platform for consistent low-latency querying, aggregation, and stateful computation against event streams and traditional data sources. This guide outlines how Hazelcast works under the hood to help you understand some important concepts.
- [Data Partitioning and Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/architecture/data-partitioning): Partitioning and replication are two common techniques used together in distributed systems to achieve scalable, available, and transparent data distribution.
- [Design Decisions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/architecture/design-docs)
- [How Hazelcast Models and Executes Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/architecture/distributed-computing): Hazelcast models your pipeline code into a directed acyclic graph (DAG) which consists of stages. Each processing stage accepts the events from upstream stages, processes them, and passes the results to the downstream stage. To run a job, Hazelcast transforms the pipeline DAG into the core DAG. The top-level component that does this is called the planner.
- [How Hazelcast Handles Event Disorder | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/architecture/event-time-processing): To make sure that late events do not slow down jobs, Hazelcast allows you to define a threshold (lag) for how late events can be before they are ignored. To determine a late event, Hazelcast uses distributed watermarks to define the current time and compare it against the configured lag.
- [Cooperative Multithreading | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/architecture/execution-engine)
- [In-Memory Storage | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/architecture/in-memory-storage)
- [Sliding Window Aggregation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/architecture/sliding-window)
- [Caching Data | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/cache/overview): Hazelcast provides APIs and plugins for building distributed caches for your data, including web sessions, database queries, and compute results. Get familiar with Hazelcast as a cache and find useful resources for your use case.
- [Capacity Planning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/capacity-planning): Capacity planning involves estimating and validating the capacity of a cluster in order to determine which recommendations and best practices can help that cluster achieve its best reasonable performance.
- [Hazelcast Command-Line Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clients/clc)
- [C++ Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clients/cplusplus)
- [.NET Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clients/dotnet)
- [Go Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clients/go)
- [Getting Started with a Hazelcast Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clients/hazelcast-clients): Hazelcast has clients in Java, C++, .NET, Node.js, Go, Python, and Memcache. You can use these clients to communicate with cluster members.
- [Java Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clients/java)
- [Memcache Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clients/memcache)
- [Node.js Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clients/nodejs)
- [Python Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clients/python)
- [REST Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clients/rest)
- [Best Practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/cluster-performance/best-practices)
- [Performance Tuning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/cluster-performance/performance-tuning)
- [Accessing Domain Objects Without Domain Classes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clusters/accessing-domain-objects)
- [Creating Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clusters/creating-clusters)
- [Deadline Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clusters/deadline-detector)
- [Deploying User Code from Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clusters/deploying-code-from-clients)
- [Deploying User Code on the Member | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clusters/deploying-code-on-member)
- [Discovering Members by Multicast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clusters/discovering-by-multicast)
- [Discovering Members by TCP | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clusters/discovering-by-tcp)
- [Discovering Java Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clusters/discovering-native-clients)
- [Discovery Mechanisms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clusters/discovery-mechanisms)
- [Failure Detector Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clusters/failure-detector-configuration)
- [Logging Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clusters/logging-configuration)
- [Network Configurations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clusters/network-configuration)
- [Partition Group Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clusters/partition-group-configuration)
- [Phi Accrual Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clusters/phi-accrual-detector)
- [Ping Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clusters/ping-detector)
- [Setting Up Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/clusters/setting-up-clusters)
- [Common Exception Types | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/common-exception-types)
- [Compact Serialization Binary Specification | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/compact-binary-specification): The Compact Serialization Binary Specification defines the binary format of the Compact Serialization, the supported types, and the Compact Schema.
- [Distributed Computing | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/computing/distributed-computing): Explore the tools that Hazelcast offers for distributed computing on cluster members.
- [Durable Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/computing/durable-executor-service)
- [Entry Processor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/computing/entry-processor)
- [Java Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/computing/executor-service)
- [Scheduled Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/computing/scheduled-executor-service)
- [Checking Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/configuration/checking-configuration)
- [Member Configuration Files | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/configuration/configuring-declaratively): You can declare settings for Hazelcast members, using a YAML or XML configuration file. Although Hazelcast members read from a single configuration file, you can store settings in multiple files and import them into a single root file to enable reuse.
- [Configuring Hazelcast in Embedded Mode | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/configuration/configuring-programmatically): You can use a configuration object (config object) to configure members with the Java member API. To create new instances of members, pass the config object to those instances.
- [Configuring with System Properties and Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/configuration/configuring-with-system-properties): You can use xref:ROOT:system-properties.adoc[system properties] and environment variables to configure Hazelcast and override existing settings in a root configuration file. Environment variables are useful for configuring members in containerized environments.
- [Configuring Hazelcast in Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/configuration/configuring-within-spring)
- [Dynamic Configuration for Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/configuration/dynamic-config): You can use dynamic configuration to add new configuration to members at runtime or update some supported configuration such as Enterprise license keys. This feature is useful if you want to configure a running cluster without having to restart the members.
- [Configuring Dynamic Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/configuration/dynamic-config-persistence): You can configure members to keep dynamic configuration changes in memory or persist them to a YAML or XML configuration file.
- [Dynamic Configuration with Programmatic APIs (Java) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/configuration/dynamic-config-programmatic-api): You can use the Java member or client APIs to add dynamic configuration to some supported features at runtime.
- [Updating or Reloading Dynamic Configuration in REST | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/configuration/dynamic-config-update-and-reload): You can use the /config/update and /config/reload REST endpoints to add dynamic configuration for some supported features at runtime.
- [Configuring the Jet Engine | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/configuration/jet-configuration)
- [Configuring JVM Parameters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/configuration/jvm-parameters)
- [Configuration Pattern Matcher | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/configuration/pattern-matcher)
- [Hazelcast Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/configuration/understanding-configuration): To configure a Hazelcast cluster or client, you can choose either static or dynamic configuration. Explore the options and decide which one is best for your application.
- [Using Wildcards | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/configuration/using-wildcards)
- [Best Practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/cp-subsystem/best-practices): Consider the following, a wrap-up of the aforementioned recommendations, to get the best throughput out of your CP Subsystem use case.
- [Configuring CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/cp-subsystem/configuration): You can configure clusters to enable the CP Subsystem as well as fine-tune many other options such as CP groups sizes and persistence of CP state.
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/cp-subsystem/cp-subsystem): CP Subsystem is a component of a Hazelcast cluster that builds a strongly consistent layer for a set of distributed data structures. As well as network partitions, the CP Subsystem withstands server and client failures.
- [Managing and Monitoring the CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/cp-subsystem/management): The CP Subsystem requires manual intervention while expanding or shrinking its size, or when a CP member crashes or becomes unreachable. When a CP member becomes unreachable, it is not automatically removed from CP Subsystem because it could still be active and partitioned away.
- [Making Your Map Data Safe | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/backing-up-maps): Maps are in-memory data structures, which means they are potentially vulnerable to data loss in the event of a system failure. Hazelcast offers several features to minimize the chances of data loss, including in-memory backups and persisted data stores.
- [Cardinality Estimator Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/cardinality-estimator-service)
- [Creating a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/creating-a-map): Maps store data in key/value pairs called entries, which can be one of many data types. To create a map, you just need to give it a name, then write some data to it.
- [Distributed Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/distributed-data-structures)
- [Event Journal | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/event-journal)
- [FencedLock | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/fencedlock)
- [Flake ID Generator | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/flake-id-generator)
- [IAtomicLong | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/iatomiclong)
- [IAtomicReference | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/iatomicreference)
- [ICountDownLatch | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/icountdownlatch)
- [ISemaphore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/isemaphore)
- [List | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/list)
- [Acting Upon Changes to a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/listening-for-map-entries): You can set up monitoring of a map to look for specific events, such as adding an entry, updating a specific entry, or deleting an entry. You can use these events to trigger execution of code, or even intercept the event and change it before it affects the data in memory.
- [Locking Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/locking-maps): Although maps are thread-safe, you may prefer to have manual control over which members have access to a map entry at a given time. Hazelcast offers two ways of locking map entries: pessimistic locking and optimistic locking.
- [Managing Map Memory | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/managing-map-memory): Depending on how you use maps, they may become too large for your cluster's memory, or the data may become stale and useless to your applications. To handle these situations, you can set expiration and eviction policies.
- [Distributed Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/map): Distributed maps, also known as maps or IMaps, are key-value pairs that are partitioned across a cluster. Use maps to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/map-config): Map configuration is part of the overall Hazelcast server configuration. When you create your map, it inherits the configuration that is set up on the server. It is important to plan your map configuration ahead of time, as you cannot change the configuration of a map once it is created without restarting your entire cluster.
- [MultiMap | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/multimap)
- [PN Counter | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/pn-counter)
- [Preventing Out of Memory Exceptions when Querying a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/preventing-out-of-memory): Query-based map methods such as entrySet()` may trigger an out of memory exception (OOME), depending on the size of your map and the available memory of each member. To prevent these exceptions, you can configure your cluster to limit query results.
- [Priority Queue | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/priority-queue)
- [Queue | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/queue)
- [Reading Data From a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/reading-a-map): Data in a map is distributed among members in a Hazelcast cluster. To read entries from a map, you can use simple get requests, distributed queries, or use the map as a source in a data pipeline.
- [Reading Map Metrics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/reading-map-metrics): By default, you can read metrics for a given map, such as the primary and backup entry count, last update time, and locked entry count on each member of your cluster. You can access these statistics for the entire map, for the map entries on a specific cluster member, or specific map entries.
- [Reliable Topic | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/reliable-topic)
- [Replicated Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/replicated-map)
- [Ringbuffer | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/ringbuffer)
- [Set | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/set)
- [Setting the In-Memory Format of Map Entries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/setting-data-format): The in-memory format you set to store your data can have a significant impact on the performance of your application. When data is moved either between a client and the Hazelcast cluster or between cluster members, it is always in serialized (binary) format. Depending on your use case, it may be more efficient to store the data in that serialiized format, either on-heap or off-heap, or deserialize it back to the original object format.
- [Topic | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/topic)
- [Updating Map Entries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/data-structures/updating-map-entries): Maps are not static. You can update or remove individual map entries, a group of map entries, or the entire map.
- [Choosing an Application Topology | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/deploy/choosing-a-deployment-option): Hazelcast offers two topologies to use Hazelcast: embedded in a Java application or in a client/server topology. To help you choose a topology that meets your requirements, this topic describes each option.
- [Public Clouds | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/deploy/deploying-in-cloud): Deploy a Hazelcast cluster in cloud environments including Hazelcast Cloud, Amazon AWS, Google Cloud Platform, and Azure.
- [Deploying a Cluster on Amazon AWS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/deploy/deploying-on-aws): Deploy Hazelcast clusters on Amazon AWS EC2 and AWS ECS/Fargate environments and allow them to discover each other automatically.
- [Deploying a Cluster on Microsoft Azure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/deploy/deploying-on-azure): Deploy Hazelcast clusters on Azure and allow them to discover each other automatically.
- [Deploying a Cluster on Google Cloud Platform | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/deploy/deploying-on-gcp): Deploy Hazelcast clusters on Google Cloud Platform and allow them to discover each other automatically.
- [Deploying on Docker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/deploy/deploying-with-docker): In this deployment guide, you will learn how to form a cluster from Hazelcast member containers running on more than one Docker host in the same local area network (LAN).
- [Managing Enterprise License Keys | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/deploy/enterprise-licenses): To use Hazelcast Enterprise, you need an Enterprise license key. This topic explains how to get a license key, install it on a member, and manage it.
- [Supported Versions and Compatibilities | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/deploy/versioning-compatibility): This section provides the supported versions and interoperability of Hazelcast Platform and its modules.
- [Cluster Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/events/cluster-events)
- [Listening to Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/events/distributed-events)
- [Event Listeners for Hazelcast Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/events/event-listeners-for-clients)
- [Global Event Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/events/global-event-configuration)
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/events/object-events)
- [Config Properties SPI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/extending-hazelcast/config-properties-spi)
- [Discovery SPI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/extending-hazelcast/discovery-spi)
- [Extending Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/extending-hazelcast/extending-hazelcast)
- [OperationParker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/extending-hazelcast/operationparker)
- [Configuring Connections to External Data Stores | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/external-data-stores/external-data-stores): You can define reusable connections to external data stores in your members' configuration files or with the Java member API. When you have a configured connection, you can then use it in the Pipeline API, SQL mappings, and MapStores.
- [Frequently Asked Questions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/faq)
- [Backups | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/fault-tolerance/backups)
- [Fault Tolerance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/fault-tolerance/fault-tolerance)
- [Timeouts | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/fault-tolerance/timeouts)
- [Authenticate Client Connections | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/getting-started/authenticate-clients): This tutorial introduces you to member security by setting up authentication for client connections. At the end of this tutorial, you'll know how to configure member and client security settings to allow only authorized clients to connect to a cluster.
- [Deploy Blue-Green Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/getting-started/blue-green): This tutorial introduces you to blue-green cluster deployments. At the end of this tutorial, you'll know how to set up a client to operate continuously even when its connected to a cluster that fails.
- [Hazelcast Editions and Distributions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/getting-started/editions): Hazelcast offers Enterprise and Open Source editions of its member software, each available as either a full or slim distribution.
- [Get Started with Hazelcast Enterprise | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/getting-started/enterprise-overview): This series of tutorials showcases some of the most useful features of Hazelcast Enterprise.
- [Start a Local Cluster from Binary | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/getting-started/get-started-binary): This tutorial introduces you to Hazelcast in a client/server topology. At the end of this tutorial, you'll know how to start a cluster from the binary distribution, store data in memory, visualize your data and more.
- [Start a Local Cluster with the CLI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/getting-started/get-started-cli): Follow this five-minute tutorial to set up a Hazelcast cluster for testing or evaluation purposes. In five minutes, you will learn how to install Hazelcast with a package manager, start a local cluster with the CLI, write data to memory and visualize that data.
- [Start a Local Cluster in Docker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/getting-started/get-started-docker): This tutorial introduces you to Hazelcast in a client/server topology. At the end of this tutorial, you'll know how to start a cluster in a single Docker host, store data in memory, visualize your data and more.
- [Start a Local Embedded Cluster | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/getting-started/get-started-java): This tutorial introduces you to Hazelcast in an embedded topology. At the end of this tutorial, you'll know how to start a cluster in your Java application and store data in memory.
- [Installing Hazelcast Enterprise | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/getting-started/install-enterprise): To install Hazelcast Enterprise, you can use Docker, the binary, or Java. To unlock the Enterprise features, you must install your Enterprise license key.
- [Installing Hazelcast Open Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/getting-started/install-hazelcast): You can install the Open Source edition of Hazelcast, using the command line interface (CLI), Docker, the binary, or Java.
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/getting-started/interactive-quickstart)
- [Persist Map Entries on Disk | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/getting-started/persistence): This tutorial introduces you to Hazelcast with Persistence enabled. At the end of this tutorial, you'll know how to enable Persistence for a map in your cluster and see the recovery of the map entries after a cluster shutdown.
- [Developer Resources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/getting-started/resources)
- [Getting Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/getting-started/support): Hazelcast provides two types of support: one for the community and one for paying customers.
- [Replicate a Map over Clusters in a WAN | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/getting-started/wan): This tutorial introduces you to WAN Replication by replicating map entries across two clusters: London and Tokyo. At the end of this tutorial, you'll know how to synchronize a map from one cluster to another.
- [Glossary | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/glossary)
- [Ingesting Data from External Sources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/ingest/overview): Explore the tools that Hazelcast offers for data ingestion from both on-premise systems as well as cloud deployments.
- [CDC Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/cdc-connectors)
- [Connector Guides | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/connectors): Hazelcast comes out of the box with many different connectors for accessing data in a variety of platforms. These connectors are configured to read and write data in the most efficient way for their respective system. Explore the available connectors and choose one for your use case.
- [Custom Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/custom-connectors)
- [Data Structure Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/data-structure-connectors): Data structure connectors allow you to access data stored in Hazelcast data structures. Use these connectors to integrate Hazelcast data structures into your pipelines as sources or sinks.
- [Connectors for Databases | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/database-connectors)
- [Elasticsearch Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/elasticsearch-connector)
- [Unified File Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/file-connector): The unified file connector provides a simple way to read files across different sources. Using this connector, you can read files from the local filesystem, HDFS and cloud storage systems such as Amazon S3, Google Cloud Storage or Azure Blob Storage. This connector supports various data formats, including text files, CSV, JSON, and Avro.
- [HTTP Listener Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/http-connector)
- [InfluxDB Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/influxdb-connector)
- [JCache Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/jcache-connector): The JCache connector is mostly equivalent to the map connector, the main difference being that the JCache connector is compliant with the JCache standard API. As a sink, since JCache doesn't support entry processors, only the default variant is available.
- [JDBC Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/jdbc-connector)
- [JMS Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/jms-connector)
- [Apache Kafka Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/kafka-connector): The Kafka connector allows you to stream, filter, and transform events between Hazelcast clusters and Kafka.
- [Amazon Kinesis Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/kinesis-connector)
- [Legacy File Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/legacy-file-connector): The legacy file connector allows you to read and write to files, using the Jet API. This connector is still maintained, but all new development goes into the unified file connector.
- [List Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/list-connector)
- [Map Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/map-connector): A map is a distributed in-memory key-value data structure that can be used as a batch or streaming data source as well as a data sink.
- [Connectors for Messaging Systems | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/messaging-system-connectors)
- [MongoDB Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/mongodb-connector)
- [Observable Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/observable-connector): The observable connector provides a way of receiving query results on the same client that submitted a job. This connector is useful when you are using the Jet API for ad-hoc queries and you want to use your client as a sink.
- [Apache Pulsar Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/pulsar-connector)
- [Redis Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/redis-connector)
- [Reliable Topic Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/reliable-topic-connector)
- [Socket Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/socket-connector)
- [Test Source Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/test-connectors): Test sources make it convenient to get started with pipelines without having to use an actual data source. They can also be used for unit testing different pipelines where you can expect a more deterministic import.
- [Twitter Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/integrate/twitter-connector)
- [JCache API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/jcache/api)
- [JCache - Hazelcast Instance Integration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/jcache/hazelcast-integration)
- [Hazelcast JCache Extension - ICache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/jcache/icache)
- [Hazelcast JCache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/jcache/jcache)
- [JCache Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/jcache/overview)
- [JCache Providers | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/jcache/providers)
- [JCache Setup and Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/jcache/setup)
- [Testing for JCache Specification Compliance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/jcache/tck)
- [Deploying on Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/kubernetes/deploying-in-kubernetes): Discover ways to deploy Hazelcast clusters in Kubernetes environments.
- [Adding custom JAR files to the Platform/Management Center Classpath | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/kubernetes/helm-adding-custom-jar)
- [Configuring SSL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/kubernetes/helm-configuring-ssl)
- [Dynamic Persistence Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/kubernetes/helm-dynamic-persistence-configuration)
- [Enabling External Access to Cluster | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/kubernetes/helm-enabling-external-access)
- [Deploying Hazelcast Open Source on Kubernetes with Helm | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/kubernetes/helm-hazelcast-chart): This chart bootstraps a link:https://github.com/hazelcast/hazelcast-docker/tree/master/hazelcast-oss[Hazelcast] and link:https://github.com/hazelcast/management-center-docker[Management Center] deployments on a link:http://kubernetes.io[Kubernetes] cluster using the link:https://helm.sh[Helm] package manager.
- [Deploying Hazelcast Enterprise on Kubernetes with Helm | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/kubernetes/helm-hazelcast-enterprise-chart): This chart bootstraps a link:https://github.com/hazelcast/hazelcast-docker/tree/master/hazelcast-enterprise[Hazelcast Enterprise] and link:https://github.com/hazelcast/management-center-docker[Management Center] deployments on a link:http://kubernetes.io[Kubernetes] cluster using the link:https://helm.sh[Helm] package manager.
- [Kubernetes Auto Discovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/kubernetes/kubernetes-auto-discovery): Before you start a Hazelcast cluster in Kubernetes, it's important to configure settings to ensure that members can form a cluster and to prevent any unexpected data loss.
- [Troubleshooting and Limitations in Kubernetes Environments | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/kubernetes/troubleshooting-and-limitations): Find advice for troubleshooting issues you might face while deploying Hazelcast via Helm.
- [List of Hazelcast Metrics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/list-of-metrics)
- [Cluster and Member States | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/maintain-cluster/cluster-member-states): Cluster states determine what cluster operations are available. By changing the state of a cluster, you can grant or restrict cluster operations such as repartitioning as well as change the behavior of those operations.
- [Enabling Lite Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/maintain-cluster/lite-members)
- [Configuring Logging | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/maintain-cluster/logging): Options available for the logging mechanism of Hazelcast clusters.
- [Filtering Members with Attributes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/maintain-cluster/member-attributes)
- [Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/maintain-cluster/monitoring): Options available for monitoring the health and operations of Hazelcast clusters.
- [REST API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/maintain-cluster/rest-api)
- [Rolling Upgrades | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/maintain-cluster/rolling-upgrades): You can use rolling upgrades to upgrade the version of Hazelcast members in a running cluster without interrupting the operation of the cluster.
- [Shutting Down Members and Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/maintain-cluster/shutdown): Maintaining a cluster often requires shutting down clusters or individual members to make changes take effect. Hazelcast offers convenient methods for shutting down clusters as well as graceful and ungraceful options for specific members.
- [Cluster Utilities | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/management/cluster-utilities)
- [Configuring a MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/mapstore/configuration-guide): MapStores connect to an external data store only when they are configured on a map. This topic explains how to configure a map with a MapStore.
- [Configuring a Map with the Generic MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/mapstore/configuring-a-generic-mapstore): With the xref:working-with-external-data.adoc#options[generic MapStore], you can configure a map to cache data in an external data store. This topic includes an example of how to configure a map with a generic MapStore that connects to a MySQL database.
- [Implementing a Custom MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/mapstore/implement-a-mapstore): You can use the Java <code>MapStore</code> and <code>MapLoader</code> interfaces to implement a custom MapStore with your own logic such as for database connections, loading data from a data store, and writing data to a data store.
- [Map Operations that Trigger Methods on a MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/mapstore/mapstore-triggers): These are the map operations that trigger methods on a configured MapStore.
- [Building a Cache with MapStore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/mapstore/working-with-external-data): MapStore is an API for building a cache on top of Hazelcast. The MapStore interface includes methods that are triggered when operations are invoked on a map. MapStores connect to a data store, load data from it, and write data back to it. For example, you can use a MapStore to load data into your cluster from a MongoDB, MySQL, or PostgreSQL database.
- [Migrating Data from IMDG 3.12.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/migrate/migration-tool-imdg): This guide explains how to migrate data in maps or JCache data structures from a running IMDG 3.12.x cluster to a Hazelcast 5.x cluster.
- [Upgrading from IMDG 3.12.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/migrate/upgrading-from-imdg-3)
- [Upgrading from IMDG 4.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/migrate/upgrading-from-imdg-4): This guide covers the most important changes that affect users of IMDG 4.x who want to upgrade to Hazelcast.
- [Upgrading from Jet | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/migrate/upgrading-from-jet): This guide covers the most important changes that affect users of Jet 4.x who want to upgrade to Hazelcast.
- [Dealing with Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/network-partitioning/dealing-with-network-partitions)
- [Network Partitioning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/network-partitioning/network-partitioning)
- [Partial Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/network-partitioning/partial-network-partitions)
- [Split-Brain Protection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/network-partitioning/split-brain-protection)
- [Split-Brain Recovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/network-partitioning/split-brain-recovery)
- [API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/osgi/api)
- [Configuring Hazelcast OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/osgi/configuring-osgi-support)
- [Design | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/osgi/design)
- [OSGI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/osgi/osgi)
- [OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/osgi/osgi-support)
- [Using Hazelcast OSGI Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/osgi/using-osgi-service)
- [Back Pressure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/performance/back-pressure)
- [Performance Anti Patterns | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/performance/best-practices)
- [Caching Deserialized Values | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/performance/caching-deserialized-values)
- [CPU Thread Affinity | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/performance/cpu-thread-affinity)
- [Data Affinity | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/performance/data-affinity)
- [Near Cache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/performance/near-cache)
- [Performance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/performance/performance)
- [Pipelining | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/performance/pipelining)
- [Running on EC2 | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/performance/running-on-ec2)
- [SlowOperationDetector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/performance/slowoperationdetector)
- [Threading Model | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/performance/threading-model)
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/phone-homes)
- [About Stream Processing Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/building-pipelines): Streaming jobs are those that process a infinite amount of data such as a continuous event stream. Because these jobs continue to run until they are canceled, you must use timestamps to define time windows in which to collect events.
- [Capture Changes from MySQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/cdc)
- [Setting Up a Database for Change Data Capture | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/cdc-database-setup)
- [Join Change Data Capture Records | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/cdc-join)
- [Change Data Capture (CDC) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/cdc-overview): Change Data Capture (CDC) is a pipeline pattern for observing changes made to a database and extracting them in a form usable by other systems, for the purposes of replication, analysis and more.
- [Capture Changes from PostgreSQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/cdc-postgres)
- [Configuring Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/configuring-jobs): Before submitting a job to a cluster, you can configure its name, whether to record metrics, and how it behaves when cluster members fail.
- [Building a Custom Aggregate Operation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/custom-aggregate-operation)
- [Adding Batching to a Custom Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/custom-batch-source): To improve the throughput of your custom sources, you can add batching to reads.
- [Create a Custom Sink | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/custom-sink)
- [Creating a Custom Streaming Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/custom-stream-source): If Hazelcast is missing a built-in source that you want to use, you can build your own, using the Jet API.
- [Extract Transform Load (ETL) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/etl-overview): ETL is a pipeline pattern for collecting data from various sources, transforming (changing) it to conform to some rules, and loading it into a sink. This pattern is often used to form materialized views where data is processed and put into a Hazelcast map for fast in-memory queries.
- [Stream Processing and Event Timestamps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/event-time)
- [Mapping Data in a Pipeline Using a a gRPC Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/grpc): When processing data in a pipeline, you can use an external service to execute a function on input data, and pass the output to the next stage of pipeline. A popular way of exposing external services is to use the gRPC protocol.
- [Ingesting Data from Sources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/ingesting-from-sources): In order to process data, you first need to ingest it into your pipeline, using one or more sources.
- [Managing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/job-management): Once a job is submitted, it has its own lifecycle on the cluster which is distinct from the submitter. To manage the lifecycle of jobs, you can use either SQL or CLI commands to list, cancel, suspend, resume, and restart them.
- [Securing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/job-security): While submitting jobs, you can upload custom code that bypasses client permissions. Jobs also have access to data outside of Hazelcast such as files on the device that's running a member. As a result, it's important to be aware of how to secure your Hazelcast member against malicious jobs.
- [Updating Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/job-update): Update streaming jobs without losing computation state.
- [Connect to Apache Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/kafka)
- [Connect to Amazon Kinesis | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/kinesis)
- [Enrich a Stream | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/map-join): In this tutorial, you build a pipeline that takes a stream of trades from a stock exchange and enriches it with a full company name for nicer presentation. Each trade contains a stock symbol, also known as ticker, which uniquely identifies the stock. You will use the ticker to look up the full company name in a replicated map.
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/object-events)
- [Receiving Pipeline Results on the Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/observables)
- [About Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/overview): Learn about the core concepts of data pipelines and how you can build your own with the Hazelcast Jet engine.
- [Group Messages from Apache Pulsar | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/pulsar)
- [Apply a Custom Transform with Python | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/python)
- [Sending Results to Sinks | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/sending-data-to-sinks): After defining the processing steps in a pipeline, you must send the results to at least one destination called a sink. Hazelcast comes with built-in sinks as well as a public API for building your own.
- [Serializing Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/serialization)
- [Spring Boot Starter | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/spring-boot)
- [Subscribe to Changes to a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/stream-imap)
- [Get Started with Stream Processing (Client/Server) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/stream-processing-client): This tutorial shows you how to use a Hazelcast cluster as a data processing engine for your client applications. At the end of this tutorial, you'll know how to build a data pipeline in Java and submit it as a job to your Hazelcast cluster.
- [Get Started with Stream Processing (Embedded) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/stream-processing-embedded): This tutorial shows you how to use Hazelcast as a streaming engine that's embedded in your Java application. At the end of this tutorial, you'll know how to ingest data from some test sources and filter it continuously to generate results in real time.
- [Submitting Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/submitting-jobs): Submit data pipelines to a Hazelcast cluster for execution.
- [Transforms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/transforms): Hazelcast offers several transforms which can be used to process data. Explore the available transforms and learn how to use them.
- [Apply Windowed Aggregation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/windowing)
- [Testing Sources and Sinks for XA Transaction Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/pipelines/xa): In order to have end-to-end exactly-once processing in pipelines, sources and sinks need to support it too. Although many sources and sinks ensure atomicity (all distributed participants either commit the transaction or roll back), some do not survive a client disconnection. You can test whether a source or a sink will survive a client disconnection, using either JDBC or Java Messaging Service (JMS).
- [Cloud Discovery Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/plugins/cloud-discovery)
- [Framework Integration Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/plugins/framework-integration)
- [Hazelcast Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/plugins/hazelcast-plugins)
- [Other Integrations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/plugins/other-integrations)
- [Web Session Replication Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/plugins/web-session-replication)
- [Production Checklist | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/production-checklist): The production checklist provides a set of best practices and recommendations to ensure a smooth transition to a production environment which runs a Hazelcast cluster.
- [Indexing Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/query/indexing-maps): Indexes improve the performance of queries on map entries by reducing the number of entries that members need to iterate through.
- [Running Distributed Queries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/query/overview): Explore the tools that Hazelcast offers for running distributed queries.
- [Predicates API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/query/predicate-overview): The Predicates API is a programming interface for querying data in Hazelcast, which is similar to the Java Persistence Query Language (JPQL).
- [5.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/release-notes/5-2-0)
- [5.2.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/release-notes/5-2-1)
- [5.2.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/release-notes/5-2-2)
- [5.2.3 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/release-notes/5-2-3)
- [5.2.4 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/release-notes/5-2-4)
- [5.2.5 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/release-notes/5-2-5)
- [Hazelcast Platform 5.2.X Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/release-notes/releases)
- [Security Hardening Recommendations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/secure-cluster/hardening-recommendations)
- [Security Defaults | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/secure-cluster/security-defaults)
- [Cluster Member Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/security/cluster-member-security)
- [Default authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/security/default-authentication)
- [Enabling JAAS Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/security/enabling-jaas)
- [Encryption | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/security/encryption)
- [FIPS 140-2 | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/security/fips-140-2)
- [Integrating OpenSSL / BoringSSL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/security/integrating-openssl)
- [JAAS authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/security/jaas-authentication)
- [Logging Auditable Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/security/logging-auditable-events)
- [Client Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/security/native-client-security): To protect your members from a malicious client, you can allow them to identify clients and restrict their permissions to access either data in data structures or features such as user code deployment.
- [Security Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/security/overview)
- [Security Debugging | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/security/security-debugging)
- [Security Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/security/security-interceptor)
- [Security Realms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/security/security-realms)
- [Simple Authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/security/simple-authentication)
- [Socket Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/security/socket-interceptor)
- [Other TLS-Related Configurations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/security/tls-configuration)
- [TLS/SSL Basics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/security/tls-ssl)
- [Validating Secrets Using Strength Policy | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/security/validating-secrets)
- [Compact Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/serialization/compact-serialization)
- [Custom Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/serialization/custom-serialization)
- [Global Serializer | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/serialization/global-serializer)
- [Implementing DataSerializable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/serialization/implementing-dataserializable)
- [Implementing HazelcastInstanceAware | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/serialization/implementing-hazelcastinstanceaware)
- [IdentifiedDataSerializable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/serialization/implementing-identifieddataserializable)
- [Implementing Java Serializable and Externalizable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/serialization/implementing-java-serializable)
- [Implementing Portable Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/serialization/implementing-portable-serialization)
- [Serializing Objects and Classes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/serialization/serialization): For data to be sent over a network between cluster members and/or clients, it needs to be serialized into raw bytes. Hazelcast has many serialization options to choose from, depending on what you plan on doing with your data.
- [Configuring Serializers | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/serialization/serialization-configuration): You can configure clusters to be able to serialize and deserialize custom objects and classes as well as override built-in serializers and whitelist certain Java classes.
- [Serializing into JSON | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/serialization/serializing-json): If you want to query JSON strings that are stored in Hazelcast, you can serialize them, using <code>HazelcastJsonValue</code>.
- [Hazelcast Simulator | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/simulator)
- [Adding Caching to Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/spring/add-caching)
- [Spring Best Practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/spring/best-practices)
- [Configuring Hazelcast in Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/spring/configuration)
- [Configuring Hibernate Second-Level Cache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/spring/hibernate)
- [Integrating with Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/spring/overview)
- [Enabling SpringAware Objects | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/spring/springaware)
- [Configuring Hazelcast Transaction Manager | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/spring/transaction-manager)
- [ALTER JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/alter-job): The ALTER JOB statement can supend, resume, or restart a job that is running on a cluster.
- [CREATE INDEX | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/create-index): The CREATE INDEX statement creates a sorted, hash, or bitmap index for a given map.
- [CREATE JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/create-job): The CREATE JOB statement submits a job to Hazelcast to run independently of the SQL client. With this statement, you can run a SQL statement in the background.
- [CREATE MAPPING | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/create-mapping): The CREATE MAPPING statement creates a table that stores essential metadata about a source's data model, connection parameters, and serialization formats so that the SQL service can connect to the data source and query it.
- [CREATE OR REPLACE SNAPSHOT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/create-snapshot): The CREATE OR REPLACE SNAPSHOT statement creates a named snapshot that you can use to start other jobs or keep as a backup.
- [CREATE VIEW | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/create-view): The CREATE VIEW statement creates a virtual table based on the result set of an SQL query. Views can be reused in other queries.
- [SQL Data Types | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/data-types): Hazelcast supports a subset of SQL data types. Each data type is mapped to a Java class, which represents the type's value in Hazelcast.
- [DELETE | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/delete): The DELETE statement deletes map entries that match the condition in a given WHERE clause.
- [DROP JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/drop-job): The DROP JOB statement cancels a job and gives you the option to create a named snapshot from its state.
- [DROP MAPPING | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/drop-mapping): The DROP MAPPING statement removes an existing mapping.
- [DROP SNAPSHOT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/drop-snapshot): The DROP SNAPSHOT statement deletes a named snapshot.
- [DROP VIEW | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/drop-view): The DROP VIEW statement deletes a view.
- [EXPLAIN | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/explain): The EXPLAIN statement returns the execution plan for a given statement, without executing it.
- [Meta-information about Mappings | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/finding-mappings)
- [Expressions, Functions and Operators | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/functions-and-operators): Hazelcast supports a subset of standard SQL expressions, functions, and operators as well as non-standard functions for special cases such as windowed aggregation.
- [Get Started with SQL Over Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/get-started-sql): In this tutorial, you learn the basics of querying maps in SQL by running ad-hoc and batch queries on some test data.
- [Get Started with SQL Over Files | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/get-started-sql-files): In this tutorial, you learn the basics of querying files in SQL by creating and querying a CSV file.
- [Improving the Performance of SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/improving-performance): Use this topic to find advice on improving the performance of slow queries.
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/interactive-sql-files)
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/interactive-sql-kafka)
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/interactive-sql-maps)
- [Get Started with SQL Over Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/learn-sql): In this tutorial, you use an interactive SQL shell on a Hazelcast member to query Kafka topics in real-time.
- [Creating a Mapping to a File System | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/mapping-to-a-file-system): To query data in files, you need to create a mapping to a file, using the unified file connector so that the SQL service knows how to access the data.
- [Mapping to JDBC | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/mapping-to-jdbc): To query external JDBC data stores, you can create a mapping to them with the JDBC connector.
- [Mapping to Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/mapping-to-kafka): To query streams in Kafka topics, you need to create a mapping with the Kafka connector so that the SQL service knows how to access the messages.
- [Mapping to Hazelcast Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/mapping-to-maps): To query entries in maps, you need to create a mapping with the map connector so that the SQL service knows how to access the entries.
- [Using Query Parameters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/parameterized-queries): In Hazelcast clients, you can use query parameters to build safer, faster SQL queries.
- [Querying Maps with SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/querying-maps-sql): You can use SQL to run optimized distributed queries on the keys and values of maps in a local cluster.
- [Stream Processing in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/querying-streams): You can run SQL queries on single streams, join a stream with a table, or join two or more streams.
- [SELECT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/select): The SELECT statement reads data from tables, allowing you to query and process your data based on one or more parameters.
- [SHOW JOBS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/show-jobs): The SHOW JOBS statement displays a sorted list of all named jobs. The list includes any existing jobs that were submitted through the Java API as long as they have a name. The list does not include jobs that have already completed with or without an error.
- [SHOW MAPPINGS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/show-mappings): The SHOW MAPPINGS statement displays a sorted list of all mappings.
- [INSERT INTO/SINK INTO | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/sink-into): The <code>INSERT INTO</code>/<code>SINK INTO</code> statements write data to platforms that are connected to Hazelcast through connectors.
- [SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/sql-overview): You can use SQL to query data in maps, Kafka topics, or a variety of file systems. Results can be sent directly to the client or inserted into maps or Kafka topics.
- [SQL Statements | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/sql-statements): Hazelcast supports the following SQL statements. Explore the available statements and find more details about them.
- [Troubleshooting SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/troubleshooting): This topic provides solutions to some common errors in SQL queries.
- [UPDATE | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/update): The UPDATE statement overwrites the values of map entries that match the condition in a given WHERE clause.
- [User-Defined Types in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/user-defined-types)
- [Working with JSON Data in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/sql/working-with-json): In Hazelcast, the SQL service supports ways of working with JSON data: `json-flat`, which does not allow you to query nested keys/values and `json`, which supports nested queries and JSON functions.
- [Backing Up the Persistence Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/storage/backing-up-persistence): You can trigger backups of your persistence store, using the Java API, REST API, or Management Center. Backing up the persistence store is useful if you want to copy the data onto other clusters without having to shut down your cluster.
- [Configuring Persistence | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/storage/configuring-persistence): You can configure clusters to persist data structures and job snapshots on disk as well as fine-tune many other options such as backups, encryption, and auto-recovery.
- [Copying Persisted Data onto other Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/storage/copying-persistence): When you persist data on disk, you may want to copy that data onto another cluster to perform testing, QA, or reproduce an issue on production data.
- [High-Density Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/storage/high-density-memory): The High-Density Memory Store is Hazelcast's enterprise in-memory storage solution. It solves garbage collection limitations so that applications can exploit hardware memory more efficiently without the need of oversized clusters.
- [Persistence Performance Benchmark | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/storage/performance): Find summaries of Persistence performance tests that were performed with a single Hazelcast member running on a physical server and on AWS R3.
- [Persisting Data on Disk | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/storage/persistence): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Persistence Design Details | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/storage/persistence-design)
- [Store Persistence Data on Intel® Optane™ DC Persistent Memory | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/storage/persistence-on-intel): In this tutorial, you'll use Intel® Optane™ DC Persistent Memory (PMem) to improve the performance of disk reads and writes, allowing your cluster to access data on disk faster.
- [Triggering a Force-Start | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/storage/triggering-force-start): To recover a cluster that has Persistence enabled after a cluster-wide restart, you can force a cluster to delete their persistence stores when one or more members fail to restart.
- [Triggering a Partial-Start | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/storage/triggering-partial-start): To recover a cluster that has Persistence enabled after a cluster-wide restart, you can force a cluster to start without some members when one or more of them fail.
- [System Properties | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/system-properties)
- [Testing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/test/testing)
- [Testing Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/test/testing-apps)
- [Creating a Transaction Interface | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/transactions/creating-a-transaction-interface)
- [Providing XA Transactions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/transactions/providing-xa-transactions)
- [Error Handling Strategies for Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/troubleshoot/error-handling): Jobs may not run as expected due to I/O errors in sources and sinks, or coding and input data errors in your pipelines. To handle these errors you can use one of the following strategies.
- [Recovery from Client Connection Failures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/troubleshoot/recovery-clients)
- [Recovery from a Partial or Total Failure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/troubleshoot/recovery-members)
- [Actions and Remedies for Alerts | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/troubleshoot/remedies-for-alerts): Find advice for remedies for the Hazelcast alerts.
- [Troubleshooting Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/troubleshoot/troubleshooting): Find advice for troubleshooting issues in your Hazelcast applications or your cluster deployments.
- [Advanced Features | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/wan/advanced-features)
- [Configuring for IMap and ICache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/wan/configuring-for-map-and-cache)
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/wan/defining-wan-replication)
- [Failure Detection and Recovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/wan/failures)
- [WAN Replication Modes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/wan/modes)
- [WAN Quickstart | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/wan/quick-start)
- [REST API for WAN Wrap-Up | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/wan/rest-api)
- [Fine-Tuning WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/wan/tuning)
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.2/wan/wan)
- [Hazelcast Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/): Hazelcast Platform uniquely combines a distributed compute engine and a fast data store in one runtime. It offers unmatched performance, resilience and scale for real-time and AI-driven applications.
- [Hazelcast Architecture | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/architecture/architecture): Hazelcast is a distributed computation and storage platform for consistent low-latency querying, aggregation, and stateful computation against event streams and traditional data sources. This guide outlines how Hazelcast works under the hood to help you understand some important concepts.
- [Data Partitioning and Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/architecture/data-partitioning): Partitioning and replication are two common techniques used together in distributed systems to achieve scalable, available, and transparent data distribution.
- [Design Decisions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/architecture/design-docs)
- [How Hazelcast Models and Executes Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/architecture/distributed-computing): Hazelcast models your pipeline code into a directed acyclic graph (DAG) which consists of stages. Each processing stage accepts the events from upstream stages, processes them, and passes the results to the downstream stage. To run a job, Hazelcast transforms the pipeline DAG into the core DAG. The top-level component that does this is called the planner.
- [How Hazelcast Handles Event Disorder | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/architecture/event-time-processing): To make sure that late events do not slow down jobs, Hazelcast allows you to define a threshold (lag) for how late events can be before they are ignored. To determine a late event, Hazelcast uses distributed watermarks to define the current time and compare it against the configured lag.
- [Cooperative Multithreading | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/architecture/execution-engine)
- [In-Memory Storage | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/architecture/in-memory-storage)
- [Sliding Window Aggregation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/architecture/sliding-window)
- [Caching Data | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/cache/overview): Hazelcast provides APIs and plugins for building distributed caches for your data, including web sessions, database queries, and compute results. Get familiar with Hazelcast as a cache and find useful resources for your use case.
- [Capacity Planning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/capacity-planning): Capacity planning involves estimating and validating the capacity of a cluster in order to determine which recommendations and best practices can help that cluster achieve its best reasonable performance.
- [C++ Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clients/cplusplus)
- [.NET Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clients/dotnet)
- [Go Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clients/go)
- [Getting Started with a Hazelcast Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clients/hazelcast-clients): Hazelcast has clients in Java, C++, .NET, Node.js, Go, Python, and Memcache. You can use these clients to communicate with cluster members.
- [Java Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clients/java)
- [Memcache Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clients/memcache)
- [Node.js Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clients/nodejs)
- [Python Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clients/python)
- [REST Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clients/rest)
- [Best Practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/cluster-performance/best-practices)
- [Performance Tuning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/cluster-performance/performance-tuning)
- [Accessing Domain Objects Without Domain Classes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clusters/accessing-domain-objects)
- [Creating Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clusters/creating-clusters)
- [Deadline Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clusters/deadline-detector)
- [Deploying User Code from Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clusters/deploying-code-from-clients)
- [Deploying User Code on the Member | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clusters/deploying-code-on-member)
- [Discovering Members by Multicast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clusters/discovering-by-multicast)
- [Discovering Members by TCP | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clusters/discovering-by-tcp)
- [Discovering Java Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clusters/discovering-native-clients)
- [Discovery Mechanisms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clusters/discovery-mechanisms)
- [Failure Detector Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clusters/failure-detector-configuration)
- [Logging Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clusters/logging-configuration)
- [Network Configurations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clusters/network-configuration)
- [Partition Group Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clusters/partition-group-configuration)
- [Phi Accrual Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clusters/phi-accrual-detector)
- [Ping Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clusters/ping-detector)
- [Setting Up Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/clusters/setting-up-clusters)
- [Common Exception Types | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/common-exception-types)
- [Distributed Computing | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/computing/distributed-computing): Explore the tools that Hazelcast offers for distributed computing on cluster members.
- [Durable Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/computing/durable-executor-service)
- [Entry Processor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/computing/entry-processor)
- [Java Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/computing/executor-service)
- [Scheduled Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/computing/scheduled-executor-service)
- [Checking Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/configuration/checking-configuration)
- [Member Configuration Files | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/configuration/configuring-declaratively): You can declare settings for Hazelcast members, using a YAML or XML configuration file. Although Hazelcast members read from a single configuration file, you can store settings in multiple files and import them into a single root file to enable reuse.
- [Configuring Hazelcast in Embedded Mode | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/configuration/configuring-programmatically): You can use a configuration object (config object) to configure members with the Java member API. To create new instances of members, pass the config object to those instances.
- [Configuring with System Properties and Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/configuration/configuring-with-system-properties): You can use xref:ROOT:system-properties.adoc[system properties] and environment variables to configure Hazelcast and override existing settings in a root configuration file. Environment variables are useful for configuring members in containerized environments.
- [Configuring Hazelcast in Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/configuration/configuring-within-spring)
- [Dynamic Configuration for Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/configuration/dynamic-config): You can use dynamic configuration to add new configuration to members at runtime or update some supported configuration such as Enterprise license keys. This feature is useful if you want to configure a running cluster without having to restart the members.
- [Configuring Dynamic Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/configuration/dynamic-config-persistence): You can configure members to keep dynamic configuration changes in memory or persist them to a YAML or XML configuration file.
- [Dynamic Configuration with Programmatic APIs (Java) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/configuration/dynamic-config-programmatic-api): You can use the Java member or client APIs to add dynamic configuration to some supported features at runtime.
- [Updating or Reloading Dynamic Configuration in REST | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/configuration/dynamic-config-update-and-reload): You can use the /config/update and /config/reload REST endpoints to add dynamic configuration for some supported features at runtime.
- [Configuring the Jet Engine | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/configuration/jet-configuration)
- [Configuring JVM Parameters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/configuration/jvm-parameters)
- [Configuration Pattern Matcher | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/configuration/pattern-matcher)
- [Hazelcast Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/configuration/understanding-configuration): To configure a Hazelcast cluster or client, you can choose either static or dynamic configuration. Explore the options and decide which one is best for your application.
- [Using Wildcards | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/configuration/using-wildcards)
- [Best Practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/cp-subsystem/best-practices): Consider the following, a wrap-up of the aforementioned recommendations, to get the best throughput out of your CP Subsystem use case.
- [Configuring CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/cp-subsystem/configuration): You can configure clusters to enable the CP Subsystem as well as fine-tune many other options such as CP groups sizes and persistence of CP state.
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/cp-subsystem/cp-subsystem): CP Subsystem is a component of a Hazelcast cluster that builds a strongly consistent layer for a set of distributed data structures. As well as network partitions, the CP Subsystem withstands server and client failures.
- [Managing and Monitoring the CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/cp-subsystem/management): The CP Subsystem requires manual intervention while expanding or shrinking its size, or when a CP member crashes or becomes unreachable. When a CP member becomes unreachable, it is not automatically removed from CP Subsystem because it could still be active and partitioned away.
- [Making Your Map Data Safe | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/backing-up-maps): Maps are in-memory data structures, which means they are potentially vulnerable to data loss in the event of a system failure. Hazelcast offers several features to minimize the chances of data loss, including in-memory backups and persisted data stores.
- [Cardinality Estimator Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/cardinality-estimator-service)
- [Creating a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/creating-a-map): Maps store data in key/value pairs called entries, which can be one of many data types. To create a map, you just need to give it a name, then write some data to it.
- [Distributed Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/distributed-data-structures)
- [Event Journal | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/event-journal)
- [FencedLock | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/fencedlock)
- [Flake ID Generator | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/flake-id-generator)
- [IAtomicLong | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/iatomiclong)
- [IAtomicReference | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/iatomicreference)
- [ICountDownLatch | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/icountdownlatch)
- [ISemaphore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/isemaphore)
- [List | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/list)
- [Acting Upon Changes to a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/listening-for-map-entries): You can set up monitoring of a map to look for specific events, such as adding an entry, updating a specific entry, or deleting an entry. You can use these events to trigger execution of code, or even intercept the event and change it before it affects the data in memory.
- [Locking Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/locking-maps): Although maps are thread-safe, you may prefer to have manual control over which members have access to a map entry at a given time. Hazelcast offers two ways of locking map entries: pessimistic locking and optimistic locking.
- [Managing Map Memory | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/managing-map-memory): Depending on how you use maps, they may become too large for your cluster's memory, or the data may become stale and useless to your applications. To handle these situations, you can set expiration and eviction policies.
- [Distributed Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/map): Distributed maps, also known as maps or IMaps, are key-value pairs that are partitioned across a cluster. Use maps to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/map-config): Map configuration is part of the overall Hazelcast server configuration. When you create your map, it inherits the configuration that is set up on the server. It is important to plan your map configuration ahead of time, as you cannot change the configuration of a map once it is created without restarting your entire cluster.
- [MultiMap | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/multimap)
- [PN Counter | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/pn-counter)
- [Preventing Out of Memory Exceptions when Querying a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/preventing-out-of-memory): Query-based map methods such as entrySet()` may trigger an out of memory exception (OOME), depending on the size of your map and the available memory of each member. To prevent these exceptions, you can configure your cluster to limit query results.
- [Priority Queue | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/priority-queue)
- [Queue | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/queue)
- [Reading Data From a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/reading-a-map): Data in a map is distributed among members in a Hazelcast cluster. To read entries from a map, you can use simple get requests, distributed queries, or use the map as a source in a data pipeline.
- [Reading Map Metrics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/reading-map-metrics): By default, you can read metrics for a given map, such as the primary and backup entry count, last update time, and locked entry count on each member of your cluster. You can access these statistics for the entire map, for the map entries on a specific cluster member, or specific map entries.
- [Reliable Topic | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/reliable-topic)
- [Replicated Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/replicated-map)
- [Ringbuffer | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/ringbuffer)
- [Set | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/set)
- [Setting the In-Memory Format of Map Entries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/setting-data-format): The in-memory format you set to store your data can have a significant impact on the performance of your application. When data is moved either between a client and the Hazelcast cluster or between cluster members, it is always in serialized (binary) format. Depending on your use case, it may be more efficient to store the data in that serialiized format, either on-heap or off-heap, or deserialize it back to the original object format.
- [Topic | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/topic)
- [Updating Map Entries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/updating-map-entries): Maps are not static. You can update or remove individual map entries, a group of map entries, or the entire map.
- [Working with an External Data Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/data-structures/working-with-external-data): One of the most common implementations of Hazelcast is as a front-end cache for an external storage system, such as a relational database. Hazelcast offers a way to automate the process of loading the data into an in-memory map for faster application access, as well as automatically write updates back to the external storage to keep the systems synchronized.
- [Choosing an Application Topology | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/deploy/choosing-a-deployment-option): Hazelcast offers two topologies to use Hazelcast: embedded in a Java application or in a client/server topology. To help you choose a topology that meets your requirements, this topic describes each option.
- [Public Clouds | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/deploy/deploying-in-cloud): Deploy a Hazelcast cluster in cloud environments including Hazelcast Cloud, Amazon AWS, Google Cloud Platform, and Azure.
- [Deploying a Cluster on Amazon AWS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/deploy/deploying-on-aws): Deploy Hazelcast clusters on Amazon AWS EC2 and AWS ECS/Fargate environments and allow them to discover each other automatically.
- [Deploying a Cluster on Microsoft Azure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/deploy/deploying-on-azure): Deploy Hazelcast clusters on Azure and allow them to discover each other automatically.
- [Deploying a Cluster on Google Cloud Platform | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/deploy/deploying-on-gcp): Deploy Hazelcast clusters on Google Cloud Platform and allow them to discover each other automatically.
- [Deploying on Docker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/deploy/deploying-with-docker): In this deployment guide, you will learn how to form a cluster from Hazelcast member containers running on more than one Docker host in the same local area network (LAN).
- [Managing Enterprise License Keys | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/deploy/enterprise-licenses): To use Hazelcast Enterprise, you need an Enterprise license key. This topic explains how to get a license key, install it on a member, and manage it.
- [Supported Versions and Compatibilities | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/deploy/versioning-compatibility): This section provides the supported versions and interoperability of Hazelcast Platform and its modules.
- [Cluster Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/events/cluster-events)
- [Listening to Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/events/distributed-events)
- [Event Listeners for Hazelcast Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/events/event-listeners-for-clients)
- [Global Event Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/events/global-event-configuration)
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/events/object-events)
- [Config Properties SPI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/extending-hazelcast/config-properties-spi)
- [Discovery SPI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/extending-hazelcast/discovery-spi)
- [Extending Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/extending-hazelcast/extending-hazelcast)
- [OperationParker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/extending-hazelcast/operationparker)
- [Frequently Asked Questions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/faq)
- [Backups | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/fault-tolerance/backups)
- [Fault Tolerance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/fault-tolerance/fault-tolerance)
- [Timeouts | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/fault-tolerance/timeouts)
- [Authenticate Client Connections | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/getting-started/authenticate-clients): This tutorial introduces you to member security by setting up authentication for client connections. At the end of this tutorial, you'll know how to configure member and client security settings to allow only authorized clients to connect to a cluster.
- [Deploy Blue-Green Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/getting-started/blue-green): This tutorial introduces you to blue-green cluster deployments. At the end of this tutorial, you'll know how to set up a client to operate continuously even when its connected to a cluster that fails.
- [Hazelcast Editions and Distributions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/getting-started/editions): Hazelcast offers Enterprise and Open Source editions of its member software, each available as either a full or slim distribution.
- [Get Started with Hazelcast Enterprise | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/getting-started/enterprise-overview): This series of tutorials showcases some of the most useful features of Hazelcast Enterprise.
- [Start a Local Cluster from Binary | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/getting-started/get-started-binary): This tutorial introduces you to Hazelcast in a client/server topology. At the end of this tutorial, you'll know how to start a cluster from the binary distribution, store data in memory, visualize your data and more.
- [Start a Local Cluster with the CLI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/getting-started/get-started-cli): Follow this five-minute tutorial to set up a Hazelcast cluster for testing or evaluation purposes. In five minutes, you will learn how to install Hazelcast with a package manager, start a local cluster with the CLI, write data to memory and visualize that data.
- [Start a Local Cluster in Docker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/getting-started/get-started-docker): This tutorial introduces you to Hazelcast in a client/server topology. At the end of this tutorial, you'll know how to start a cluster in a single Docker host, store data in memory, visualize your data and more.
- [Start a Local Embedded Cluster | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/getting-started/get-started-java): This tutorial introduces you to Hazelcast in an embedded topology. At the end of this tutorial, you'll know how to start a cluster in your Java application and store data in memory.
- [Installing Hazelcast Enterprise | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/getting-started/install-enterprise): To install Hazelcast Enterprise, you can use Docker, the binary, or Java. To unlock the Enterprise features, you must install your Enterprise license key.
- [Installing Hazelcast Open Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/getting-started/install-hazelcast): You can install the Open Source edition of Hazelcast, using the command line interface (CLI), Docker, the binary, or Java.
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/getting-started/interactive-quickstart)
- [Persist Map Entries on Disk | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/getting-started/persistence): This tutorial introduces you to Hazelcast with Persistence enabled. At the end of this tutorial, you'll know how to enable Persistence for a map in your cluster and see the recovery of the map entries after a cluster shutdown.
- [Developer Resources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/getting-started/resources)
- [Getting Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/getting-started/support): Hazelcast provides two types of support: one for the community and one for paying customers.
- [Replicate a Map over Clusters in a WAN | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/getting-started/wan): This tutorial introduces you to WAN Replication by replicating map entries across two clusters: London and Tokyo. At the end of this tutorial, you'll know how to synchronize a map from one cluster to another.
- [Glossary | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/glossary)
- [Ingesting Data from External Sources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/ingest/overview): Explore the tools that Hazelcast offers for data ingestion from both on-premise systems as well as cloud deployments.
- [CDC Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/cdc-connectors)
- [Connector Guides | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/connectors): Hazelcast comes out of the box with many different connectors for accessing data in a variety of platforms. These connectors are configured to read and write data in the most efficient way for their respective system. Explore the available connectors and choose one for your use case.
- [Custom Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/custom-connectors)
- [Data Structure Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/data-structure-connectors): Data structure connectors allow you to access data stored in Hazelcast data structures. Use these connectors to integrate Hazelcast data structures into your pipelines as sources or sinks.
- [Connectors for Databases | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/database-connectors)
- [Elasticsearch Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/elasticsearch-connector)
- [Unified File Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/file-connector): The unified file connector provides a simple way to read files across different sources. Using this connector, you can read files from the local filesystem, HDFS and cloud storage systems such as Amazon S3, Google Cloud Storage or Azure Blob Storage. This connector supports various data formats, including text files, CSV, JSON, and Avro.
- [HTTP Listener Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/http-connector)
- [InfluxDB Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/influxdb-connector)
- [JCache Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/jcache-connector): The JCache connector is mostly equivalent to the map connector, the main difference being that the JCache connector is compliant with the JCache standard API. As a sink, since JCache doesn't support entry processors, only the default variant is available.
- [JDBC Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/jdbc-connector)
- [JMS Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/jms-connector)
- [Apache Kafka Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/kafka-connector): The Kafka connector allows you to stream, filter, and transform events between Hazelcast clusters and Kafka.
- [Amazon Kinesis Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/kinesis-connector)
- [Legacy File Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/legacy-file-connector): The legacy file connector allows you to read and write to files, using the Jet API. This connector is still maintained, but all new development goes into the unified file connector.
- [List Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/list-connector)
- [Map Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/map-connector): A map is a distributed in-memory key-value data structure that can be used as a batch or streaming data source as well as a data sink.
- [Connectors for Messaging Systems | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/messaging-system-connectors)
- [MongoDB Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/mongodb-connector)
- [Observable Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/observable-connector): The observable connector provides a way of receiving query results on the same client that submitted a job. This connector is useful when you are using the Jet API for ad-hoc queries and you want to use your client as a sink.
- [Apache Pulsar Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/pulsar-connector)
- [Redis Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/redis-connector)
- [Reliable Topic Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/reliable-topic-connector)
- [Socket Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/socket-connector)
- [Test Source Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/test-connectors): Test sources make it convenient to get started with pipelines without having to use an actual data source. They can also be used for unit testing different pipelines where you can expect a more deterministic import.
- [Twitter Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrate/twitter-connector)
- [Integration with Hibernate Second Level Cache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrated-clustering/hibernate-second-level-cache)
- [Integrated Clustering | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrated-clustering/integrated-clustering)
- [Integration with Java EE | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrated-clustering/javaee)
- [Integration with Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrated-clustering/spring)
- [Web Session Replications | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/integrated-clustering/web-session-replication)
- [JCache API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/jcache/api)
- [JCache - Hazelcast Instance Integration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/jcache/hazelcast-integration)
- [Hazelcast JCache Extension - ICache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/jcache/icache)
- [Hazelcast JCache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/jcache/jcache)
- [JCache Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/jcache/overview)
- [JCache Providers | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/jcache/providers)
- [JCache Setup and Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/jcache/setup)
- [Testing for JCache Specification Compliance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/jcache/tck)
- [Deploying on Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/kubernetes/deploying-in-kubernetes): Discover ways to deploy Hazelcast clusters in Kubernetes environments.
- [Adding custom JAR files to the Platform/Management Center Classpath | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/kubernetes/helm-adding-custom-jar)
- [Configuring SSL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/kubernetes/helm-configuring-ssl)
- [Dynamic Persistence Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/kubernetes/helm-dynamic-persistence-configuration)
- [Enabling External Access to Cluster | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/kubernetes/helm-enabling-external-access)
- [Deploying Hazelcast Open Source on Kubernetes with Helm | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/kubernetes/helm-hazelcast-chart): This chart bootstraps a link:https://github.com/hazelcast/hazelcast-docker/tree/master/hazelcast-oss[Hazelcast] and link:https://github.com/hazelcast/management-center-docker[Management Center] deployments on a link:http://kubernetes.io[Kubernetes] cluster using the link:https://helm.sh[Helm] package manager.
- [Deploying Hazelcast Enterprise on Kubernetes with Helm | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/kubernetes/helm-hazelcast-enterprise-chart): This chart bootstraps a link:https://github.com/hazelcast/hazelcast-docker/tree/master/hazelcast-enterprise[Hazelcast Enterprise] and link:https://github.com/hazelcast/management-center-docker[Management Center] deployments on a link:http://kubernetes.io[Kubernetes] cluster using the link:https://helm.sh[Helm] package manager.
- [Helm Upgrade Guide | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/kubernetes/helm-upgrade-guide)
- [Kubernetes Auto Discovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/kubernetes/kubernetes-auto-discovery): Before you start a Hazelcast cluster in Kubernetes, it's important to configure settings to ensure that members can form a cluster and to prevent any unexpected data loss.
- [Troubleshooting and Limitations in Kubernetes Environments | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/kubernetes/troubleshooting-and-limitations): Find advice for troubleshooting issues you might face while deploying Hazelcast via Helm.
- [List of Hazelcast Metrics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/list-of-metrics)
- [Cluster and Member States | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/maintain-cluster/cluster-member-states): Cluster states determine what cluster operations are available. By changing the state of a cluster, you can grant or restrict cluster operations such as repartitioning as well as change the behavior of those operations.
- [Enabling Lite Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/maintain-cluster/lite-members)
- [Configuring Logging | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/maintain-cluster/logging): Options available for the logging mechanism of Hazelcast clusters.
- [Filtering Members with Attributes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/maintain-cluster/member-attributes)
- [Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/maintain-cluster/monitoring): Options available for monitoring the health and operations of Hazelcast clusters.
- [REST API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/maintain-cluster/rest-api)
- [Rolling Upgrades | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/maintain-cluster/rolling-upgrades): You can use rolling upgrades to upgrade the version of Hazelcast members in a running cluster without interrupting the operation of the cluster.
- [Shutting Down Members and Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/maintain-cluster/shutdown): Maintaining a cluster often requires shutting down clusters or individual members to make changes take effect. Hazelcast offers convenient methods for shutting down clusters as well as graceful and ungraceful options for specific members.
- [Cluster Utilities | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/management/cluster-utilities)
- [Evaluating 5.x (For IMDG 3.x Users) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/migrate/evaluation-tool)
- [Migrating Data from IMDG 3.12.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/migrate/migration-tool-imdg): This guide explains how to migrate data in maps or JCache data structures from a running IMDG 3.12.x cluster to a Hazelcast 5.x cluster.
- [Upgrading from IMDG 3.12.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/migrate/upgrading-from-imdg-3)
- [Upgrading from IMDG 4.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/migrate/upgrading-from-imdg-4): This guide covers the most important changes that affect users of IMDG 4.x who want to upgrade to Hazelcast.
- [Upgrading from Jet | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/migrate/upgrading-from-jet): This guide covers the most important changes that affect users of Jet 4.x who want to upgrade to Hazelcast.
- [Dealing with Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/network-partitioning/dealing-with-network-partitions)
- [Network Partitioning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/network-partitioning/network-partitioning)
- [Partial Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/network-partitioning/partial-network-partitions)
- [Split-Brain Protection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/network-partitioning/split-brain-protection)
- [Split-Brain Recovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/network-partitioning/split-brain-recovery)
- [API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/osgi/api)
- [Configuring Hazelcast OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/osgi/configuring-osgi-support)
- [Design | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/osgi/design)
- [OSGI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/osgi/osgi)
- [OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/osgi/osgi-support)
- [Using Hazelcast OSGI Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/osgi/using-osgi-service)
- [Back Pressure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/performance/back-pressure)
- [Performance Anti Patterns | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/performance/best-practices)
- [Caching Deserialized Values | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/performance/caching-deserialized-values)
- [CPU Thread Affinity | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/performance/cpu-thread-affinity)
- [Data Affinity | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/performance/data-affinity)
- [Near Cache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/performance/near-cache)
- [Performance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/performance/performance)
- [Pipelining | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/performance/pipelining)
- [Running on EC2 | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/performance/running-on-ec2)
- [SlowOperationDetector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/performance/slowoperationdetector)
- [Threading Model | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/performance/threading-model)
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/phone-homes)
- [About Stream Processing Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/building-pipelines): Streaming jobs are those that process a infinite amount of data such as a continuous event stream. Because these jobs continue to run until they are canceled, you must use timestamps to define time windows in which to collect events.
- [Capture Changes from MySQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/cdc)
- [Setting Up a Database for Change Data Capture | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/cdc-database-setup)
- [Join Change Data Capture Records | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/cdc-join)
- [Change Data Capture (CDC) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/cdc-overview): Change Data Capture (CDC) is a pipeline pattern for observing changes made to a database and extracting them in a form usable by other systems, for the purposes of replication, analysis and more.
- [Capture Changes from PostgreSQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/cdc-postgres)
- [Configuring Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/configuring-jobs): Before submitting a job to a cluster, you can configure its name, whether to record metrics, and how it behaves when cluster members fail.
- [Building a Custom Aggregate Operation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/custom-aggregate-operation)
- [Adding Batching to a Custom Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/custom-batch-source): To improve the throughput of your custom sources, you can add batching to reads.
- [Create a Custom Sink | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/custom-sink)
- [Creating a Custom Streaming Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/custom-stream-source): If Hazelcast is missing a built-in source that you want to use, you can build your own, using the Jet API.
- [Extract Transform Load (ETL) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/etl-overview): ETL is a pipeline pattern for collecting data from various sources, transforming (changing) it to conform to some rules, and loading it into a sink. This pattern is often used to form materialized views where data is processed and put into a Hazelcast map for fast in-memory queries.
- [Stream Processing and Event Timestamps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/event-time)
- [Mapping Data in a Pipeline Using a a gRPC Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/grpc): When processing data in a pipeline, you can use an external service to execute a function on input data, and pass the output to the next stage of pipeline. A popular way of exposing external services is to use the gRPC protocol.
- [Ingesting Data from Sources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/ingesting-from-sources): In order to process data, you first need to ingest it into your pipeline, using one or more sources.
- [Managing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/job-management): Once a job is submitted, it has its own lifecycle on the cluster which is distinct from the submitter. To manage the lifecycle of jobs, you can use either SQL or CLI commands to list, cancel, suspend, resume, and restart them.
- [Securing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/job-security): While submitting jobs, you can upload custom code that bypasses client permissions. Jobs also have access to data outside of Hazelcast such as files on the device that's running a member. As a result, it's important to be aware of how to secure your Hazelcast member against malicious jobs.
- [Updating Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/job-update): Update streaming jobs without losing computation state.
- [Connect to Apache Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/kafka)
- [Connect to Amazon Kinesis | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/kinesis)
- [Enrich a Stream | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/map-join): In this tutorial, you build a pipeline that takes a stream of trades from a stock exchange and enriches it with a full company name for nicer presentation. Each trade contains a stock symbol, also known as ticker, which uniquely identifies the stock. You will use the ticker to look up the full company name in a replicated map.
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/object-events)
- [Receiving Pipeline Results on the Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/observables)
- [About Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/overview): Learn about the core concepts of data pipelines and how you can build your own with the Hazelcast Jet engine.
- [Group Messages from Apache Pulsar | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/pulsar)
- [Apply a Custom Transform with Python | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/python)
- [Sending Results to Sinks | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/sending-data-to-sinks): After defining the processing steps in a pipeline, you must send the results to at least one destination called a sink. Hazelcast comes with built-in sinks as well as a public API for building your own.
- [Serializing Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/serialization)
- [Spring Boot Starter | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/spring-boot)
- [Subscribe to Changes to a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/stream-imap)
- [Get Started with Stream Processing (Client/Server) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/stream-processing-client): This tutorial shows you how to use a Hazelcast cluster as a data processing engine for your client applications. At the end of this tutorial, you'll know how to build a data pipeline in Java and submit it as a job to your Hazelcast cluster.
- [Get Started with Stream Processing (Embedded) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/stream-processing-embedded): This tutorial shows you how to use Hazelcast as a streaming engine that's embedded in your Java application. At the end of this tutorial, you'll know how to ingest data from some test sources and filter it continuously to generate results in real time.
- [Submitting Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/submitting-jobs): Submit data pipelines to a Hazelcast cluster for execution.
- [Transforms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/transforms): Hazelcast offers several transforms which can be used to process data. Explore the available transforms and learn how to use them.
- [Apply Windowed Aggregation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/windowing)
- [Testing Sources and Sinks for XA Transaction Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/pipelines/xa): In order to have end-to-end exactly-once processing in pipelines, sources and sinks need to support it too. Although many sources and sinks ensure atomicity (all distributed participants either commit the transaction or roll back), some do not survive a client disconnection. You can test whether a source or a sink will survive a client disconnection, using either JDBC or Java Messaging Service (JMS).
- [Cloud Discovery Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/plugins/cloud-discovery)
- [Framework Integration Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/plugins/framework-integration)
- [Hazelcast Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/plugins/hazelcast-plugins)
- [Other Integrations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/plugins/other-integrations)
- [Web Session Replication Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/plugins/web-session-replication)
- [Production Checklist | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/production-checklist): The production checklist provides a set of best practices and recommendations to ensure a smooth transition to a production environment which runs a Hazelcast cluster.
- [Indexing Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/query/indexing-maps): Indexes improve the performance of queries on map entries by reducing the number of entries that members need to iterate through.
- [Running Distributed Queries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/query/overview): Explore the tools that Hazelcast offers for running distributed queries.
- [Predicates API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/query/predicate-overview): The Predicates API is a programming interface for querying data in Hazelcast, which is similar to the Java Persistence Query Language (JPQL).
- [5.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/release-notes/5-1)
- [5.1.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/release-notes/5-1-1)
- [5.1.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/release-notes/5-1-2)
- [5.1.3 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/release-notes/5-1-3)
- [5.1.4 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/release-notes/5-1-4)
- [5.1.5 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/release-notes/5-1-5)
- [5.1.6 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/release-notes/5-1-6)
- [5.1.7 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/release-notes/5-1-7)
- [Hazelcast Platform 5.1.X Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/release-notes/releases)
- [Security Hardening Recommendations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/secure-cluster/hardening-recommendations)
- [Security Defaults | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/secure-cluster/security-defaults)
- [Cluster Member Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/security/cluster-member-security)
- [Default authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/security/default-authentication)
- [Enabling JAAS Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/security/enabling-jaas)
- [Encryption | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/security/encryption)
- [FIPS 140-2 | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/security/fips-140-2)
- [Integrating OpenSSL / BoringSSL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/security/integrating-openssl)
- [JAAS authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/security/jaas-authentication)
- [Logging Auditable Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/security/logging-auditable-events)
- [Client Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/security/native-client-security): To protect your members from a malicious client, you can allow them to identify clients and restrict their permissions to access either data in data structures or features such as user code deployment.
- [Security Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/security/overview)
- [Security Debugging | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/security/security-debugging)
- [Security Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/security/security-interceptor)
- [Security Realms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/security/security-realms)
- [Simple Authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/security/simple-authentication)
- [Socket Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/security/socket-interceptor)
- [Other TLS-Related Configurations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/security/tls-configuration)
- [TLS/SSL Basics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/security/tls-ssl)
- [Validating Secrets Using Strength Policy | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/security/validating-secrets)
- [Compact Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/serialization/compact-serialization)
- [Custom Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/serialization/custom-serialization)
- [Global Serializer | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/serialization/global-serializer)
- [Implementing DataSerializable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/serialization/implementing-dataserializable)
- [Implementing HazelcastInstanceAware | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/serialization/implementing-hazelcastinstanceaware)
- [Implementing Java Serializable and Externalizable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/serialization/implementing-java-serializable)
- [Implementing Portable Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/serialization/implementing-portable-serialization)
- [Serializing Objects and Classes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/serialization/serialization): For data to be sent over a network between cluster members and/or clients, it needs to be serialized into raw bytes. Hazelcast has many serialization options to choose from, depending on what you plan on doing with your data.
- [Configuring Serializers | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/serialization/serialization-configuration): You can configure clusters to be able to serialize and deserialize custom objects and classes as well as override built-in serializers and whitelist certain Java classes.
- [Serializing into JSON | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/serialization/serializing-json): If you want to query JSON strings that are stored in Hazelcast, you can serialize them, using <code>HazelcastJsonValue</code>.
- [Hazelcast Simulator | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/simulator)
- [ALTER JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/alter-job): The ALTER JOB statement can supend, resume, or restart a job that is running on a cluster.
- [CREATE INDEX | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/create-index): The CREATE INDEX statement creates a sorted, hash, or bitmap index for a given map.
- [CREATE JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/create-job): The CREATE JOB statement submits a job to Hazelcast to run independently of the SQL client. With this statement, you can run a SQL statement in the background.
- [CREATE MAPPING | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/create-mapping): The CREATE MAPPING statement creates a table that stores essential metadata about a source's data model, connection parameters, and serialization formats so that the SQL service can connect to the data source and query it.
- [CREATE OR REPLACE SNAPSHOT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/create-snapshot): The CREATE OR REPLACE SNAPSHOT statement creates a named snapshot that you can use to start other jobs or keep as a backup.
- [CREATE VIEW | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/create-view): The CREATE VIEW statement creates a virtual table based on the result set of an SQL query. Views can be reused in other queries.
- [SQL Data Types | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/data-types): Hazelcast supports a subset of SQL data types. Each data type is mapped to a Java class, which represents the type's value in Hazelcast.
- [DELETE | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/delete): The DELETE statement deletes map entries that match the condition in a given WHERE clause.
- [DROP JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/drop-job): The DROP JOB statement cancels a job and gives you the option to create a named snapshot from its state.
- [DROP MAPPING | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/drop-mapping): The DROP MAPPING statement removes an existing mapping.
- [DROP SNAPSHOT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/drop-snapshot): The DROP SNAPSHOT statement deletes a named snapshot.
- [DROP VIEW | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/drop-view): The DROP VIEW statement deletes a view.
- [EXPLAIN | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/explain): The EXPLAIN statement returns the execution plan for a given statement, without executing it.
- [Meta-information about Mappings | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/finding-mappings)
- [Expressions, Functions and Operators | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/functions-and-operators): Hazelcast supports a subset of standard SQL expressions, functions, and operators as well as non-standard functions for special cases such as windowed aggregation.
- [Get Started with SQL Over Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/get-started-sql): In this tutorial, you learn the basics of querying maps in SQL by running ad-hoc and batch queries on some test data.
- [Get Started with SQL Over Files | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/get-started-sql-files): In this tutorial, you learn the basics of querying files in SQL by creating and querying a CSV file.
- [Improving the Performance of SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/improving-performance): Use this topic to find advice on improving the performance of slow queries.
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/interactive-sql-files)
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/interactive-sql-kafka)
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/interactive-sql-maps)
- [Get Started with SQL Over Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/learn-sql): In this tutorial, you use an interactive SQL shell on a Hazelcast member to query Kafka topics in real-time.
- [Creating a Mapping to a File System | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/mapping-to-a-file-system): To query data in files, you need to create a mapping to a file, using the unified file connector so that the SQL service knows how to access the data.
- [Mapping to Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/mapping-to-kafka): To query streams in Kafka topics, you need to create a mapping with the Kafka connector so that the SQL service knows how to access the messages.
- [Mapping to Hazelcast Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/mapping-to-maps): To query entries in maps, you need to create a mapping with the map connector so that the SQL service knows how to access the entries.
- [Using Query Parameters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/parameterized-queries): In Hazelcast clients, you can use query parameters to build safer, faster SQL queries.
- [Querying Maps with SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/querying-maps-sql): You can use SQL to run optimized distributed queries on the keys and values of maps in a local cluster.
- [Stream Processing in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/querying-streams): You can run SQL queries on streaming data, using standard SQL as well as some custom functions for features such as streaming aggregations.
- [SELECT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/select): The SELECT statement reads data from tables, allowing you to query and process your data based on one or more parameters.
- [SHOW JOBS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/show-jobs): The SHOW JOBS statement displays a sorted list of all named jobs. The list includes any existing jobs that were submitted through the Java API as long as they have a name. The list does not include jobs that have already completed with or without an error.
- [SHOW MAPPINGS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/show-mappings): The SHOW MAPPINGS statement displays a sorted list of all mappings.
- [INSERT INTO/SINK INTO | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/sink-into): The <code>INSERT INTO</code>/<code>SINK INTO</code> statements write data to platforms that are connected to Hazelcast through connectors.
- [SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/sql-overview): You can use SQL to query data in maps, Kafka topics, or a variety of file systems. Results can be sent directly to the client or inserted into maps or Kafka topics.
- [SQL Statements | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/sql-statements): Hazelcast supports the following SQL statements. Explore the available statements and find more details about them.
- [Troubleshooting SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/troubleshooting): This topic provides solutions to common errors in SQL queries.
- [UPDATE | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/update): The UPDATE statement overwrites the values of map entries that match the condition in a given WHERE clause.
- [Working with JSON Data in SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/sql/working-with-json): In Hazelcast, the SQL service supports ways of working with JSON data: `json-flat`, which does not allow you to query nested keys/values and `json`, which supports nested queries and JSON functions.
- [Backing Up the Persistence Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/storage/backing-up-persistence): You can trigger backups of your persistence store, using the Java API, REST API, or Management Center. Backing up the persistence store is useful if you want to copy the data onto other clusters without having to shut down your cluster.
- [Configuring Persistence | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/storage/configuring-persistence): You can configure clusters to persist data structures and job snapshots on disk as well as fine-tune many other options such as backups, encryption, and auto-recovery.
- [Copying Persisted Data onto other Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/storage/copying-persistence): When you persist data on disk, you may want to copy that data onto another cluster to perform testing, QA, or reproduce an issue on production data.
- [High-Density Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/storage/high-density-memory): The High-Density Memory Store is Hazelcast's enterprise in-memory storage solution. It solves garbage collection limitations so that applications can exploit hardware memory more efficiently without the need of oversized clusters.
- [Persistence Performance Benchmark | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/storage/performance): Find summaries of Persistence performance tests that were performed with a single Hazelcast member running on a physical server and on AWS R3.
- [Persisting Data on Disk | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/storage/persistence): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Persistence Design Details | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/storage/persistence-design)
- [Store Persistence Data on Intel® Optane™ DC Persistent Memory | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/storage/persistence-on-intel): In this tutorial, you'll use Intel® Optane™ DC Persistent Memory (PMem) to improve the performance of disk reads and writes, allowing your cluster to access data on disk faster.
- [Triggering a Force-Start | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/storage/triggering-force-start): To recover a cluster that has Persistence enabled after a cluster-wide restart, you can force a cluster to delete their persistence stores when one or more members fail to restart.
- [Triggering a Partial-Start | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/storage/triggering-partial-start): To recover a cluster that has Persistence enabled after a cluster-wide restart, you can force a cluster to start without some members when one or more of them fail.
- [System Properties | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/system-properties)
- [Testing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/test/testing)
- [Testing Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/test/testing-apps)
- [Creating a Transaction Interface | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/transactions/creating-a-transaction-interface)
- [Providing XA Transactions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/transactions/providing-xa-transactions)
- [Error Handling Strategies for Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/troubleshoot/error-handling): Jobs may not run as expected due to I/O errors in sources and sinks, or coding and input data errors in your pipelines. To handle these errors you can use one of the following strategies.
- [Recovery from Client Connection Failures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/troubleshoot/recovery-clients)
- [Recovery from a Partial or Total Failure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/troubleshoot/recovery-members)
- [Actions and Remedies for Alerts | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/troubleshoot/remedies-for-alerts): Find advice for remedies for the Hazelcast alerts.
- [Troubleshooting Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/troubleshoot/troubleshooting): Find advice for troubleshooting issues in your Hazelcast applications or your cluster deployments.
- [Advanced Features | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/wan/advanced-features)
- [Configuring for IMap and ICache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/wan/configuring-for-map-and-cache)
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/wan/defining-wan-replication)
- [Failure Detection and Recovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/wan/failures)
- [WAN Replication Modes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/wan/modes)
- [WAN Quickstart | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/wan/quick-start)
- [REST API for WAN Wrap-Up | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/wan/rest-api)
- [Fine-Tuning WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/wan/tuning)
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.1/wan/wan)
- [Hazelcast Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/): Hazelcast Platform uniquely combines a distributed compute engine and a fast data store in one runtime. It offers unmatched performance, resilience and scale for real-time and AI-driven applications.
- [5.0.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/5-0-1-release-notes): These release notes list any new features, enhancements, and fixes that were made between version 5.0 and 5.0.1 of Hazelcast Platform.
- [5.0.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/5-0-2-release-notes): These release notes list any new features, enhancements, and fixes that were made between version 5.0.1 and 5.0.2 of Hazelcast Platform.
- [5.0.3 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/5-0-3-release-notes): These release notes list any new features, enhancements, and fixes that were made between version 5.0.2 and 5.0.3 of Hazelcast Platform.
- [5.0.4 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/5-0-4-release-notes): These release notes list any new features, enhancements, and fixes that were made between version 5.0.3 and 5.0.4 of Hazelcast Platform.
- [018 - Kinesis Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/architecture/018-kinesis-connector)
- [Design Decisions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/architecture/design-docs)
- [How Hazelcast Models and Executes Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/architecture/distributed-computing): Hazelcast models your pipeline code into a directed acyclic graph (DAG) which consists of stages. Each processing stage accepts the events from upstream stages, processes them, and passes the results to the downstream stage. To run a job, Hazelcast transforms the pipeline DAG into the core DAG. The top-level component that does this is called the planner.
- [How Hazelcast Handles Event Disorder | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/architecture/event-time-processing): To make sure that late events do not slow down jobs, Hazelcast allows you to define a threshold (lag) for how late events can be before they are ignored. To determine a late event, Hazelcast uses distributed watermarks to define the current time and compare it against the configured lag.
- [Cooperative Multithreading | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/architecture/execution-engine)
- [In-Memory Storage | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/architecture/in-memory-storage)
- [Sliding Window Aggregation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/architecture/sliding-window)
- [Caching Data | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/cache/overview): Hazelcast provides APIs and plugins for building distributed caches for your data, including web sessions, database queries, and compute results. Get familiar with Hazelcast as a cache and find useful resources for your use case.
- [Capacity Planning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/capacity-planning): Capacity planning involves estimating and validating the capacity of a cluster in order to determine which recommendations and best practices can help that cluster achieve its best reasonable performance.
- [C++ Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clients/cplusplus)
- [.NET Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clients/dotnet)
- [Go Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clients/go)
- [Getting Started with a Hazelcast Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clients/hazelcast-clients): Hazelcast has clients in Java, C++, .NET, Node.js, Go, Python, and Memcache. You can use these clients to communicate with cluster members.
- [Java Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clients/java)
- [Memcache Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clients/memcache)
- [Node.js Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clients/nodejs)
- [Python Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clients/python)
- [REST Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clients/rest)
- [Best Practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/cluster-performance/best-practices)
- [Performance Tuning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/cluster-performance/performance-tuning)
- [Accessing Domain Objects Without Domain Classes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clusters/accessing-domain-objects)
- [Creating Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clusters/creating-clusters)
- [Deadline Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clusters/deadline-detector)
- [Deploying User Code from Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clusters/deploying-code-from-clients)
- [Deploying User Code on the Member | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clusters/deploying-code-on-member)
- [Discovering Members by Multicast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clusters/discovering-by-multicast)
- [Discovering Members by TCP | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clusters/discovering-by-tcp)
- [Discovering Java Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clusters/discovering-native-clients)
- [Discovery Mechanisms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clusters/discovery-mechanisms)
- [Failure Detector Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clusters/failure-detector-configuration)
- [Network Configurations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clusters/network-configuration)
- [Partition Group Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clusters/partition-group-configuration)
- [Phi Accrual Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clusters/phi-accrual-detector)
- [Ping Failure Detector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clusters/ping-detector)
- [Setting Up Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/clusters/setting-up-clusters)
- [Common Exception Types | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/common-exception-types)
- [Distributed Computing | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/computing/distributed-computing): Explore the tools that Hazelcast offers for distributed computing on cluster members.
- [Durable Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/computing/durable-executor-service)
- [Entry Processor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/computing/entry-processor)
- [Java Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/computing/executor-service)
- [Scheduled Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/computing/scheduled-executor-service)
- [Checking Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/configuration/checking-configuration)
- [Declarative Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/configuration/configuring-declaratively)
- [Programmatic Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/configuration/configuring-programmatically)
- [Configuring with System Properties | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/configuration/configuring-with-system-properties): You can use xref:ROOT:system-properties.adoc[system properties] and environment variables to configure Hazelcast and override existing settings in a root configuration file. Environment variables are useful for configuring members in containerized environments.
- [Configuring within the Spring Context | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/configuration/configuring-within-spring)
- [Dynamically Adding Data Structure Configuration on a Cluster | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/configuration/dynamic-data-structure-configuration): Dynamic configuration allows you to temporarily add new configuration for some features at runtime. This option is useful if you want to configure a data structure without having to shut down cluster members.
- [Configuring the Jet Engine | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/configuration/jet-configuration)
- [Configuring JVM Parameters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/configuration/jvm-parameters)
- [Overriding Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/configuration/overriding-configuration-settings)
- [Configuration Pattern Matcher | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/configuration/pattern-matcher)
- [Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/configuration/understanding-configuration): To configure a Hazelcast cluster or client, you can choose either static or dynamic configuration. Explore the options and decide which one is best for your application.
- [Using Variables | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/configuration/using-variables)
- [Using Wildcards | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/configuration/using-wildcards)
- [Variable Replacers | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/configuration/variable-replacers)
- [Consistency and Replication Model | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/consistency-and-replication/consistency)
- [Exactly-once, At-least-once or At-most-once Execution | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/consistency-and-replication/exactly-once-execution)
- [IndeterminateOperationStateException | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/consistency-and-replication/indeterminateoperationstateexception)
- [Invocation Lifecycle | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/consistency-and-replication/invocation-lifecycle)
- [Hazelcast’s Replication Algorithm | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/consistency-and-replication/replication-algorithm)
- [Best Practices | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/cp-subsystem/best-practices): Consider the following, a wrap-up of the aforementioned recommendations, to get the best throughput out of your CP Subsystem use case.
- [Configuring CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/cp-subsystem/configuration): You can configure clusters to enable the CP Subsystem as well as fine-tune many other options such as CP groups sizes and persistence of CP state.
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/cp-subsystem/cp-subsystem): CP Subsystem is a component of a Hazelcast cluster that builds a strongly consistent layer for a set of distributed data structures. As well as network partitions, the CP Subsystem withstands server and client failures.
- [Managing and Monitoring the CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/cp-subsystem/management): The CP Subsystem requires manual intervention while expanding or shrinking its size, or when a CP member crashes or becomes unreachable. When a CP member becomes unreachable, it is not automatically removed from CP Subsystem because it could still be active and partitioned away.
- [Making Your Map Data Safe | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/backing-up-maps): Maps are in-memory data structures, which means they are potentially vulnerable to data loss in the event of a system failure. Hazelcast offers several features to minimize the chances of data loss, including in-memory backups and persisted data stores.
- [Cardinality Estimator Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/cardinality-estimator-service)
- [Creating a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/creating-a-map): Maps store data in key/value pairs called entries, which can be one of many data types. To create a map, you just need to give it a name, then write some data to it.
- [Distributed Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/distributed-data-structures)
- [Event Journal | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/event-journal)
- [FencedLock | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/fencedlock)
- [Flake ID Generator | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/flake-id-generator)
- [IAtomicLong | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/iatomiclong)
- [IAtomicReference | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/iatomicreference)
- [ICountDownLatch | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/icountdownlatch)
- [ISemaphore | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/isemaphore)
- [List | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/list)
- [Acting Upon Changes to a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/listening-for-map-entries): You can set up monitoring of a map to look for specific events, such as adding an entry, updating a specific entry, or deleting an entry. You can use these events to trigger execution of code, or even intercept the event and change it before it affects the data in memory.
- [Locking Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/locking-maps): Although maps are thread-safe, you may prefer to have manual control over which members have access to a map entry at a given time. Hazelcast offers two ways of locking map entries: pessimistic locking and optimistic locking.
- [Managing Map Memory | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/managing-map-memory): Depending on how you use maps, they may become too large for your cluster's memory, or the data may become stale and useless to your applications. To handle these situations, you can set expiration and eviction policies.
- [Distributed Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/map): Distributed maps, also known as maps or IMaps, are key-value pairs that are partitioned across a cluster. Use maps to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/map-config): Map configuration is part of the overall Hazelcast server configuration. When you create your map, it inherits the configuration that is set up on the server. It is important to plan your map configuration ahead of time, as you cannot change the configuration of a map once it is created without restarting your entire cluster.
- [MultiMap | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/multimap)
- [PN Counter | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/pn-counter)
- [Preventing Out of Memory Exceptions when Querying a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/preventing-out-of-memory): Query-based map methods such as entrySet()` may trigger an out of memory exception (OOME), depending on the size of your map and the available memory of each member. To prevent these exceptions, you can configure your cluster to limit query results.
- [Priority Queue | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/priority-queue)
- [Queue | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/queue)
- [Reading Data From a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/reading-a-map): Data in a map is distributed among members in a Hazelcast cluster. To read entries from a map, you can use simple get requests, distributed queries, or use the map as a source in a data pipeline.
- [Reading Map Metrics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/reading-map-metrics): By default, you can read metrics for a given map, such as the primary and backup entry count, last update time, and locked entry count on each member of your cluster. You can access these statistics for the entire map, for the map entries on a specific cluster member, or specific map entries.
- [Reliable Topic | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/reliable-topic)
- [Replicated Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/replicated-map)
- [Ringbuffer | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/ringbuffer)
- [Set | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/set)
- [Setting the In-Memory Format of Map Entries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/setting-data-format): The in-memory format you set to store your data can have a significant impact on the performance of your application. When data is moved either between a client and the Hazelcast cluster or between cluster members, it is always in serialized (binary) format. Depending on your use case, it may be more efficient to store the data in that serialiized format, either on-heap or off-heap, or deserialize it back to the original object format.
- [Topic | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/topic)
- [Updating Map Entries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/updating-map-entries): Maps are not static. You can update or remove individual map entries, a group of map entries, or the entire map.
- [Working with an External Data Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/data-structures/working-with-external-data): One of the most common implementations of Hazelcast is as a front-end cache for an external storage system, such as a relational database. Hazelcast offers a way to automate the process of loading the data into an in-memory map for faster application access, as well as automatically write updates back to the external storage to keep the systems synchronized.
- [Configuring Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/deploy/configuring-kubernetes): Before you start a Hazelcast cluster in Kubernetes, it's important to configure settings to ensure that members can form a cluster and to prevent any unexpected data loss.
- [Public Clouds | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/deploy/deploying-in-cloud): Deploy a Hazelcast cluster in cloud environments including Hazelcast Cloud, Amazon AWS, Google Cloud Platform, and Azure.
- [Deploying on Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/deploy/deploying-in-kubernetes): Discover ways to deploy Hazelcast clusters in Kubernetes environments.
- [Deploying in VMware Tanzu | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/deploy/deploying-in-vmware-tanzu)
- [Deploying a Cluster on Amazon AWS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/deploy/deploying-on-aws): Deploy Hazelcast clusters on Amazon AWS EC2 and AWS ECS/Fargate environments and allow them to discover each other automatically.
- [Deploying a Cluster on Microsoft Azure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/deploy/deploying-on-azure): Deploy Hazelcast clusters on Azure and allow them to discover each other automatically.
- [Deploying a Cluster on Google Cloud Platform | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/deploy/deploying-on-gcp): Deploy Hazelcast clusters on Google Cloud Platform and allow them to discover each other automatically.
- [Installing a License Key on Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/deploy/installing-license-keys)
- [On-Premise | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/deploy/installing-upgrading)
- [Deploying on Docker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/deploy/installing-using-docker): In this deployment guide, you will learn how to form a cluster from Hazelcast member containers running on more than one Docker host in the same local area network (LAN).
- [Download Archives | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/deploy/installing-using-download-archives)
- [Monitoring License Keys | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/deploy/monitoring-license-keys): It's important to keep track of when your license key is due to expire. If you have an expired license, Hazelcast will not start.
- [Renewing a License Key | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/deploy/renewing-license-keys)
- [Running in Modular Java | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/deploy/running-in-modular-java)
- [Scaling and Upgrading Hazelcast Clusters in Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/deploy/scaling-and-upgrading-kubernetes): Scale up or down your Hazelcast cluster and upgrade all members, using rolling upgrades.
- [Updating a License Key with the REST API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/deploy/updating-license-rest): The REST API has a /license endpoint that allows you to temporarily update the license on a running member.
- [Supported Versions and Compatibilities | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/deploy/versioning-compatibility): This section provides the supported versions and interoperability of Hazelcast Platform and its modules.
- [Cluster Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/events/cluster-events)
- [Listening to Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/events/distributed-events)
- [Event Listeners for Hazelcast Clients | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/events/event-listeners-for-clients)
- [Global Event Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/events/global-event-configuration)
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/events/object-events)
- [Config Properties SPI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/extending-hazelcast/config-properties-spi)
- [Discovery SPI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/extending-hazelcast/discovery-spi)
- [Extending Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/extending-hazelcast/extending-hazelcast)
- [OperationParker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/extending-hazelcast/operationparker)
- [Frequently Asked Questions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/faq)
- [Backups | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/fault-tolerance/backups)
- [Fault Tolerance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/fault-tolerance/fault-tolerance)
- [Timeouts | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/fault-tolerance/timeouts)
- [Authenticate Client Connections | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/getting-started/authenticate-clients): This tutorial introduces you to member security by setting up authentication for client connections. At the end of this tutorial, you'll know how to configure member and client security settings to allow only authorized clients to connect to a cluster.
- [Before you Install Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/getting-started/before-you-begin): Hazelcast comes in different formats and distributions to accomodate a variety of use cases and application topologies. Before you install Hazelcast, you should learn about the different options and choose one.
- [Deploy Blue-Green Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/getting-started/blue-green): This tutorial introduces you to blue-green cluster deployments. At the end of this tutorial, you'll know how to set up a client to operate continuously even when its connected to a cluster that fails.
- [Hazelcast Editions and Licenses | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/getting-started/editions): Hazelcast has Open Source and Enterprise editions. Hazelcast Enterprise is the licensed commercial offering built on top of the Open Source product.
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/getting-started/enterprise-overview): This series of tutorials showcases some of the most useful features of Hazelcast Enterprise.
- [Start a Local Cluster from Binary | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/getting-started/get-started-binary): This tutorial introduces you to Hazelcast in a client/server topology. At the end of this tutorial, you'll know how to start a cluster from the binary distribution, store data in memory, visualize your data and more.
- [Start a Local Cluster in Docker | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/getting-started/get-started-docker): This tutorial introduces you to Hazelcast in a client/server topology. At the end of this tutorial, you'll know how to start a cluster in a single Docker host, store data in memory, visualize your data and more.
- [Installing Hazelcast Enterprise | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/getting-started/get-started-enterprise): To install Hazelcast Enterprise, you can use Docker, the binary, or Java. Then, to unlock the Enterprise features, you need to install your Enterprise license key.
- [Start a Local Embedded Cluster | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/getting-started/get-started-java): This tutorial introduces you to Hazelcast in an embedded topology. At the end of this tutorial, you'll know how to start a cluster in your Java application and store data in memory.
- [Installing Hazelcast Open Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/getting-started/install-hazelcast): You can install the Open Source edition of Hazelcast, using the command line interface (CLI), Docker, the binary, or Java.
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/getting-started/interactive-quickstart)
- [Persist Map Entries on Disk | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/getting-started/persistence): This tutorial introduces you to Hazelcast with Persistence enabled. At the end of this tutorial, you'll know how to enable Persistence for a map in your cluster and see the recovery of the map entries after a cluster shutdown.
- [Hazelcast Quickstart | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/getting-started/quickstart): Follow this five-minute tutorial to set up a Hazelcast cluster for testing or evaluation purposes. In five minutes, you will learn how to install Hazelcast, start a local cluster, and write data to memory.
- [Getting Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/getting-started/support): Hazelcast provides two types of support: one for the community and one for paying customers.
- [Replicate a Map over Clusters in a WAN | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/getting-started/wan): This tutorial introduces you to WAN Replication by replicating map entries across two clusters: London and Tokyo. At the end of this tutorial, you'll know how to synchronize a map from one cluster to another.
- [Glossary | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/glossary)
- [Ingesting Data from External Sources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/ingest/overview): Explore the tools that Hazelcast offers for data ingestion from both on-premise systems as well as cloud deployments.
- [CDC Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/cdc-connectors)
- [Connector Guides | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/connectors): Hazelcast comes out of the box with many different connectors for accessing data in a variety of platforms. These connectors are configured to read and write data in the most efficient way for their respective system. Explore the available connectors and choose one for your use case.
- [Custom Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/custom-connectors)
- [Data Structure Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/data-structure-connectors): Data structure connectors allow you to access data stored in Hazelcast data structures. Use these connectors to integrate Hazelcast data structures into your pipelines as sources or sinks.
- [Connectors for Databases | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/database-connectors)
- [Elasticsearch Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/elasticsearch-connector)
- [Unified File Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/file-connector): The unified file connector provides a simple way to read files across different sources. Using this connector, you can read files from the local filesystem, HDFS and cloud storage systems such as Amazon S3, Google Cloud Storage or Azure Blob Storage. This connector supports various data formats, including text files, CSV, JSON, and Avro.
- [HTTP Listener Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/http-connector)
- [InfluxDB Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/influxdb-connector)
- [JCache Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/jcache-connector): The JCache connector is mostly equivalent to the map connector, the main difference being that the JCache connector is compliant with the JCache standard API. As a sink, since JCache doesn't support entry processors, only the default variant is available.
- [JDBC Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/jdbc-connector)
- [JMS Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/jms-connector)
- [Apache Kafka Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/kafka-connector): The Kafka connector allows you to stream, filter, and transform events between Hazelcast clusters and Kafka.
- [Amazon Kinesis Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/kinesis-connector)
- [Legacy File Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/legacy-file-connector): The legacy file connector allows you to read and write to files, using the Jet API. This connector is still maintained, but all new development goes into the unified file connector.
- [List Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/list-connector)
- [Map Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/map-connector): A map is a distributed in-memory key-value data structure that can be used as a batch or streaming data source as well as a data sink.
- [Connectors for Messaging Systems | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/messaging-system-connectors)
- [MongoDB Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/mongodb-connector)
- [Observable Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/observable-connector): The observable connector provides a way of receiving query results on the same client that submitted a job. This connector is useful when you are using the Jet API for ad-hoc queries and you want to use your client as a sink.
- [Apache Pulsar Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/pulsar-connector)
- [Redis Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/redis-connector)
- [Reliable Topic Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/reliable-topic-connector)
- [Socket Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/socket-connector)
- [Test Source Connectors | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/test-connectors): Test sources make it convenient to get started with pipelines without having to use an actual data source. They can also be used for unit testing different pipelines where you can expect a more deterministic import.
- [Twitter Connector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrate/twitter-connector)
- [Integration with Hibernate Second Level Cache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrated-clustering/hibernate-second-level-cache)
- [Integrated Clustering | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrated-clustering/integrated-clustering)
- [Integration with Java EE | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrated-clustering/javaee)
- [Integration with Spring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrated-clustering/spring)
- [Web Session Replications | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/integrated-clustering/web-session-replication)
- [JCache API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/jcache/api)
- [JCache - Hazelcast Instance Integration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/jcache/hazelcast-integration)
- [Hazelcast JCache Extension - ICache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/jcache/icache)
- [Hazelcast JCache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/jcache/jcache)
- [JCache Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/jcache/overview)
- [JCache Providers | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/jcache/providers)
- [JCache Setup and Configuration | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/jcache/setup)
- [Testing for JCache Specification Compliance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/jcache/tck)
- [List of Hazelcast Metrics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/list-of-metrics)
- [Cluster and Member States | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/maintain-cluster/cluster-member-states): Cluster states determine what cluster operations are available. By changing the state of a cluster, you can grant or restrict cluster operations such as repartitioning as well as change the behavior of those operations.
- [Enabling Lite Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/maintain-cluster/lite-members)
- [Configuring Logging | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/maintain-cluster/logging): Options available for the logging mechanism of Hazelcast clusters.
- [Filtering Members with Attributes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/maintain-cluster/member-attributes)
- [Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/maintain-cluster/monitoring): Options available for monitoring the health and operations of Hazelcast clusters.
- [REST API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/maintain-cluster/rest-api)
- [Rolling Upgrades | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/maintain-cluster/rolling-upgrades): You can use rolling upgrades to upgrade the version of Hazelcast members in a running cluster without interrupting the operation of the cluster.
- [Shutting Down Members and Clusters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/maintain-cluster/shutdown): Maintaining a cluster often requires shutting down clusters or individual members to make changes take effect. Hazelcast offers convenient methods for shutting down clusters as well as graceful and ungraceful options for specific members.
- [Cluster Utilities | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/management/cluster-utilities)
- [Evaluating 5.x (For IMDG 3.x Users) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/migrate/evaluation-tool)
- [Migrating Data from IMDG 3.12.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/migrate/migration-tool-imdg): This guide explains how to migrate data in maps or JCache data structures from a running IMDG 3.12.x cluster to a Hazelcast 5.x cluster.
- [Upgrading from IMDG 3.12.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/migrate/upgrading-from-imdg-3)
- [Upgrading from IMDG 4.x | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/migrate/upgrading-from-imdg-4): This guide covers the most important changes that affect users of IMDG 4.x who want to upgrade to Hazelcast.
- [Upgrading from Jet | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/migrate/upgrading-from-jet): This guide covers the most important changes that affect users of Jet 4.x who want to upgrade to Hazelcast.
- [Dealing with Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/network-partitioning/dealing-with-network-partitions)
- [Network Partitioning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/network-partitioning/network-partitioning)
- [Partial Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/network-partitioning/partial-network-partitions)
- [Split-Brain Protection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/network-partitioning/split-brain-protection)
- [Split-Brain Recovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/network-partitioning/split-brain-recovery)
- [API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/osgi/api)
- [Configuring Hazelcast OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/osgi/configuring-osgi-support)
- [Design | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/osgi/design)
- [OSGI | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/osgi/osgi)
- [OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/osgi/osgi-support)
- [Using Hazelcast OSGI Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/osgi/using-osgi-service)
- [Architecture Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/overview/architecture)
- [Data Partitioning | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/overview/data-partitioning)
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/overview/hazelcast-overview)
- [Developer Resources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/overview/resources)
- [Topology | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/overview/topology)
- [Use Cases | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/overview/use-cases)
- [Distinctive Strengths | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/overview/what-is-imdg)
- [Back Pressure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/performance/back-pressure)
- [Performance Anti Patterns | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/performance/best-practices)
- [Caching Deserialized Values | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/performance/caching-deserialized-values)
- [CPU Thread Affinity | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/performance/cpu-thread-affinity)
- [Data Affinity | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/performance/data-affinity)
- [Near Cache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/performance/near-cache)
- [Performance | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/performance/performance)
- [Pipelining | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/performance/pipelining)
- [Running on EC2 | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/performance/running-on-ec2)
- [SlowOperationDetector | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/performance/slowoperationdetector)
- [Threading Model | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/performance/threading-model)
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/phone-homes)
- [About Stream Processing Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/building-pipelines): Streaming jobs are those that process a infinite amount of data such as a continuous event stream. Because these jobs continue to run until they are canceled, you must use timestamps to define time windows in which to collect events.
- [Capture Changes from MySQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/cdc)
- [Setting Up a Database for Change Data Capture | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/cdc-database-setup)
- [Join Change Data Capture Records | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/cdc-join)
- [Change Data Capture (CDC) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/cdc-overview): Change Data Capture (CDC) is a pipeline pattern for observing changes made to a database and extracting them in a form usable by other systems, for the purposes of replication, analysis and more.
- [Capture Changes from PostgreSQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/cdc-postgres)
- [Configuring Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/configuring-jobs): Before submitting a job to a cluster, you can configure its name, whether to record metrics, and how it behaves when cluster members fail.
- [Building a Custom Aggregate Operation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/custom-aggregate-operation)
- [Adding Batching to a Custom Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/custom-batch-source): To improve the throughput of your custom sources, you can add batching to reads.
- [Create a Custom Sink | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/custom-sink)
- [Creating a Custom Streaming Source | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/custom-stream-source): If Hazelcast is missing a built-in source that you want to use, you can build your own, using the Jet API.
- [Extract Transform Load (ETL) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/etl-overview): ETL is a pipeline pattern for collecting data from various sources, transforming (changing) it to conform to some rules, and loading it into a sink. This pattern is often used to form materialized views where data is processed and put into a Hazelcast map for fast in-memory queries.
- [Stream Processing and Event Timestamps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/event-time)
- [Mapping Data in a Pipeline Using a a gRPC Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/grpc): When processing data in a pipeline, you can use an external service to execute a function on input data, and pass the output to the next stage of pipeline. A popular way of exposing external services is to use the gRPC protocol.
- [Ingesting Data from Sources | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/ingesting-from-sources): In order to process data, you first need to ingest it into your pipeline, using one or more sources.
- [Managing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/job-management): Once a job is submitted, it has its own lifecycle on the cluster which is distinct from the submitter. To manage the lifecycle of data pipelines, you can use either SQL or CLI commands to list, cancel, suspend, resume, and restart jobs.
- [Securing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/job-security): While submitting jobs, you can upload custom code that bypasses client permissions. Jobs also have access to data outside of Hazelcast such as files on the device that's running a member. As a result, it's important to be aware of how to secure your Hazelcast member against malicious jobs.
- [Updating Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/job-update): Update streaming jobs without losing computation state.
- [Connect to Apache Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/kafka)
- [Connect to Amazon Kinesis | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/kinesis)
- [Enrich a Stream | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/map-join): In this tutorial, you build a pipeline that takes a stream of trades from a stock exchange and enriches it with a full company name for nicer presentation. Each trade contains a stock symbol, also known as ticker, which uniquely identifies the stock. You will use the ticker to look up the full company name in a replicated map.
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/object-events)
- [Receiving Pipeline Results on the Client | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/observables)
- [About Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/overview): Learn about the core concepts of data pipelines and how you can build your own with the Hazelcast Jet engine.
- [Group Messages from Apache Pulsar | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/pulsar)
- [Apply a Custom Transform with Python | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/python)
- [Sending Results to Sinks | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/sending-data-to-sinks): After defining the processing steps in a pipeline, you must send the results to at least one destination called a sink. Hazelcast comes with built-in sinks as well as a public API for building your own.
- [Serializing Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/serialization)
- [Spring Boot Starter | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/spring-boot)
- [Subscribe to Changes to a Map | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/stream-imap)
- [Get Started with Stream Processing (Client/Server) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/stream-processing-client): This tutorial shows you how to use a Hazelcast cluster as a data processing engine for your client applications. At the end of this tutorial, you'll know how to build a data pipeline in Java and submit it as a job to your Hazelcast cluster.
- [Get Started with Stream Processing (Embedded) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/stream-processing-embedded): This tutorial shows you how to use Hazelcast as a streaming engine that's embedded in your Java application. At the end of this tutorial, you'll know how to ingest data from some test sources and filter it continuously to generate results in real time.
- [Submitting Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/submitting-jobs): Submit data pipelines to a Hazelcast cluster for execution.
- [Transforms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/transforms): Hazelcast offers several transforms which can be used to process data. Explore the available transforms and learn how to use them.
- [Apply Windowed Aggregation | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/windowing)
- [Testing Sources and Sinks for XA Transaction Support | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/pipelines/xa): In order to have end-to-end exactly-once processing in pipelines, sources and sinks need to support it too. Although many sources and sinks ensure atomicity (all distributed participants either commit the transaction or roll back), some do not survive a client disconnection. You can test whether a source or a sink will survive a client disconnection, using either JDBC or Java Messaging Service (JMS).
- [Cloud Discovery Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/plugins/cloud-discovery)
- [Framework Integration Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/plugins/framework-integration)
- [Hazelcast Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/plugins/hazelcast-plugins)
- [Other Integrations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/plugins/other-integrations)
- [Web Session Replication Plugins | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/plugins/web-session-replication)
- [Production Checklist | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/production-checklist): The production checklist provides a set of best practices and recommendations to ensure a smooth transition to a production environment which runs a Hazelcast cluster.
- [Aggregations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/query/aggregations)
- [Continuous Queries for Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/query/continuous-query-cache)
- [Creating Custom Query Attributes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/query/custom-attributes)
- [Indexing Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/query/indexing-maps): When members run queries, they iterate through all their owned entries and find the ones that match the query. Indexes allow members to find matching entries faster by reducing the number of entries to check.
- [Running Distributed Queries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/query/overview): Explore the tools that Hazelcast offers for running distributed queries.
- [Predicates API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/query/predicate-overview)
- [Projections | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/query/projections)
- [Querying in Collections and Arrays | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/query/querying-collections-and-arrays)
- [Querying Maps with the Predicate API | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/query/querying-maps-predicates)
- [Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/release-notes)
- [Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/release-notes/5-0)
- [5.0.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/release-notes/5-0-1): These release notes list any new features, enhancements, and fixes that were made between version 5.0 and 5.0.1 of Hazelcast Platform.
- [5.0.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/release-notes/5-0-2): These release notes list any new features, enhancements, and fixes that were made between version 5.0.1 and 5.0.2 of Hazelcast Platform.
- [5.0.3 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/release-notes/5-0-3): These release notes list any new features, enhancements, and fixes that were made between version 5.0.2 and 5.0.3 of Hazelcast Platform.
- [5.0.4 | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/release-notes/5-0-4): These release notes list any new features, enhancements, and fixes that were made between version 5.0.3 and 5.0.4 of Hazelcast Platform.
- [5.0.5 | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/release-notes/5-0-5): These release notes list any new features, enhancements, and fixes that were made between version 5.0.4 and 5.0.5 of Hazelcast Platform.
- [Hazelcast Platform 5.0.X Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/release-notes/releases)
- [Security Hardening Recommendations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/secure-cluster/hardening-recommendations)
- [What is an Insecure Cluster | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/secure-cluster/insecure-cluster)
- [Security Defaults | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/secure-cluster/security-defaults)
- [Cluster Member Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/security/cluster-member-security)
- [Default authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/security/default-authentication)
- [Enabling JAAS Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/security/enabling-jaas)
- [Encryption | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/security/encryption)
- [FIPS 140-2 | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/security/fips-140-2)
- [Integrating OpenSSL / BoringSSL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/security/integrating-openssl)
- [JAAS authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/security/jaas-authentication)
- [Logging Auditable Events | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/security/logging-auditable-events)
- [Client Security | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/security/native-client-security): To protect your members from a malicious client, you can allow them to identify clients and restrict their permissions to access either data in data structures or features such as user code deployment.
- [Security Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/security/overview)
- [Security Debugging | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/security/security-debugging)
- [Security Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/security/security-interceptor)
- [Security Realms | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/security/security-realms)
- [Simple authentication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/security/simple-authentication)
- [Socket Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/security/socket-interceptor)
- [Other TLS Related configurations | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/security/tls-configuration)
- [TLS/SSL Basics | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/security/tls-ssl)
- [Validating Secrets Using Strength Policy | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/security/validating-secrets)
- [Compact Serialization (BETA) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/serialization/compact-serialization)
- [Comparing Serialization Interfaces | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/serialization/comparing-interfaces)
- [Custom Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/serialization/custom-serialization)
- [Global Serializer | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/serialization/global-serializer)
- [Implementing DataSerializable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/serialization/implementing-dataserializable)
- [Implementing HazelcastInstanceAware | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/serialization/implementing-hazelcastinstanceaware)
- [Implementing Java Serializable and Externalizable | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/serialization/implementing-java-serializable)
- [Implementing Portable Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/serialization/implementing-portable-serialization)
- [Serialization Interface Types | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/serialization/interface-types)
- [Overriding the Built-in Serializers | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/serialization/overriding-built-in-serializers)
- [Serialization | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/serialization/serialization): To be able to send data over a network between cluster members and/or clients, you have to serialize it into raw bytes. Hazelcast has many serialization methods to choose from, depending on which Hazelcast topology you are using and what you plan on doing with your data.
- [Serialization Configuration Wrap-Up | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/serialization/serialization-configuration)
- [Untrusted Deserialization Protection | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/serialization/untrusted-deserialization-protection)
- [Hazelcast Simulator | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/simulator)
- [ALTER JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/alter-job): The ALTER JOB statement can supend, resume, or restart a job that is running on a cluster.
- [Connecting to the SQL Service | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/connecting-to-sql): You can connect to the SQL service of a Hazelcast member using a shell, a client API, or Management Center.
- [CREATE JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/create-job): The CREATE JOB statement submits a job to Hazelcast to run independently of the SQL client. With this statement, you can run an SQL statement in the background.
- [CREATE MAPPING | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/create-mapping): The CREATE MAPPING statement creates a table that stores essential metadata about a source's data model, data access patterns, and serialization formats so that the SQL service can connect to the data source and query it.
- [CREATE OR REPLACE SNAPSHOT (Enterprise only) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/create-snapshot): The CREATE OR REPLACE SNAPSHOT statement creates a named snapshot that you can use to start other jobs or keep as a backup.
- [SQL Data Types | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/data-types): Hazelcast supports a subset of SQL data types. Each data type is mapped to a Java class, which represents the type's value.
- [DELETE | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/delete): The DELETE statement deletes map entries that match the condition in a given WHERE clause.
- [DROP JOB | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/drop-job): The DROP JOB statement cancels a job and gives you the option to create a named snapshot from it.
- [DROP MAPPING | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/drop-mapping): The DROP MAPPING statement removes a mapping from the public schema.
- [DROP SNAPSHOT (Enterprise only) | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/drop-snapshot): The DROP SNAPSHOT statement cancels a named snapshot.
- [SQL Functions and Operators | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/expressions): Hazelcast supports logical and `IS` predicates, comparison and mathematical operators, and aggregate, mathematical, trigonometric, string, table-valued, and special functions.
- [Finding Existing Mappings | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/finding-mappings): You can find out information about existing mappings such as column names and their SQL data types.
- [Get Started with SQL Over Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/get-started-sql): In this tutorial, you learn the basics of querying maps in SQL by running ad-hoc and batch queries on some test data.
- [Get Started with SQL Over Files | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/get-started-sql-files): In this tutorial, you learn the basics of querying files in SQL by creating and querying a CSV file.
- [Improving the Performance of SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/improving-performance): You can improve the performance of queries over maps by indexing map entries.
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/interactive-sql-files)
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/interactive-sql-kafka)
- [Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/interactive-sql-maps)
- [Get Started with SQL Over Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/learn-sql): In this tutorial, you use an interactive SQL shell on a Hazelcast member to query Kafka topics in real-time.
- [Creating a Mapping to a File System | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/mapping-to-a-file-system): Before you can query data in files, you need to create a mapping with the unified file connector so that the SQL service knows how to access the data in the most efficient way.
- [Mapping to Kafka | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/mapping-to-kafka): Before you can query streaming messages in Kafka topics, you need to create a mapping with the Kafka connector so that the SQL service knows how to access messages in the most efficient way.
- [Mapping to Hazelcast Maps | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/mapping-to-maps): Before you can query entries in maps, you need to create a mapping with the map connector so that the SQL service knows how to access the entries in the most efficient way.
- [Using Query Parameters | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/parameterized-queries): In Hazelcast clients, you can use query parameters to build safer, faster SQL queries.
- [Querying Maps with SQL | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/querying-maps-sql): You can use SQL to run optimized distributed queries on the keys and values of maps in a local cluster.
- [SELECT | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/select): The SELECT statement reads data from tables, allowing you to query and process your data based on one or more parameters.
- [SHOW JOBS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/show-jobs): The SHOW JOBS statement displays an alphabetical list of all named jobs. The list includes any existing jobs that were submitted through the Java API as long as they have a name. The list does not include jobs that have already completed with or without an error.
- [SHOW MAPPINGS | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/show-mappings): The SHOW MAPPINGS statement displays an alphabetical list of all mappings.
- [INSERT INTO/SINK INTO | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/sink-into): The <code>INSERT INTO</code>/<code>SINK INTO</code> statements write data to platforms that are connected to Hazelcast through connectors.
- [SQL Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/sql-overview): You can use SQL to query data in maps, Kafka topics, or a variety of file systems. Results can be sent directly to the client or inserted into maps or Kafka topics. For streaming queries, you can submit them to a cluster as jobs to run in the background.
- [SQL Statements | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/sql-statements): Hazelcast supports the following SQL statements. Explore the available statements and find more details about them.
- [UPDATE | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/sql/update): The UPDATE statement overwrites the values of map entries that match the condition in a given WHERE clause.
- [Backing Up the Persistence Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/storage/backing-up-persistence): You can trigger backups of your persistence store, using the Java API, REST API, or Management Center. Backing up the persistence store is useful if you want to copy the data onto other clusters without having to shut down your cluster.
- [Configuring Persistence | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/storage/configuring-persistence): You can configure clusters to persist data structures and job snapshots on disk as well as fine-tune many other options such as backups, encryption, and auto-recovery.
- [Copying Persisted Data onto other Members | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/storage/copying-persistence): When you persist data on disk, you may want to copy that data onto another cluster to perform testing, QA, or reproduce an issue on production data.
- [High-Density Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/storage/high-density-memory): The High-Density Memory Store is Hazelcast's enterprise in-memory storage solution. It solves garbage collection limitations so that applications can exploit hardware memory more efficiently without the need of oversized clusters.
- [Persistence Performance Benchmark | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/storage/performance): Find summaries of Persistence performance tests that were performed with a single Hazelcast member running on a physical server and on AWS R3.
- [Persisting Data on Disk | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/storage/persistence): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Persistence Design Details | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/storage/persistence-design)
- [Store Persistence Data on Intel® Optane™ DC Persistent Memory | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/storage/persistence-on-intel): In this tutorial, you'll use Intel® Optane™ DC Persistent Memory (PMem) to improve the performance of disk reads and writes, allowing your cluster to access data on disk faster.
- [Triggering a Force-Start | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/storage/triggering-force-start): To recover a cluster that has Persistence enabled after a cluster-wide restart, you can force a cluster to delete their persistence stores when one or more members fail to restart.
- [Triggering a Partial-Start | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/storage/triggering-partial-start): To recover a cluster that has Persistence enabled after a cluster-wide restart, you can force a cluster to start without some members when one or more of them fail.
- [System Properties | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/system-properties)
- [Testing Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/test/testing)
- [Testing Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/test/testing-apps)
- [Hazelcast Topologies | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/topologies): Hazelcast allows you to use it in either embedded mode or client/server mode. The mode you choose has an effect on your applications performance, your ability to scale your cluster, and how you communicate with your cluster.
- [Creating a Transaction Interface | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/transactions/creating-a-transaction-interface)
- [Providing XA Transactions | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/transactions/providing-xa-transactions)
- [Error Handling Strategies for Jobs | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/troubleshoot/error-handling): Jobs may not run as expected due to I/O errors in sources and sinks, or coding and input data errors in your pipelines. To handle these errors you can use one of the following strategies.
- [Recovery from Client Connection Failures | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/troubleshoot/recovery-clients)
- [Recovery from a Partial or Total Failure | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/troubleshoot/recovery-members)
- [Actions and Remedies for Alerts | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/troubleshoot/remedies-for-alerts): Find advice for remedies for the Hazelcast alerts.
- [Troubleshooting Overview | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/troubleshoot/troubleshooting): Find advice for troubleshooting issues in your Hazelcast applications or your cluster deployments.
- [Advanced Features | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/wan/advanced-features)
- [Configuring for IMap and ICache | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/wan/configuring-for-map-and-cache)
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/wan/defining-wan-replication)
- [Failure Detection and Recovery | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/wan/failures)
- [WAN Replication Modes | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/wan/modes)
- [WAN Quickstart | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/wan/quick-start)
- [REST API Wrap-Up | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/wan/rest-api)
- [Fine-Tuning WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/wan/tuning)
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/hazelcast/5.0/wan/wan)

## Home

- [Hazelcast Documentation](https://docs.hazelcast.com/home/)

## Imdg

- [Hazelcast IMDG Reference Manual 4.2.8 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/)
- [C++ Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clients/cplusplus)
- [.NET Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clients/dotnet)
- [Go Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clients/go)
- [Hazelcast Clients | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clients/hazelcast-clients)
- [Java Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clients/java)
- [Memcache Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clients/memcache)
- [Node.js Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clients/nodejs)
- [Python Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clients/python)
- [REST Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clients/rest)
- [Accessing Domain Objects without Domain Classes - BETA | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clusters/accessing-domain-objects)
- [Advanced Network Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clusters/advanced-network-configuration)
- [Creating Clusters | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clusters/creating-clusters)
- [Deploying User Code from Clients | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clusters/deploying-code-from-clients)
- [Deploying User Code on the Member | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clusters/deploying-code-on-member)
- [Discovering Members by Auto Detection | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clusters/discovering-by-auto-detection)
- [Discovering Members by Multicast | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clusters/discovering-by-multicast)
- [Discovering Members by TCP | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clusters/discovering-by-tcp)
- [Discovering Native Clients | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clusters/discovering-native-clients)
- [Discovery Mechanisms | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clusters/discovery-mechanisms)
- [Failure Detector Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clusters/failure-detector-configuration)
- [Logging Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clusters/logging-configuration)
- [Other Network Configurations | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clusters/network-configuration)
- [Partition Group Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clusters/partition-group-configuration)
- [Setting Up Clusters | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/clusters/setting-up-clusters)
- [Common Exception Types | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/common-exception-types)
- [Distributed Computing | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/computing/distributed-computing)
- [Durable Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/computing/durable-executor-service)
- [Entry Processor | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/computing/entry-processor)
- [Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/computing/executor-service)
- [Scheduled Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/computing/scheduled-executor-service)
- [Declarative Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/configuration/configuring-declaratively)
- [Programmatic Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/configuration/configuring-programmatically)
- [Configuring with System Properties | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/configuration/configuring-with-system-properties)
- [Configuring within the Spring Context | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/configuration/configuring-within-spring)
- [Dynamically Adding Data Structure Configuration on a Cluster | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/configuration/dynamic-data-structure-configuration): Dynamic configuration allows you to temporarily change the configuration of some data structures at runtime. This option is useful if you want to reconfigure a data structure without having to shut down cluster members.
- [Overriding Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/configuration/overriding-configuration-settings)
- [Configuration Pattern Matcher | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/configuration/pattern-matcher)
- [Configuration Options | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/configuration/understanding-configuration): To configure Hazelcast applications, you can choose either static or dynamic configuration. Explore the options and decide which one is best for your application.
- [Using Variables | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/configuration/using-variables)
- [Using Wildcards | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/configuration/using-wildcards)
- [Variable Replacers | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/configuration/variable-replacers)
- [Consistency and Replication Model | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/consistency-and-replication/consistency)
- [Exactly-once, At-least-once or At-most-once Execution | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/consistency-and-replication/exactly-once-execution)
- [IndeterminateOperationStateException | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/consistency-and-replication/indeterminateoperationstateexception)
- [Invocation Lifecycle | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/consistency-and-replication/invocation-lifecycle)
- [Hazelcast’s Replication Algorithm | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/consistency-and-replication/replication-algorithm)
- [Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/cp-subsystem/configuration)
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/cp-subsystem/cp-subsystem)
- [CP Discovery Process | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/cp-subsystem/discovery-process)
- [CP Subsystem’s Fault Tolerance Capabilities | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/cp-subsystem/fault-tolerance)
- [FencedLock | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/cp-subsystem/fencedlock)
- [CP Subsystem Listeners | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/cp-subsystem/listeners)
- [CP Subsystem Management | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/cp-subsystem/management)
- [CP Member Shutdown | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/cp-subsystem/member-shutdown)
- [CP Subsystem Persistence | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/cp-subsystem/persistence)
- [CP Sessions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/cp-subsystem/sessions)
- [CP Subsystem Unsafe Mode | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/cp-subsystem/unsafe-mode)
- [Cardinality Estimator Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/cardinality-estimator-service)
- [Distributed Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/distributed-data-structures)
- [Event Journal | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/event-journal)
- [FencedLock | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/fencedlock)
- [Flake ID Generator | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/flake-id-generator)
- [IAtomicLong | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/iatomiclong)
- [IAtomicReference | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/iatomicreference)
- [ICountDownLatch | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/icountdownlatch)
- [ISemaphore | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/isemaphore)
- [List | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/list)
- [Map | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/map)
- [MultiMap | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/multimap)
- [Overview of Hazelcast Distributed Objects | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/overview)
- [PN Counter | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/pn-counter)
- [Priority Queue | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/priority-queue)
- [Queue | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/queue)
- [Reliable Topic | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/reliable-topic)
- [Replicated Map | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/replicated-map)
- [Ringbuffer | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/ringbuffer)
- [Set | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/set)
- [Topic | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/data-structures/topic)
- [Cluster Events | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/events/cluster-events)
- [Distributed Events | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/events/distributed-events)
- [Event Listeners for Hazelcast Clients | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/events/event-listeners-for-clients)
- [Global Event Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/events/global-event-configuration)
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/events/object-events)
- [Config Properties SPI | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/extending-hazelcast/config-properties-spi)
- [Discovery SPI | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/extending-hazelcast/discovery-spi)
- [Extending Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/extending-hazelcast/extending-hazelcast)
- [OperationParker | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/extending-hazelcast/operationparker)
- [Frequently Asked Questions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/faq)
- [Quickstart | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/getting-started)
- [Glossary | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/glossary)
- [Hazelcast Jet | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/hazelcast-jet)
- [Hazelcast Cloud | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/installation/deploying-hazelcast-cloud)
- [Deploying in Cloud Providers | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/installation/deploying-in-cloud)
- [Kubernetes/OpenShift Deployment | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/installation/deploying-in-kubernetes)
- [Deploying in VMware Tanzu | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/installation/deploying-in-vmware-tanzu)
- [Installing and Upgrading | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/installation/installing-upgrading)
- [CLI | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/installation/installing-using-cli)
- [Docker | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/installation/installing-using-docker)
- [Download Archives | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/installation/installing-using-download-archives)
- [Maven | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/installation/installing-using-maven)
- [Rolling Member Upgrades | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/installation/rolling-upgrades)
- [Running in Modular Java | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/installation/running-in-modular-java)
- [Supported Java Virtual Machines | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/installation/supported-jvms)
- [Using Pro and Enterprise editions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/installation/using-enterprise-edition)
- [Integration with Hibernate Second Level Cache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/integrated-clustering/hibernate-second-level-cache)
- [Integrated Clustering | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/integrated-clustering/integrated-clustering)
- [Integration with Java EE | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/integrated-clustering/javaee)
- [Integration with Spring | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/integrated-clustering/spring)
- [Web Session Replications | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/integrated-clustering/web-session-replication)
- [JCache API | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/jcache/api)
- [JCache - Hazelcast Instance Integration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/jcache/hazelcast-integration)
- [Hazelcast JCache Extension - ICache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/jcache/icache)
- [Hazelcast JCache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/jcache/jcache)
- [JCache Overview | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/jcache/overview)
- [JCache Providers | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/jcache/providers)
- [JCache Setup and Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/jcache/setup)
- [Testing for JCache Specification Compliance | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/jcache/tck)
- [License Questions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/licenses)
- [Cluster Utilities | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/management/cluster-utilities)
- [Diagnostics | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/management/diagnostics)
- [Health Check and Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/management/health-check-monitoring)
- [Instance Tracking | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/management/instance-tracking)
- [JMX API per Member | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/management/jmx-api)
- [Monitoring with JMX | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/management/jmx-monitoring)
- [License Information | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/management/license-info)
- [Management | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/management/management)
- [Management Center | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/management/management-center)
- [Getting Member Statistics | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/management/member-statistics)
- [Metrics | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/management/metrics)
- [Using the REST Endpoint Groups | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/management/rest-endpoint-groups)
- [Migration Guides | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/migration-guides)
- [Dealing with Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/network-partitioning/dealing-with-network-partitions)
- [Network Partitioning | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/network-partitioning/network-partitioning)
- [Partial Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/network-partitioning/partial-network-partitions)
- [Split-Brain Protection | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/network-partitioning/split-brain-protection)
- [Split-Brain Recovery | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/network-partitioning/split-brain-recovery)
- [API | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/osgi/api)
- [Configuring Hazelcast OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/osgi/configuring-osgi-support)
- [Design | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/osgi/design)
- [OSGI | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/osgi/osgi)
- [OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/osgi/osgi-support)
- [Using Hazelcast OSGI Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/osgi/using-osgi-service)
- [Architecture | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/overview/architecture)
- [Data Partitioning | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/overview/data-partitioning)
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/overview/hazelcast-overview)
- [Resources | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/overview/resources)
- [Topology | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/overview/topology)
- [Use Cases | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/overview/use-cases)
- [What is Hazelcast IMDG? | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/overview/what-is-imdg)
- [Back Pressure | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/performance/back-pressure)
- [Best Practices | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/performance/best-practices)
- [Caching Deserialized Values | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/performance/caching-deserialized-values)
- [CPU Thread Affinity | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/performance/cpu-thread-affinity)
- [Data Affinity | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/performance/data-affinity)
- [Near Cache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/performance/near-cache)
- [Performance | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/performance/performance)
- [Pipelining | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/performance/pipelining)
- [Running on EC2 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/performance/running-on-ec2)
- [SlowOperationDetector | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/performance/slowoperationdetector)
- [Threading Model | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/performance/threading-model)
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/phone-homes)
- [Cloud Discovery Plugins | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/plugins/cloud-discovery)
- [Framework Integration Plugins | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/plugins/framework-integration)
- [Hazelcast Plugins | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/plugins/hazelcast-plugins)
- [Other Integrations | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/plugins/other-integrations)
- [Web Session Replication Plugins | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/plugins/web-session-replication)
- [Aggregations | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/query/aggregations)
- [Continuous Query Cache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/query/continuous-query-cache)
- [Custom Attributes | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/query/custom-attributes)
- [Distributed Query | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/query/distributed-query)
- [How Distributed Query Works | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/query/how-distributed-query-works)
- [Projections | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/query/projections)
- [Querying in Collections and Arrays | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/query/querying-collections-and-arrays)
- [Cluster Member Security | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/security/cluster-member-security)
- [Default authentication | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/security/default-authentication)
- [Enabling JAAS Security | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/security/enabling-jaas)
- [Encryption | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/security/encryption)
- [FIPS 140-2 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/security/fips-140-2)
- [Integrating OpenSSL / BoringSSL | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/security/integrating-openssl)
- [JAAS authentication | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/security/jaas-authentication)
- [Logging Auditable Events | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/security/logging-auditable-events)
- [Native Client Security | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/security/native-client-security)
- [Security | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/security/security)
- [Security Debugging | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/security/security-debugging)
- [Security Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/security/security-interceptor)
- [Security Realms | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/security/security-realms)
- [Socket Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/security/socket-interceptor)
- [Other TLS Related configurations | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/security/tls-configuration)
- [TLS/SSL | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/security/tls-ssl)
- [Validating Secrets Using Strength Policy | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/security/validating-secrets)
- [Comparing Serialization Interfaces | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/serialization/comparing-interfaces)
- [Custom Serialization | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/serialization/custom-serialization)
- [Global Serializer | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/serialization/global-serializer)
- [Implementing DataSerializable | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/serialization/implementing-dataserializable)
- [Implementing HazelcastInstanceAware | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/serialization/implementing-hazelcastinstanceaware)
- [Implementing Java Serializable and Externalizable | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/serialization/implementing-java-serializable)
- [Implementing Portable Serialization | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/serialization/implementing-portable-serialization)
- [Serialization Interface Types | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/serialization/interface-types)
- [Overriding the Built-in Serializers | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/serialization/overriding-built-in-serializers)
- [Serialization | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/serialization/serialization)
- [Serialization Configuration Wrap-Up | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/serialization/serialization-configuration)
- [Untrusted Deserialization Protection | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/serialization/untrusted-deserialization-protection)
- [Hazelcast Simulator | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/simulator)
- [Data Types | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/sql/data-types)
- [SQL | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/sql/distributed-sql)
- [Expressions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/sql/expressions)
- [How Distributed SQL Works | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/sql/how-distributed-sql-works)
- [Lite Members | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/sql/lite-members)
- [Querying IMap | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/sql/querying-imap)
- [SELECT | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/sql/select-statement)
- [SQL on Data Structures Backed by High-Density Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/sql/sql-and-high-density-memory)
- [Starting the Members and Clients | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/starting-members-clients)
- [High-Density Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/storage/high-density-memory)
- [Hot Restart Persistence | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/storage/hot-restart-persistence)
- [Sizing Practices | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/storage/sizing-practices)
- [Storage | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/storage/storage)
- [System Properties | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/system-properties)
- [Creating a Transaction Interface | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/transactions/creating-a-transaction-interface)
- [Providing XA Transactions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/transactions/providing-xa-transactions)
- [Transactions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/transactions/transactions)
- [Advanced Features | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/wan/advanced-features)
- [Configuring for IMap and ICache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/wan/configuring-for-map-and-cache)
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/wan/defining-wan-replication)
- [Failure Detection and Recovery | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/wan/failures)
- [WAN Replication Modes | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/wan/modes)
- [Quick Start | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/wan/quick-start)
- [REST API Wrap-Up | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/wan/rest-api)
- [Fine-Tuning WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/wan/tuning)
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.2/wan/wan)
- [Hazelcast IMDG Reference Manual 4.1.10 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/)
- [C++ Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clients/cplusplus)
- [.NET Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clients/dotnet)
- [Go Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clients/go)
- [Hazelcast Clients | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clients/hazelcast-clients)
- [Java Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clients/java)
- [Memcache Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clients/memcache)
- [Node.js Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clients/nodejs)
- [Python Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clients/python)
- [REST Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clients/rest)
- [Accessing Domain Objects without Domain Classes - BETA | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clusters/accessing-domain-objects)
- [Advanced Network Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clusters/advanced-network-configuration)
- [Creating Clusters | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clusters/creating-clusters)
- [Deploying User Code from Clients | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clusters/deploying-code-from-clients)
- [Deploying User Code on the Member | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clusters/deploying-code-on-member)
- [Discovering Members by Auto Detection | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clusters/discovering-by-auto-detection)
- [Discovering Members by Multicast | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clusters/discovering-by-multicast)
- [Discovering Members by TCP | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clusters/discovering-by-tcp)
- [Discovering Native Clients | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clusters/discovering-native-clients)
- [Discovery Mechanisms | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clusters/discovery-mechanisms)
- [Failure Detector Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clusters/failure-detector-configuration)
- [Logging Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clusters/logging-configuration)
- [Other Network Configurations | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clusters/network-configuration)
- [Partition Group Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clusters/partition-group-configuration)
- [Setting Up Clusters | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/clusters/setting-up-clusters)
- [Common Exception Types | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/common-exception-types)
- [Distributed Computing | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/computing/distributed-computing)
- [Durable Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/computing/durable-executor-service)
- [Entry Processor | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/computing/entry-processor)
- [Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/computing/executor-service)
- [Scheduled Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/computing/scheduled-executor-service)
- [Declarative Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/configuration/configuring-declaratively)
- [Programmatic Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/configuration/configuring-programmatically)
- [Configuring with System Properties | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/configuration/configuring-with-system-properties)
- [Configuring within the Spring Context | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/configuration/configuring-within-spring)
- [Dynamically Adding Data Structure Configuration on a Cluster | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/configuration/dynamic-data-structure-configuration): Dynamic configuration allows you to temporarily change the configuration of some data structures at runtime. This option is useful if you want to reconfigure a data structure without having to shut down cluster members.
- [Overriding Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/configuration/overriding-configuration-settings)
- [Configuration Pattern Matcher | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/configuration/pattern-matcher)
- [Configuration Options | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/configuration/understanding-configuration): To configure Hazelcast applications, you can choose either static or dynamic configuration. Explore the options and decide which one is best for your application.
- [Using Variables | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/configuration/using-variables)
- [Using Wildcards | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/configuration/using-wildcards)
- [Variable Replacers | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/configuration/variable-replacers)
- [Consistency and Replication Model | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/consistency-and-replication/consistency)
- [Exactly-once, At-least-once or At-most-once Execution | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/consistency-and-replication/exactly-once-execution)
- [IndeterminateOperationStateException | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/consistency-and-replication/indeterminateoperationstateexception)
- [Invocation Lifecycle | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/consistency-and-replication/invocation-lifecycle)
- [Hazelcast’s Replication Algorithm | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/consistency-and-replication/replication-algorithm)
- [Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/cp-subsystem/configuration)
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/cp-subsystem/cp-subsystem)
- [CP Discovery Process | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/cp-subsystem/discovery-process)
- [CP Subsystem’s Fault Tolerance Capabilities | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/cp-subsystem/fault-tolerance)
- [FencedLock | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/cp-subsystem/fencedlock)
- [CP Subsystem Listeners | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/cp-subsystem/listeners)
- [CP Subsystem Management | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/cp-subsystem/management)
- [CP Member Shutdown | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/cp-subsystem/member-shutdown)
- [CP Subsystem Persistence | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/cp-subsystem/persistence)
- [CP Sessions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/cp-subsystem/sessions)
- [CP Subsystem Unsafe Mode | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/cp-subsystem/unsafe-mode)
- [Cardinality Estimator Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/cardinality-estimator-service)
- [Distributed Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/distributed-data-structures)
- [Event Journal | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/event-journal)
- [FencedLock | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/fencedlock)
- [Flake ID Generator | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/flake-id-generator)
- [IAtomicLong | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/iatomiclong)
- [IAtomicReference | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/iatomicreference)
- [ICountDownLatch | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/icountdownlatch)
- [ISemaphore | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/isemaphore)
- [List | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/list)
- [Map | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/map)
- [MultiMap | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/multimap)
- [Overview of Hazelcast Distributed Objects | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/overview)
- [PN Counter | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/pn-counter)
- [Priority Queue | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/priority-queue)
- [Queue | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/queue)
- [Reliable Topic | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/reliable-topic)
- [Replicated Map | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/replicated-map)
- [Ringbuffer | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/ringbuffer)
- [Set | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/set)
- [Topic | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/data-structures/topic)
- [Cluster Events | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/events/cluster-events)
- [Distributed Events | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/events/distributed-events)
- [Event Listeners for Hazelcast Clients | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/events/event-listeners-for-clients)
- [Global Event Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/events/global-event-configuration)
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/events/object-events)
- [Config Properties SPI | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/extending-hazelcast/config-properties-spi)
- [Discovery SPI | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/extending-hazelcast/discovery-spi)
- [Extending Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/extending-hazelcast/extending-hazelcast)
- [OperationParker | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/extending-hazelcast/operationparker)
- [Frequently Asked Questions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/faq)
- [Quickstart | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/getting-started)
- [Glossary | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/glossary)
- [Hazelcast Jet | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/hazelcast-jet)
- [Hazelcast Cloud | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/installation/deploying-hazelcast-cloud)
- [Deploying in Cloud Providers | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/installation/deploying-in-cloud)
- [Kubernetes/OpenShift Deployment | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/installation/deploying-in-kubernetes)
- [Deploying in VMware Tanzu | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/installation/deploying-in-vmware-tanzu)
- [Installing and Upgrading | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/installation/installing-upgrading)
- [CLI | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/installation/installing-using-cli)
- [Docker | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/installation/installing-using-docker)
- [Download Archives | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/installation/installing-using-download-archives)
- [Maven | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/installation/installing-using-maven)
- [Rolling Member Upgrades | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/installation/rolling-upgrades)
- [Running in Modular Java | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/installation/running-in-modular-java)
- [Supported Java Virtual Machines | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/installation/supported-jvms)
- [Using Pro and Enterprise editions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/installation/using-enterprise-edition)
- [Integration with Hibernate Second Level Cache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/integrated-clustering/hibernate-second-level-cache)
- [Integrated Clustering | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/integrated-clustering/integrated-clustering)
- [Integration with Java EE | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/integrated-clustering/javaee)
- [Integration with Spring | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/integrated-clustering/spring)
- [Web Session Replications | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/integrated-clustering/web-session-replication)
- [JCache API | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/jcache/api)
- [JCache - Hazelcast Instance Integration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/jcache/hazelcast-integration)
- [Hazelcast JCache Extension - ICache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/jcache/icache)
- [Hazelcast JCache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/jcache/jcache)
- [JCache Overview | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/jcache/overview)
- [JCache Providers | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/jcache/providers)
- [JCache Setup and Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/jcache/setup)
- [Testing for JCache Specification Compliance | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/jcache/tck)
- [License Questions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/licenses)
- [Cluster Utilities | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/management/cluster-utilities)
- [Diagnostics | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/management/diagnostics)
- [Health Check and Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/management/health-check-monitoring)
- [Instance Tracking | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/management/instance-tracking)
- [JMX API per Member | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/management/jmx-api)
- [Monitoring with JMX | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/management/jmx-monitoring)
- [License Information | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/management/license-info)
- [Management | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/management/management)
- [Management Center | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/management/management-center)
- [Getting Member Statistics | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/management/member-statistics)
- [Metrics | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/management/metrics)
- [Using the REST Endpoint Groups | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/management/rest-endpoint-groups)
- [Migration Guides | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/migration-guides)
- [Dealing with Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/network-partitioning/dealing-with-network-partitions)
- [Network Partitioning | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/network-partitioning/network-partitioning)
- [Partial Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/network-partitioning/partial-network-partitions)
- [Split-Brain Protection | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/network-partitioning/split-brain-protection)
- [Split-Brain Recovery | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/network-partitioning/split-brain-recovery)
- [API | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/osgi/api)
- [Configuring Hazelcast OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/osgi/configuring-osgi-support)
- [Design | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/osgi/design)
- [OSGI | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/osgi/osgi)
- [OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/osgi/osgi-support)
- [Using Hazelcast OSGI Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/osgi/using-osgi-service)
- [Architecture | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/overview/architecture)
- [Data Partitioning | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/overview/data-partitioning)
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/overview/hazelcast-overview)
- [Resources | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/overview/resources)
- [Topology | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/overview/topology)
- [Use Cases | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/overview/use-cases)
- [What is Hazelcast IMDG? | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/overview/what-is-imdg)
- [Back Pressure | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/performance/back-pressure)
- [Performance Anti Patterns | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/performance/best-practices)
- [Caching Deserialized Values | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/performance/caching-deserialized-values)
- [CPU Thread Affinity | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/performance/cpu-thread-affinity)
- [Data Affinity | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/performance/data-affinity)
- [Near Cache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/performance/near-cache)
- [Performance | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/performance/performance)
- [Pipelining | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/performance/pipelining)
- [Running on EC2 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/performance/running-on-ec2)
- [SlowOperationDetector | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/performance/slowoperationdetector)
- [Threading Model | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/performance/threading-model)
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/phone-homes)
- [Cloud Discovery Plugins | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/plugins/cloud-discovery)
- [Framework Integration Plugins | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/plugins/framework-integration)
- [Hazelcast Plugins | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/plugins/hazelcast-plugins)
- [Other Integrations | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/plugins/other-integrations)
- [Web Session Replication Plugins | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/plugins/web-session-replication)
- [Aggregations | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/query/aggregations)
- [Continuous Query Cache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/query/continuous-query-cache)
- [Custom Attributes | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/query/custom-attributes)
- [Distributed Query | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/query/distributed-query)
- [How Distributed Query Works | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/query/how-distributed-query-works)
- [MapReduce Deprecation and Removal | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/query/mapreduce-deprecation-and-removal)
- [Projections | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/query/projections)
- [Querying in Collections and Arrays | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/query/querying-collections-and-arrays)
- [Cluster Member Security | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/security/cluster-member-security)
- [Default authentication | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/security/default-authentication)
- [Enabling JAAS Security | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/security/enabling-jaas)
- [Encryption | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/security/encryption)
- [FIPS 140-2 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/security/fips-140-2)
- [Integrating OpenSSL / BoringSSL | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/security/integrating-openssl)
- [JAAS authentication | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/security/jaas-authentication)
- [Logging Auditable Events | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/security/logging-auditable-events)
- [Native Client Security | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/security/native-client-security)
- [Security | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/security/security)
- [Security Debugging | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/security/security-debugging)
- [Security Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/security/security-interceptor)
- [Security Realms | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/security/security-realms)
- [Socket Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/security/socket-interceptor)
- [Other TLS Related configurations | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/security/tls-configuration)
- [TLS/SSL | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/security/tls-ssl)
- [Validating Secrets Using Strength Policy | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/security/validating-secrets)
- [Comparing Serialization Interfaces | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/serialization/comparing-interfaces)
- [Custom Serialization | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/serialization/custom-serialization)
- [Global Serializer | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/serialization/global-serializer)
- [Implementing DataSerializable | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/serialization/implementing-dataserializable)
- [Implementing HazelcastInstanceAware | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/serialization/implementing-hazelcastinstanceaware)
- [Implementing Java Serializable and Externalizable | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/serialization/implementing-java-serializable)
- [Implementing Portable Serialization | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/serialization/implementing-portable-serialization)
- [Serialization Interface Types | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/serialization/interface-types)
- [Serialization | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/serialization/serialization)
- [Serialization Configuration Wrap-Up | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/serialization/serialization-configuration)
- [Untrusted Deserialization Protection | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/serialization/untrusted-deserialization-protection)
- [Hazelcast Simulator | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/simulator)
- [Data Types | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/sql/data-types)
- [SQL | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/sql/distributed-sql)
- [Expressions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/sql/expressions)
- [How Distributed SQL Works | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/sql/how-distributed-sql-works)
- [Lite Members | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/sql/lite-members)
- [Querying IMap | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/sql/querying-imap)
- [SELECT | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/sql/select-statement)
- [SQL on Data Structures Backed by High-Density Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/sql/sql-and-high-density-memory)
- [Starting the Members and Clients | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/starting-members-clients)
- [High-Density Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/storage/high-density-memory)
- [Hot Restart Persistence | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/storage/hot-restart-persistence)
- [Sizing Practices | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/storage/sizing-practices)
- [Storage | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/storage/storage)
- [Database CDC Integration using Striim Hot Cache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/striim-cdc)
- [System Properties | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/system-properties)
- [Creating a Transaction Interface | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/transactions/creating-a-transaction-interface)
- [Providing XA Transactions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/transactions/providing-xa-transactions)
- [Transactions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/transactions/transactions)
- [Advanced Features | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/wan/advanced-features)
- [Configuring for IMap and ICache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/wan/configuring-for-map-and-cache)
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/wan/defining-wan-replication)
- [Failure Detection and Recovery | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/wan/failures)
- [WAN Replication Modes | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/wan/modes)
- [Quick Start | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/wan/quick-start)
- [REST API Wrap-Up | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/wan/rest-api)
- [Fine-Tuning WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/wan/tuning)
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.1/wan/wan)
- [Hazelcast IMDG Reference Manual 4.0.6 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/)
- [C++ Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clients/cplusplus)
- [.NET Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clients/dotnet)
- [Go Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clients/go)
- [Hazelcast Clients | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clients/hazelcast-clients)
- [Java Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clients/java)
- [Memcache Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clients/memcache)
- [Node.js Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clients/nodejs)
- [Python Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clients/python)
- [REST Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clients/rest)
- [Advanced Network Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clusters/advanced-network-configuration)
- [Creating Clusters | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clusters/creating-clusters)
- [Deploying User Code from Clients | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clusters/deploying-code-from-clients)
- [Deploying User Code on the Member | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clusters/deploying-code-on-member)
- [Discovering Members by Multicast | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clusters/discovering-by-multicast)
- [Discovering Members by TCP | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clusters/discovering-by-tcp)
- [Discovering Native Clients | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clusters/discovering-native-clients)
- [Discovery Mechanisms | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clusters/discovery-mechanisms)
- [Failure Detector Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clusters/failure-detector-configuration)
- [Logging Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clusters/logging-configuration)
- [Other Network Configurations | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clusters/network-configuration)
- [Partition Group Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clusters/partition-group-configuration)
- [Setting Up Clusters | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/clusters/setting-up-clusters)
- [Common Exception Types | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/common-exception-types)
- [Distributed Computing | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/computing/distributed-computing)
- [Durable Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/computing/durable-executor-service)
- [Entry Processor | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/computing/entry-processor)
- [Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/computing/executor-service)
- [Scheduled Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/computing/scheduled-executor-service)
- [Checking Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/configuration/checking-configuration)
- [Configuring Declaratively | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/configuration/configuring-declaratively)
- [Configuring Programmatically | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/configuration/configuring-programmatically)
- [Configuring with System Properties | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/configuration/configuring-with-system-properties)
- [Configuring within the Spring Context | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/configuration/configuring-within-spring)
- [Dynamically Adding Data Structure Configuration on a Cluster | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/configuration/dynamic-data-structure-configuration)
- [Overriding Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/configuration/overriding-configuration-settings)
- [Configuration Pattern Matcher | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/configuration/pattern-matcher)
- [Understanding Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/configuration/understanding-configuration)
- [Using Variables | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/configuration/using-variables)
- [Using Wildcards | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/configuration/using-wildcards)
- [Variable Replacers | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/configuration/variable-replacers)
- [Consistency and Replication Model | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/consistency-and-replication/consistency)
- [Exactly-once, At-least-once or At-most-once Execution | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/consistency-and-replication/exactly-once-execution)
- [IndeterminateOperationStateException | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/consistency-and-replication/indeterminateoperationstateexception)
- [Invocation Lifecycle | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/consistency-and-replication/invocation-lifecycle)
- [Hazelcast’s Replication Algorithm | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/consistency-and-replication/replication-algorithm)
- [Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/cp-subsystem/configuration)
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/cp-subsystem/cp-subsystem)
- [CP Discovery Process | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/cp-subsystem/discovery-process)
- [CP Subsystem’s Fault Tolerance Capabilities | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/cp-subsystem/fault-tolerance)
- [FencedLock | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/cp-subsystem/fencedlock)
- [CP Subsystem Management | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/cp-subsystem/management)
- [CP Member Shutdown | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/cp-subsystem/member-shutdown)
- [CP Subsystem Persistence | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/cp-subsystem/persistence)
- [CP Sessions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/cp-subsystem/sessions)
- [CP Subsystem Unsafe Mode | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/cp-subsystem/unsafe-mode)
- [Cardinality Estimator Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/cardinality-estimator-service)
- [Distributed Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/distributed-data-structures)
- [Event Journal | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/event-journal)
- [FencedLock | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/fencedlock)
- [Flake ID Generator | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/flake-id-generator)
- [IAtomicLong | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/iatomiclong)
- [IAtomicReference | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/iatomicreference)
- [ICountDownLatch | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/icountdownlatch)
- [ISemaphore | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/isemaphore)
- [List | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/list)
- [Map | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/map)
- [MultiMap | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/multimap)
- [Overview of Hazelcast Distributed Objects | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/overview)
- [PN Counter | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/pn-counter)
- [Queue | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/queue)
- [Reliable Topic | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/reliable-topic)
- [Replicated Map | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/replicated-map)
- [Ringbuffer | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/ringbuffer)
- [Set | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/set)
- [Topic | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/data-structures/topic)
- [Cluster Events | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/events/cluster-events)
- [Distributed Events | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/events/distributed-events)
- [Event Listeners for Hazelcast Clients | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/events/event-listeners-for-clients)
- [Global Event Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/events/global-event-configuration)
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/events/object-events)
- [Config Properties SPI | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/extending-hazelcast/config-properties-spi)
- [Discovery SPI | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/extending-hazelcast/discovery-spi)
- [Extending Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/extending-hazelcast/extending-hazelcast)
- [OperationParker | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/extending-hazelcast/operationparker)
- [Frequently Asked Questions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/faq)
- [Hazelcast Cloud | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/getting-started/deploying-hazelcast-cloud)
- [Deploying in Cloud Providers | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/getting-started/deploying-in-cloud)
- [Deploying using Docker | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/getting-started/deploying-using-docker)
- [Getting Started | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/getting-started/getting-started)
- [Installation | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/getting-started/installation)
- [Running in Modular Java | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/getting-started/running-in-modular-java)
- [Starting the Members and Clients | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/getting-started/starting-members-clients)
- [Supported Java Virtual Machines | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/getting-started/supported-jvms)
- [Using the Scripts in the Package | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/getting-started/using-the-scripts)
- [Glossary | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/glossary)
- [Hazelcast Jet | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/hazelcast-jet)
- [Hazelcast Cloud | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/installation/deploying-hazelcast-cloud)
- [Deploying in Cloud Providers | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/installation/deploying-in-cloud)
- [Kubernetes/OpenShift Deployment | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/installation/deploying-in-kubernetes)
- [Deploying in VMware Tanzu | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/installation/deploying-in-vmware-tanzu)
- [Installing and Upgrading | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/installation/installing-upgrading)
- [CLI | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/installation/installing-using-cli)
- [Docker | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/installation/installing-using-docker)
- [Download Archives | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/installation/installing-using-download-archives)
- [Maven | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/installation/installing-using-maven)
- [Rolling Member Upgrades | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/installation/rolling-upgrades)
- [Running in Modular Java | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/installation/running-in-modular-java)
- [Supported Java Virtual Machines | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/installation/supported-jvms)
- [Using Pro and Enterprise editions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/installation/using-enterprise-edition)
- [Integration with Hibernate Second Level Cache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/integrated-clustering/hibernate-second-level-cache)
- [Integrated Clustering | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/integrated-clustering/integrated-clustering)
- [Integration with Java EE | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/integrated-clustering/javaee)
- [Integration with Spring | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/integrated-clustering/spring)
- [Web Session Replications | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/integrated-clustering/web-session-replication)
- [JCache API | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/jcache/api)
- [JCache - Hazelcast Instance Integration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/jcache/hazelcast-integration)
- [Hazelcast JCache Extension - ICache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/jcache/icache)
- [Hazelcast JCache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/jcache/jcache)
- [JCache Overview | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/jcache/overview)
- [JCache Providers | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/jcache/providers)
- [JCache Setup and Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/jcache/setup)
- [Testing for JCache Specification Compliance | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/jcache/tck)
- [License Questions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/licenses)
- [Cluster Utilities | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/management/cluster-utilities)
- [Diagnostics | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/management/diagnostics)
- [Health Check and Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/management/health-check-monitoring)
- [JMX API per Member | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/management/jmx-api)
- [Monitoring with JMX | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/management/jmx-monitoring)
- [License Information | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/management/license-info)
- [Management | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/management/management)
- [Management Center | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/management/management-center)
- [Getting Member Statistics | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/management/member-statistics)
- [Metrics | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/management/metrics)
- [Using the REST Endpoint Groups | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/management/rest-endpoint-groups)
- [Migration Guides | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/migration-guides)
- [Dealing with Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/network-partitioning/dealing-with-network-partitions)
- [Network Partitioning | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/network-partitioning/network-partitioning)
- [Split-Brain Protection | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/network-partitioning/split-brain-protection)
- [Split-Brain Recovery | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/network-partitioning/split-brain-recovery)
- [API | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/osgi/api)
- [Configuring Hazelcast OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/osgi/configuring-osgi-support)
- [Design | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/osgi/design)
- [OSGI | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/osgi/osgi)
- [OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/osgi/osgi-support)
- [Using Hazelcast OSGI Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/osgi/using-osgi-service)
- [Architecture | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/overview/architecture)
- [Data Partitioning | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/overview/data-partitioning)
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/overview/hazelcast-overview)
- [Resources | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/overview/resources)
- [Topology | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/overview/topology)
- [Use Cases | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/overview/use-cases)
- [What is Hazelcast IMDG? | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/overview/what-is-imdg)
- [Back Pressure | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/performance/back-pressure)
- [Best Practices | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/performance/best-practices)
- [Caching Deserialized Values | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/performance/caching-deserialized-values)
- [Data Affinity | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/performance/data-affinity)
- [Near Cache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/performance/near-cache)
- [Performance | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/performance/performance)
- [Pipelining | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/performance/pipelining)
- [Running on EC2 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/performance/running-on-ec2)
- [SlowOperationDetector | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/performance/slowoperationdetector)
- [Threading Model | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/performance/threading-model)
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/phone-homes)
- [Cloud Discovery Plugins | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/plugins/cloud-discovery)
- [Framework Integration Plugins | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/plugins/framework-integration)
- [Hazelcast Plugins | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/plugins/hazelcast-plugins)
- [Other Integrations | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/plugins/other-integrations)
- [Web Session Replication Plugins | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/plugins/web-session-replication)
- [Aggregations | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/query/aggregations)
- [Continuous Query Cache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/query/continuous-query-cache)
- [Custom Attributes | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/query/custom-attributes)
- [Distributed Query | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/query/distributed-query)
- [How Distributed Query Works | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/query/how-distributed-query-works)
- [MapReduce Deprecation and Removal | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/query/mapreduce-deprecation-and-removal)
- [Projections | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/query/projections)
- [Querying in Collections and Arrays | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/query/querying-collections-and-arrays)
- [Rolling Member Upgrades | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/rolling-upgrades)
- [Cluster Member Security | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/security/cluster-member-security)
- [Enabling JAAS Security | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/security/enabling-jaas)
- [Encryption | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/security/encryption)
- [FIPS 140-2 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/security/fips-140-2)
- [Integrating OpenSSL / BoringSSL | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/security/integrating-openssl)
- [JAAS authentication | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/security/jaas-authentication)
- [Native Client Security | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/security/native-client-security)
- [Security | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/security/security)
- [Security Debugging | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/security/security-debugging)
- [Security Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/security/security-interceptor)
- [Security Realms | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/security/security-realms)
- [Socket Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/security/socket-interceptor)
- [Other TLS Related configurations | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/security/tls-configuration)
- [TLS/SSL | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/security/tls-ssl)
- [Validating Secrets Using Strength Policy | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/security/validating-secrets)
- [Comparing Serialization Interfaces | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/serialization/comparing-interfaces)
- [Custom Serialization | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/serialization/custom-serialization)
- [Global Serializer | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/serialization/global-serializer)
- [Implementing DataSerializable | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/serialization/implementing-dataserializable)
- [Implementing HazelcastInstanceAware | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/serialization/implementing-hazelcastinstanceaware)
- [Implementing Java Serializable and Externalizable | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/serialization/implementing-java-serializable)
- [Implementing Portable Serialization | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/serialization/implementing-portable-serialization)
- [Serialization Interface Types | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/serialization/interface-types)
- [Serialization | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/serialization/serialization)
- [Serialization Configuration Wrap-Up | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/serialization/serialization-configuration)
- [Untrusted Deserialization Protection | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/serialization/untrusted-deserialization-protection)
- [Hazelcast Simulator | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/simulator)
- [Data Types | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/sql/data-types)
- [SQL | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/sql/distributed-sql)
- [Expressions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/sql/expressions)
- [How Distributed SQL Works | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/sql/how-distributed-sql-works)
- [Lite Members | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/sql/lite-members)
- [Querying IMap | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/sql/querying-imap)
- [SELECT | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/sql/select-statement)
- [SQL on Data Structures Backed by High-Density Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/sql/sql-and-high-density-memory)
- [High-Density Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/storage/high-density-memory)
- [Hot Restart Persistence | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/storage/hot-restart-persistence)
- [Sizing Practices | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/storage/sizing-practices)
- [Storage | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/storage/storage)
- [Database CDC Integration using Striim Hot Cache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/striim-cdc)
- [System Properties | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/system-properties)
- [Creating a Transaction Interface | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/transactions/creating-a-transaction-interface)
- [Providing XA Transactions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/transactions/providing-xa-transactions)
- [Transactions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/transactions/transactions)
- [Advanced Features | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/wan/advanced-features)
- [Configuring for IMap and ICache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/wan/configuring-for-map-and-cache)
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/wan/defining-wan-replication)
- [Failure Detection and Recovery | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/wan/failures)
- [WAN Replication Modes | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/wan/modes)
- [Quick Start | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/wan/quick-start)
- [REST API Wrap-Up | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/wan/rest-api)
- [Fine-Tuning WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/wan/tuning)
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/imdg/4.0/wan/wan)
- [Hazelcast IMDG Reference Manual 3.12.13 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/)
- [C++ Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clients/cplusplus)
- [.NET Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clients/dotnet)
- [Go Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clients/go)
- [Hazelcast Clients | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clients/hazelcast-clients)
- [Java Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clients/java)
- [Memcache Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clients/memcache)
- [Node.js Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clients/nodejs)
- [Python Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clients/python)
- [REST Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clients/rest)
- [Scala Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clients/scala)
- [Advanced Network Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clusters/advanced-network-configuration)
- [Creating Cluster Groups | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clusters/creating-clusters)
- [Deploying User Codes on Clients | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clusters/deploying-code-from-clients)
- [Deploying User Codes on the Member | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clusters/deploying-code-on-member)
- [Discovering Members by Multicast | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clusters/discovering-by-multicast)
- [Discovering Members by TCP | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clusters/discovering-by-tcp)
- [Discovering Native Clients | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clusters/discovering-native-clients)
- [Discovery Mechanisms | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clusters/discovery-mechanisms)
- [Failure Detector Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clusters/failure-detector-configuration)
- [Logging Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clusters/logging-configuration)
- [Other Network Configurations | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clusters/network-configuration)
- [Partition Group Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clusters/partition-group-configuration)
- [Setting Up Clusters | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/clusters/setting-up-clusters)
- [Common Exception Types | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/common-exception-types)
- [Distributed Computing | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/computing/distributed-computing)
- [Durable Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/computing/durable-executor-service)
- [Entry Processor | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/computing/entry-processor)
- [Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/computing/executor-service)
- [Scheduled Executor Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/computing/scheduled-executor-service)
- [Checking Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/configuration/checking-configuration)
- [Configuring Declaratively | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/configuration/configuring-declaratively)
- [Configuring Programmatically | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/configuration/configuring-programmatically)
- [Configuring with System Properties | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/configuration/configuring-with-system-properties)
- [Configuring within the Spring Context | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/configuration/configuring-within-spring)
- [Dynamically Adding Data Structure Configuration on a Cluster | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/configuration/dynamic-data-structure-configuration)
- [Configuration Pattern Matcher | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/configuration/pattern-matcher)
- [Understanding Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/configuration/understanding-configuration)
- [Using Variables | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/configuration/using-variables)
- [Using Wildcards | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/configuration/using-wildcards)
- [Variable Replacers | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/configuration/variable-replacers)
- [Consistency and Replication Model | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/consistency-and-replication/consistency)
- [Exactly-once, At-least-once or At-most-once Execution | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/consistency-and-replication/exactly-once-execution)
- [IndeterminateOperationStateException | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/consistency-and-replication/indeterminateoperationstateexception)
- [Invocation Lifecycle | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/consistency-and-replication/invocation-lifecycle)
- [Hazelcast’s Replication Algorithm | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/consistency-and-replication/replication-algorithm)
- [Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/cp-subsystem/configuration)
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/cp-subsystem/cp-subsystem)
- [CP Subsystem Process | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/cp-subsystem/discovery-process)
- [FencedLock | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/cp-subsystem/fencedlock)
- [CP Subsystem Management | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/cp-subsystem/management)
- [CP Sessions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/cp-subsystem/sessions)
- [Cardinality Estimator Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/cardinality-estimator-service)
- [Distributed Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/distributed-data-structures)
- [Event Journal | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/event-journal)
- [IAtomicLong | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/iatomiclong)
- [IAtomicReference | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/iatomicreference)
- [ICountDownLatch | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/icountdownlatch)
- [ID Generator | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/id-generator)
- [ISemaphore | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/isemaphore)
- [List | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/list)
- [FencedLock | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/lock)
- [Map | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/map)
- [MultiMap | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/multimap)
- [Overview of Hazelcast Distributed Objects | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/overview)
- [PN Counter | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/pn-counter)
- [Queue | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/queue)
- [Reliable Topic | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/reliable-topic)
- [Replicated Map | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/replicated-map)
- [Ringbuffer | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/ringbuffer)
- [Set | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/set)
- [Topic | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/data-structures/topic)
- [Cluster Events | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/events/cluster-events)
- [Distributed Events | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/events/distributed-events)
- [Event Listeners for Hazelcast Clients | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/events/event-listeners-for-clients)
- [Global Event Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/events/global-event-configuration)
- [Distributed Object Events | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/events/object-events)
- [Config Properties SPI | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/extending-hazelcast/config-properties-spi)
- [Discovery SPI | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/extending-hazelcast/discovery-spi)
- [Extending Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/extending-hazelcast/extending-hazelcast)
- [OperationParker | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/extending-hazelcast/operationparker)
- [User Defined Services | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/extending-hazelcast/user-defined-services)
- [Frequently Asked Questions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/faq)
- [Deploying On Amazon EC2 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/getting-started/deploying-on-amazon-ec2)
- [Deploying On Microsoft Azure | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/getting-started/deploying-on-microsoft-azure)
- [Deploying On Pivotal Cloud Foundry | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/getting-started/deploying-on-pcf)
- [Deploying using Docker | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/getting-started/deploying-using-docker)
- [Deploying using Hazelcast Cloud - BETA | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/getting-started/deploying-using-hazelcast-cloud)
- [Getting Started | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/getting-started/getting-started)
- [Installation | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/getting-started/installation)
- [Running in Modular Java | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/getting-started/running-in-modular-java)
- [Starting the Member and Client | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/getting-started/starting-the-member-and-client)
- [Supported Java Virtual Machines | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/getting-started/supported-jvms)
- [Using the Scripts In The Package | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/getting-started/using-the-scripts-in-the-package)
- [Glossary | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/glossary)
- [Hazelcast Jet | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/hazelcast-jet)
- [Hazelcast IMDG Overview | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/hazelcast-overview)
- [Hazelcast Plugins | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/hazelcast-plugins)
- [Integration with Hibernate Second Level Cache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/integrated-clustering/hibernate-second-level-cache)
- [Integrated Clustering | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/integrated-clustering/integrated-clustering)
- [Integration with Java EE | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/integrated-clustering/javaee)
- [Integration with Spring | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/integrated-clustering/spring)
- [Web Session Replications | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/integrated-clustering/web-session-replication)
- [JCache API | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/jcache/api)
- [JCache - Hazelcast Instance Integration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/jcache/hazelcast-integration)
- [Hazelcast JCache Extension - ICache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/jcache/icache)
- [Hazelcast JCache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/jcache/jcache)
- [JCache Overview | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/jcache/overview)
- [JCache Providers | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/jcache/providers)
- [JCache Setup and Configuration | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/jcache/setup)
- [Testing for JCache Specification Compliance | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/jcache/tck)
- [License Questions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/licenses)
- [Cluster Utilities | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/management/cluster-utilities)
- [Diagnostics | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/management/diagnostics)
- [Health Check and Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/management/health-check-monitoring)
- [Instance Tracking | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/management/instance-tracking)
- [JMX API per Member | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/management/jmx-api)
- [Enabling JMX on Hazelcast Members | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/management/jmx-monitoring)
- [License Information | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/management/license-info)
- [Management | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/management/management)
- [Management Center | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/management/management-center)
- [Getting Member Statistics | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/management/member-statistics)
- [Metrics | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/management/metrics)
- [Using the REST Endpoint Groups | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/management/rest-endpoint-groups)
- [Migration Guides | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/migration-guides)
- [Dealing with Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/network-partitioning/dealing-with-network-partitions)
- [Network Partitioning | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/network-partitioning/network-partitioning)
- [Partial Network Partitions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/network-partitioning/partial-network-partitions)
- [Split-Brain Protection | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/network-partitioning/split-brain-protection)
- [Split-Brain Recovery | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/network-partitioning/split-brain-recovery)
- [API | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/osgi/api)
- [Configuring Hazelcast OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/osgi/configuring-osgi-support)
- [Design | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/osgi/design)
- [OSGI | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/osgi/osgi)
- [OSGI Support | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/osgi/osgi-support)
- [Using Hazelcast OSGI Service | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/osgi/using-osgi-service)
- [Back Pressure | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/performance/back-pressure)
- [Performance Anti Patterns | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/performance/best-practices)
- [Caching Deserialized Values | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/performance/caching-deserialized-values)
- [CPU Thread Affinity | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/performance/cpu-thread-affinity)
- [Data Affinity | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/performance/data-affinity)
- [Near Cache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/performance/near-cache)
- [Performance | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/performance/performance)
- [Pipelining | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/performance/pipelining)
- [Running on EC2 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/performance/running-on-ec2)
- [SlowOperationDetector | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/performance/slowoperationdetector)
- [Threading Model | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/performance/threading-model)
- [Fast-Aggregations | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/query/aggregations)
- [Aggregators | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/query/aggregators)
- [Continuous Query Cache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/query/continuous-query-cache)
- [Custom Attributes | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/query/custom-attributes)
- [Distributed Query | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/query/distributed-query)
- [How Distributed Query Works | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/query/how-distributed-query-works)
- [MapReduce | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/query/mapreduce)
- [Projections | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/query/projections)
- [Querying in Collections and Arrays | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/query/querying-collections-and-arrays)
- [Rolling Member Upgrades | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/rolling-member-upgrades)
- [ClusterLoginModule | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/security/cluster-login-module)
- [Cluster Member Security | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/security/cluster-member-security)
- [Credentials | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/security/credentials)
- [Enabling JAAS Security | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/security/enabling-jaas)
- [Encryption | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/security/encryption)
- [FIPS 140-2 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/security/fips-140-2)
- [Integrating OpenSSL / BoringSSL | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/security/integrating-openssl)
- [Native Client Security | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/security/native-client-security)
- [Security | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/security/security)
- [Java Security Debugging | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/security/security-debugging)
- [Security Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/security/security-interceptor)
- [Socket Interceptor | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/security/socket-interceptor)
- [Other TLS Related configurations | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/security/tls-configuration)
- [TLS/SSL | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/security/tls-ssl)
- [Validating Secrets Using Strength Policy | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/security/validating-secrets)
- [Comparing Serialization Interfaces | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/serialization/comparing-interfaces)
- [Custom Serialization | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/serialization/custom-serialization)
- [Global Serializer | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/serialization/global-serializer)
- [Implementing DataSerializable | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/serialization/implementing-dataserializable)
- [Implementing HazelcastInstanceAware | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/serialization/implementing-hazelcastinstanceaware)
- [Implementing Java Serializable and Externalizable | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/serialization/implementing-java-serializable)
- [Implementing Portable Serialization | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/serialization/implementing-portable-serialization)
- [Serialization Interface Types | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/serialization/interface-types)
- [Serialization | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/serialization/serialization)
- [Serialization Configuration Wrap-Up | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/serialization/serialization-configuration)
- [Untrusted Deserialization Protection | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/serialization/untrusted-deserialization-protection)
- [Hazelcast Simulator | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/simulator)
- [High-Density Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/storage/high-density-memory)
- [Hot Restart Persistence | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/storage/hot-restart-persistence)
- [Sizing Practices | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/storage/sizing-practices)
- [Storage | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/storage/storage)
- [Database CDC Integration using Striim Hot Cache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/striim-cdc)
- [System Properties | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/system-properties)
- [Creating a Transaction Interface | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/transactions/creating-a-transaction-interface)
- [Providing XA Transactions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/transactions/providing-xa-transactions)
- [Transactions | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/transactions/transactions)
- [Acknowledgment Types | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/wan/ack-types)
- [WAN Replication Additional Information | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/wan/additional-info)
- [Batch Maximum Delay | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/wan/batch-max-delay)
- [Batch Size | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/wan/batch-size)
- [Configuring WAN Replication for IMap and ICache | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/wan/configuring-for-map-and-cache)
- [Defining WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/wan/defining-wan-replication)
- [Delta WAN Synchronization | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/wan/delta-wan-sync)
- [Dynamically Adding WAN Publishers | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/wan/dynamically-add-publishers)
- [Event Filtering API | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/wan/event-filtering-api)
- [WAN Replication Failure Detection and Recovery | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/wan/failure-detection)
- [Queue Capacity | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/wan/queue-capacity)
- [Queue Full Behavior | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/wan/queue-full-behavior)
- [Response Timeout | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/wan/response-timeout)
- [Synchronizing WAN Target Cluster | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/wan/sync-targets)
- [Tuning WAN Replication For Lower Latencies and Higher Throughput | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/wan/tuning)
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/wan/wan)
- [WanBatchReplication Implementation | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.12/wan/wanbatchreplication)
- [IMDG Reference Manual 3.11.7 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.11/)
- [IMDG Reference Manual 3.10.7 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.10/)
- [IMDG Reference Manual 3.9.4 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.9/)
- [IMDG Reference Manual 3.8.9 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.8/)
- [IMDG Reference Manual 3.7.8 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.7/)
- [IMDG Reference Manual 3.6.8 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.6/)
- [IMDG Reference Manual 3.5.5 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.5/)
- [IMDG Reference Manual 3.4.8 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.4/)
- [IMDG Reference Manual 3.3.5 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.3/)
- [IMDG Reference Manual 3.2.7 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.2/)
- [IMDG Reference Manual 3.1.9 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3.1/)
- [IMDG Reference Manual 3.0.3 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/3/)
- [IMDG Reference Manual 2.6.9 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/2.6/)
- [IMDG Reference Manual 2.5.1 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/2.5/)
- [IMDG Reference Manual 2.4.1 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/2.4/)
- [IMDG Reference Manual 2.3.1 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/2.3/)
- [IMDG Reference Manual 2.2 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/2.2/)
- [IMDG Reference Manual 2.1.3  | Hazelcast Documentation](https://docs.hazelcast.com/imdg/2.1/)
- [IMDG Reference Manual 2.0.4 | Hazelcast Documentation](https://docs.hazelcast.com/imdg/2/)

## Jdbc-driver

- [Hazelcast JDBC Driver | Hazelcast Documentation](https://docs.hazelcast.com/jdbc-driver/5.2-snapshot/)
- [Installing the Hazelcast JDBC Driver | Hazelcast Documentation](https://docs.hazelcast.com/jdbc-driver/5.2-snapshot/install)
- [5.2.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/jdbc-driver/5.2-snapshot/release-notes/5-2-0)
- [Hazelcast JDBC Driver 5.2-snapshot.X Releases | Hazelcast Documentation](https://docs.hazelcast.com/jdbc-driver/5.2-snapshot/release-notes/releases)
- [Securing the Connection | Hazelcast Documentation](https://docs.hazelcast.com/jdbc-driver/5.2-snapshot/security)
- [Upgrading the Hazelcast JDBC Driver | Hazelcast Documentation](https://docs.hazelcast.com/jdbc-driver/5.2-snapshot/upgrade)

## Management-center

- [Ask AI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/ask-ai): Use our Ask AI feature to get instant answers to technical questions.
- [Administration | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/administration): You can use the Administration menu item to manage Hazelcast clusters.
- [Change the cluster state | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/changing-cluster-state): Cluster states determine what cluster operations are available. By changing the state of a cluster, you can grant or restrict cluster operations such as migrations as well as change the behavior of those operations.
- [Manage client connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/client-filtering): When you use failover clients, you can disconnect them from one cluster and connect them to another, using client filtering in Management Center.
- [Clients | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/clients): You can use the Clients menu item to monitor all the clients that are connected to your Hazelcast cluster.
- [View a cluster license | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/cluster-license): You can use the Cluster License tab of the Administration menu item to see details about your cluster's license.
- [Cluster state | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/cluster-state): You can use the Cluster State tab of the Administration menu item to see your cluster's name, state, and to shut down the whole cluster.
- [Deploy a client filter list with the REST API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/create-filter-lists-rest): You can define filter lists to allow or disallow client connections to clusters, using the REST API in Management Center.
- [Deploy a client filter list from the UI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/create-filter-lists-ui): You can define filter lists to allow or disallow client connections to clusters, using the Management Center UI.
- [Cluster dashboard | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/dashboard): The cluster dashboard provides an overview of the general state and health of a cluster.
- [Diagnostic logging | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/diagnostic-logging): Hazelcast provides diagnostic logging capabilities that help with troubleshooting and monitoring.
- [Healthcheck | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/healthcheck): Config Healthcheck provides a comprehensive analysis of member configurations and metrics across your cluster to identify potential issues before they become critical problems, and to help prioritize remediation efforts.
- [Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/members): Monitor each member in a cluster and perform management operations on any member such as running garbage collection (GC), taking a thread dump, and shutting it down.
- [User code namespaces | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/namespaces): You can use the <strong>Namespaces</strong> menu item to monitor all the user code namespaces that are connected to your Hazelcast cluster.
- [Persistence | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/persistence): You can use the Persistence tab of the Administration menu item to manage Hazelcast clusters that have persistence enabled.
- [Shut down members and clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/shutting-down-cluster): Maintaining a cluster often requires shutting down and restarting members to make changes take effect. You can shut down a whole Hazelcast cluster or individual members in Management Center with one button.
- [Trigger a force-start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/triggering-force-start): You can trigger a force-start to force a cluster with persistence enabled to restart and delete its persistence store when one or more members are missing after a cluster-wide restart.
- [Trigger hot backups | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/triggering-hot-backup): You can trigger a hot backup to save a snapshot of the persistence store. Hot backups are useful when you wish to bring up a new cluster with the same data or parts of the data. The new cluster can then be used to share load with the original cluster, perform testing, or reproduce an issue, using production data.
- [Trigger a partial-start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/triggering-partial-start): You can trigger a partial-start to allow a cluster with persistence enabled to restart even if some members are missing after a cluster-wide restart.
- [Trigger a rolling upgrade | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/triggering-rolling-upgrade): A rolling upgrade allows you to upgrade all running cluster members to a new version of Hazelcast without interrupting the operation of the cluster.
- [Update cluster configuration at runtime | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/update-config): You can add YAML or XML configuration blocks to your running cluster, without needing to restart it.
- [WAN replication | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/clusters/wan-replication): You can use the WAN Replication menu item to check the status of WAN replication, synchronize map and cache data structures across clusters, and add dynamic configuration for WAN replication.
- [Atomic longs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/cp-subsystem/atomic-long)
- [Atomic references | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/cp-subsystem/atomic-ref)
- [Countdown latches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/cp-subsystem/countdown-latch)
- [CPMaps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/cp-subsystem/cpmap)
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/cp-subsystem/dashboard): You can use the CP Subsystem menu section to manage and monitor the CP Subsystem in a cluster.
- [Fenced locks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/cp-subsystem/fenced-lock)
- [Semaphores | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/cp-subsystem/semaphore)
- [Caches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/data-structures/cache)
- [Executors | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/data-structures/executor)
- [Flake ID generators | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/data-structures/flake-id-gen)
- [Lists | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/data-structures/list)
- [Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/data-structures/map)
- [MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/data-structures/multimap)
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/data-structures/overview)
- [PN counters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/data-structures/pn-counter)
- [Queues | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/data-structures/queue)
- [Reliable topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/data-structures/reliable-topic)
- [Replicated maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/data-structures/replicated-map)
- [Sets | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/data-structures/set)
- [Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/data-structures/topic)
- [Vector collections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/data-structures/vector-collection): Learn how to use and monitor vector collections within Management Center.
- [Active Directory | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/active-directory): You can use your existing Active Directory server for authentication and authorization in Management Center.
- [Cluster connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/cluster-connections): You can connect Management Center to multiple clusters and remove connections when you no longer need them.
- [Configure Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/configuring): You can use various options to configure the Management Center instance as well as the client that Management Center uses to connect to and interact with Hazelcast clusters.
- [Connect with hz-mc conf | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/connecting-to-clusters-mc-conf): You can preconfigure the client connection to a cluster before you start Management Center, using the `hz-mc conf` tool.
- [Connect from the UI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/connecting-to-clusters-ui): You can configure the Hazelcast client for Management Center, using the UI.
- [Dev mode | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/dev-mode): Dev mode is a development security provider that allows you to evaluate Management Center without needing credentials for logging in or using the REST API.
- [H2 upgrade | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/h2-upgrade): Management Center uses H2 database to store metadata, including connected clusters, security provider config, and client filtering configs. As H2 version 1.x is no longer maintained, some security scanners report vulnerabilities for this version. Although not affected by these vulnerabilities, Management Center has been updated to use H2 2.x, which also includes a number of fixes and improvements. However, as metadata from the H2 1.x is not binary compatible with version 2.x , data migration is required.
- [Historical metrics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/historical-metrics): Management Center persists metrics so that you can view historical data for each cluster. You can customize how long data is persisted by changing the time to live (TTL).
- [JAAS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/jaas): You can use your own `javax.security.auth.spi.LoginModule` implementation for authentication and authorization in Management Center.
- [LDAP | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/ldap): You can use your existing LDAP server for authentication/authorization on the Management Center.
- [Enterprise licenses | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/license-management): To use some features in Management Center, you need a valid Enterprise license.
- [Local security provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/local-security-provider): You can use the local security provider to control authentication and authorization in Management Center. With this security provider, user accounts are stored in Management Center's database.
- [Logging | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/logging): You can customize the content of logs as well as enable audit logging.
- [Management Center Configuration Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/mc-conf): The Management Center Configuration Tool (hz-mc conf) is a command line tool that allows you to automate processes that require configuring Management Center, without using the UI.
- [OpenID Connect | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/openid): You can use OpenID Connect single sign-on with Management Center.
- [Usage analytics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/phone-homes): Hazelcast collects analytics data to learn about the usage of Hazelcast Management Center.
- [Production checklist | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/production-checklist): Before going into production, you should have a high availability setup and a secure deployment of Management Center.
- [SAML | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/saml): You can use SAML single sign-on with Management Center.
- [Secure Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/security): To secure Management Center, you can encrypt communications using TLS/SSL, secure user sessions, set up user login authentication, and enable audit logging.
- [Security Providers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/security-providers): You can use security providers to authenticate users in Management Center and allow them to log into user accounts.
- [Serve Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/serve-mc-over-https): You can use a self-signed certificate to allow Management Center to communicate over HTTPS with HTTP clients.
- [Serve Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/serving-https): Serving Management Center over HTTPS secures communication between Management Center and HTTP clients such as web browsers that are connected to it.
- [Secure user sessions | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/sessions): To secure users' sessions, you can configure session timeouts and multiple user login attempts.
- [Switch to a new security provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/switching-security-provider)
- [System properties and environment variables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/system-properties): You can use system properties and environment variables to configure many aspects of Management Center, from JMX to the home directory and feature flags. These properties give you the power to tweak settings at startup without having to configure anything in the UI.
- [TLS/SSL | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/tls-security): To secure any communications from/to Management Center, you can configure it to communicate over TLS/SSL.
- [Update an Enterprise License for Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/updating-mc-license-ui): You can use the UI to update an Enterprise license for Management Center.
- [User management | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/user-management): Users in Management Center have roles that determine what permissions they have. For example, an admin user has access to all features, whereas a metrics-only user can only view metrics and can't see the data. How you create and manage users depends on the security provider you are using.
- [Variable replacers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/deploy-manage/variable-replacers): Variable replacers are Java classes that replace custom strings in configuration. You can use variable replacers in command line arguments or in the `hz-mc conf` tool. A common use case for variable replacers is to mask sensitive information such as usernames and passwords.
- [Get Started with Management Center Using Docker Compose | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/getting-started/get-started): In this tutorial, you'll start up an instance of Management Center that automatically connects to a Hazelcast cluster, using a Docker container. To enable you to get up and running quickly, an example <code>docker-compose.yml</code> is provided. No other configuration or dependencies are required.
- [Get support | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/getting-started/get-support): Hazelcast provides two types of support: community support for the Community Edition, and customer support for the Enterprise Edition.
- [Graphs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/getting-started/graphs): Graphs are displayed on the dashboard and on the details page of any data structure (with a few exceptions). This topic explains how to read graphs and customize their data points.
- [Install and start Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/getting-started/install): You can install Management Center, using Docker, a package manager, or the binary distribution.
- [Management Center 5.10.0-SNAPSHOT | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/getting-started/overview): Hazelcast Management Center provides a powerful and intuitive interface for managing and monitoring your Hazelcast Platform clusters.
- [Tables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/getting-started/tables): Tables are displayed within the dashboard and on the details page of most data structures. This topic explains how to read tables and customize their settings, including the columns shown.
- [Top Bar and Side Bar | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/getting-started/user-interface): To help you find your way around Management Center, this topic explains the Top Bar and Side Bar elements of the user interface.
- [Client Filtering API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/integrate/client-filtering)
- [Cluster Connections API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/integrate/cluster-connections)
- [Cluster Metrics API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/integrate/cluster-metrics)
- [Clustered REST | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/integrate/clustered-rest): The clustered REST API can be enabled to allow you to monitor clustered statistics of distributed objects through HTTP endpoints.
- [Diagnostics Config API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/integrate/diagnostics-config)
- [Integrations | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/integrate/integrations): Management Center provides integrations with Prometheus and JMX, and provides a fully featured Clustered REST API for all the clusters it's connected to.
- [Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/integrate/jmx): Management Center provides a clustered Java Management Extensions (JMX) monitoring service that you can use with any JMX monitoring application. JMX monitoring allows you to monitor clustered metrics of distributed Hazelcast objects from a JMX interface.
- [Clustered JMX Objects and Attributes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/integrate/jmx-api): Explore all available objects and attributes that are available with the clustered JMX interface.
- [Prometheus metrics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/integrate/prometheus-metrics): Management Center automatically reformats all Hazelcast cluster metrics for compatibility with Prometheus. In addition, Management Center updates a subset of metrics to align with Prometheus best practice recommendations. This makes it easier to construct complex queries, build dashboards, and work alongside metrics from other applications.
- [Prometheus monitoring | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/integrate/prometheus-monitoring): Prometheus is an open source monitoring system for metrics. You can export Hazelcast cluster metrics to a scrape endpoint in Management Center that Prometheus can consume. This allows you to monitor Hazelcast along with your other applications in the same monitoring tool.
- [WAN Replication API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/integrate/wan-replication)
- [Upgrade Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/migration-guides)
- [Dashboard page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/monitor-streaming/dashboard)
- [Jobs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/monitor-streaming/jobs)
- [Snapshots | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/monitor-streaming/snapshots)
- [SQL tasks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/monitor-streaming/sql-tasks)
- [5.7.0 Release notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/release-notes/5-7-0): These release notes list any new features, enhancements, fixes, and breaking changes implemented between version 5.6.0 and version 5.7.0 of Hazelcast Management Center (MC).
- [Hazelcast Management Center 5.7.x release notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/release-notes/releases)
- [Execute console commands | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/tools/console): The console feature allows you to execute client operations using the built-in Hazelcast Command-Line Client (CLC).
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/tools/overview)
- [Scripting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/tools/scripting)
- [Execute SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/tools/sql-browser): You can use Management Center to execute SQL queries on a Hazelcast cluster.
- [Troubleshoot Hazelcast clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/troubleshoot/hazelcast-clusters): Management Center writes log entries for each connection failure and allows you to trigger garbage collection and take thread dumps.
- [Troubleshoot Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/troubleshoot/management-center)
- [What’s new in Management Center 5.7 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.10-snapshot/whats-new): Here are the highlights of what’s new and improved in Hazelcast Management Center 5.7, including Prometheus Exporter updates, FIPS-compliance and CP Subsystem improvements.
- [Ask AI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/ask-ai): Use our Ask AI feature to get instant answers to technical questions.
- [Administration | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/administration): You can use the Administration menu item to manage Hazelcast clusters.
- [Change the cluster state | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/changing-cluster-state): Cluster states determine what cluster operations are available. By changing the state of a cluster, you can grant or restrict cluster operations such as migrations as well as change the behavior of those operations.
- [Manage client connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/client-filtering): When you use failover clients, you can disconnect them from one cluster and connect them to another, using client filtering in Management Center.
- [Clients | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/clients): You can use the Clients menu item to monitor all the clients that are connected to your Hazelcast cluster.
- [View a cluster license | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/cluster-license): You can use the Cluster License tab of the Administration menu item to see details about your cluster's license.
- [Cluster state | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/cluster-state): You can use the Cluster State tab of the Administration menu item to see your cluster's name, state, and to shut down the whole cluster.
- [Deploy a client filter list with the REST API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/create-filter-lists-rest): You can define filter lists to allow or disallow client connections to clusters, using the REST API in Management Center.
- [Deploy a client filter list from the UI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/create-filter-lists-ui): You can define filter lists to allow or disallow client connections to clusters, using the Management Center UI.
- [Cluster dashboard | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/dashboard): The cluster dashboard provides an overview of the general state and health of a cluster.
- [Diagnostic logging | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/diagnostic-logging): Hazelcast provides diagnostic logging capabilities that help with troubleshooting and monitoring.
- [Healthcheck | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/healthcheck): Config Healthcheck provides a comprehensive analysis of member configurations and metrics across your cluster to identify potential issues before they become critical problems, and to help prioritize remediation efforts.
- [Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/members): Monitor each member in a cluster and perform management operations on any member such as running garbage collection (GC), taking a thread dump, and shutting it down.
- [User code namespaces | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/namespaces): You can use the <strong>Namespaces</strong> menu item to monitor all the user code namespaces that are connected to your Hazelcast cluster.
- [Persistence | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/persistence): You can use the Persistence tab of the Administration menu item to manage Hazelcast clusters that have persistence enabled.
- [Shut down members and clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/shutting-down-cluster): Maintaining a cluster often requires shutting down and restarting members to make changes take effect. You can shut down a whole Hazelcast cluster or individual members in Management Center with one button.
- [Trigger a force-start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/triggering-force-start): You can trigger a force-start to force a cluster with persistence enabled to restart and delete its persistence store when one or more members are missing after a cluster-wide restart.
- [Trigger hot backups | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/triggering-hot-backup): You can trigger a hot backup to save a snapshot of the persistence store. Hot backups are useful when you wish to bring up a new cluster with the same data or parts of the data. The new cluster can then be used to share load with the original cluster, perform testing, or reproduce an issue, using production data.
- [Trigger a partial-start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/triggering-partial-start): You can trigger a partial-start to allow a cluster with persistence enabled to restart even if some members are missing after a cluster-wide restart.
- [Trigger a rolling upgrade | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/triggering-rolling-upgrade): A rolling upgrade allows you to upgrade all running cluster members to a new version of Hazelcast without interrupting the operation of the cluster.
- [Update cluster configuration at runtime | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/update-config): You can add YAML or XML configuration blocks to your running cluster, without needing to restart it.
- [WAN replication | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/clusters/wan-replication): You can use the WAN Replication menu item to check the status of WAN replication, synchronize map and cache data structures across clusters, and add dynamic configuration for WAN replication.
- [Atomic longs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/cp-subsystem/atomic-long)
- [Atomic references | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/cp-subsystem/atomic-ref)
- [Countdown latches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/cp-subsystem/countdown-latch)
- [CPMaps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/cp-subsystem/cpmap)
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/cp-subsystem/dashboard): You can use the CP Subsystem menu section to manage and monitor the CP Subsystem in a cluster.
- [Fenced locks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/cp-subsystem/fenced-lock)
- [Semaphores | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/cp-subsystem/semaphore)
- [Caches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/data-structures/cache)
- [Executors | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/data-structures/executor)
- [Flake ID generators | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/data-structures/flake-id-gen)
- [Lists | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/data-structures/list)
- [Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/data-structures/map)
- [MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/data-structures/multimap)
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/data-structures/overview)
- [PN counters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/data-structures/pn-counter)
- [Queues | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/data-structures/queue)
- [Reliable topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/data-structures/reliable-topic)
- [Replicated maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/data-structures/replicated-map)
- [Sets | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/data-structures/set)
- [Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/data-structures/topic)
- [Vector collections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/data-structures/vector-collection): Learn how to use and monitor vector collections within Management Center.
- [Active Directory | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/active-directory): You can use your existing Active Directory server for authentication and authorization in Management Center.
- [Cluster connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/cluster-connections): You can connect Management Center to multiple clusters and remove connections when you no longer need them.
- [Configure Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/configuring): You can use various options to configure the Management Center instance as well as the client that Management Center uses to connect to and interact with Hazelcast clusters.
- [Connect with hz-mc conf | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/connecting-to-clusters-mc-conf): You can preconfigure the client connection to a cluster before you start Management Center, using the `hz-mc conf` tool.
- [Connect from the UI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/connecting-to-clusters-ui): You can configure the Hazelcast client for Management Center, using the UI.
- [Dev mode | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/dev-mode): Dev mode is a development security provider that allows you to evaluate Management Center without needing credentials for logging in or using the REST API.
- [H2 upgrade | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/h2-upgrade): Management Center uses H2 database to store metadata, including connected clusters, security provider config, and client filtering configs. As H2 version 1.x is no longer maintained, some security scanners report vulnerabilities for this version. Although not affected by these vulnerabilities, Management Center has been updated to use H2 2.x, which also includes a number of fixes and improvements. However, as metadata from the H2 1.x is not binary compatible with version 2.x , data migration is required.
- [Historical metrics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/historical-metrics): Management Center persists metrics so that you can view historical data for each cluster. You can customize how long data is persisted by changing the time to live (TTL).
- [JAAS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/jaas): You can use your own `javax.security.auth.spi.LoginModule` implementation for authentication and authorization in Management Center.
- [LDAP | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/ldap): You can use your existing LDAP server for authentication/authorization on the Management Center.
- [Enterprise licenses | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/license-management): To use some features in Management Center, you need a valid Enterprise license.
- [Local security provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/local-security-provider): You can use the local security provider to control authentication and authorization in Management Center. With this security provider, user accounts are stored in Management Center's database.
- [Logging | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/logging): You can customize the content of logs as well as enable audit logging.
- [Management Center Configuration Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/mc-conf): The Management Center Configuration Tool (hz-mc conf) is a command line tool that allows you to automate processes that require configuring Management Center, without using the UI.
- [OpenID Connect | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/openid): You can use OpenID Connect single sign-on with Management Center.
- [Usage analytics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/phone-homes): Hazelcast collects analytics data to learn about the usage of Hazelcast Management Center.
- [Production checklist | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/production-checklist): Before going into production, you should have a high availability setup and a secure deployment of Management Center.
- [SAML | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/saml): You can use SAML single sign-on with Management Center.
- [Secure Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/security): To secure Management Center, you can encrypt communications using TLS/SSL, secure user sessions, set up user login authentication, and enable audit logging.
- [Security Providers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/security-providers): You can use security providers to authenticate users in Management Center and allow them to log into user accounts.
- [Serve Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/serve-mc-over-https): You can use a self-signed certificate to allow Management Center to communicate over HTTPS with HTTP clients.
- [Serve Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/serving-https): Serving Management Center over HTTPS secures communication between Management Center and HTTP clients such as web browsers that are connected to it.
- [Secure user sessions | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/sessions): To secure users' sessions, you can configure session timeouts and multiple user login attempts.
- [Switch to a new security provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/switching-security-provider)
- [System properties and environment variables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/system-properties): You can use system properties and environment variables to configure many aspects of Management Center, from JMX to the home directory and feature flags. These properties give you the power to tweak settings at startup without having to configure anything in the UI.
- [TLS/SSL | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/tls-security): To secure any communications from/to Management Center, you can configure it to communicate over TLS/SSL.
- [Update an Enterprise License for Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/updating-mc-license-ui): You can use the UI to update an Enterprise license for Management Center.
- [User management | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/user-management): Users in Management Center have roles that determine what permissions they have. For example, an admin user has access to all features, whereas a metrics-only user can only view metrics and can't see the data. How you create and manage users depends on the security provider you are using.
- [Variable replacers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/deploy-manage/variable-replacers): Variable replacers are Java classes that replace custom strings in configuration. You can use variable replacers in command line arguments or in the `hz-mc conf` tool. A common use case for variable replacers is to mask sensitive information such as usernames and passwords.
- [Get Started with Management Center Using Docker Compose | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/getting-started/get-started): In this tutorial, you'll start up an instance of Management Center that automatically connects to a Hazelcast cluster, using a Docker container. To enable you to get up and running quickly, an example <code>docker-compose.yml</code> is provided. No other configuration or dependencies are required.
- [Get support | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/getting-started/get-support): Hazelcast provides two types of support: community support for the Community Edition, and customer support for the Enterprise Edition.
- [Graphs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/getting-started/graphs): Graphs are displayed on the dashboard and on the details page of any data structure (with a few exceptions). This topic explains how to read graphs and customize their data points.
- [Install and start Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/getting-started/install): You can install Management Center, using Docker, a package manager, or the binary distribution.
- [Management Center 5.9.0 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/getting-started/overview): Hazelcast Management Center provides a powerful and intuitive interface for managing and monitoring your Hazelcast Platform clusters.
- [Tables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/getting-started/tables): Tables are displayed within the dashboard and on the details page of most data structures. This topic explains how to read tables and customize their settings, including the columns shown.
- [Top Bar and Side Bar | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/getting-started/user-interface): To help you find your way around Management Center, this topic explains the Top Bar and Side Bar elements of the user interface.
- [Client Filtering API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/integrate/client-filtering)
- [Cluster Connections API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/integrate/cluster-connections)
- [Cluster Metrics API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/integrate/cluster-metrics)
- [Clustered REST | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/integrate/clustered-rest): The clustered REST API can be enabled to allow you to monitor clustered statistics of distributed objects through HTTP endpoints.
- [Diagnostics Config API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/integrate/diagnostics-config)
- [Integrations | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/integrate/integrations): Management Center provides integrations with Prometheus and JMX, and provides a fully featured Clustered REST API for all the clusters it's connected to.
- [Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/integrate/jmx): Management Center provides a clustered Java Management Extensions (JMX) monitoring service that you can use with any JMX monitoring application. JMX monitoring allows you to monitor clustered metrics of distributed Hazelcast objects from a JMX interface.
- [Clustered JMX Objects and Attributes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/integrate/jmx-api): Explore all available objects and attributes that are available with the clustered JMX interface.
- [Prometheus metrics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/integrate/prometheus-metrics): Management Center automatically reformats all Hazelcast cluster metrics for compatibility with Prometheus. In addition, Management Center updates a subset of metrics to align with Prometheus best practice recommendations. This makes it easier to construct complex queries, build dashboards, and work alongside metrics from other applications.
- [Prometheus monitoring | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/integrate/prometheus-monitoring): Prometheus is an open source monitoring system for metrics. You can export Hazelcast cluster metrics to a scrape endpoint in Management Center that Prometheus can consume. This allows you to monitor Hazelcast along with your other applications in the same monitoring tool.
- [WAN Replication API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/integrate/wan-replication)
- [Upgrade Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/migration-guides)
- [Dashboard page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/monitor-streaming/dashboard)
- [Jobs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/monitor-streaming/jobs)
- [Snapshots | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/monitor-streaming/snapshots)
- [SQL tasks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/monitor-streaming/sql-tasks)
- [Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/release-notes/releases): These release notes list any new features, enhancements, fixes, security issues and breaking changes that were made for Hazelcast Management Center.
- [Execute console commands | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/tools/console): The console feature allows you to execute client operations using the built-in Hazelcast Command-Line Client (CLC).
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/tools/overview)
- [Scripting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/tools/scripting)
- [Execute SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/tools/sql-browser): You can use Management Center to execute SQL queries on a Hazelcast cluster.
- [CLC | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/troubleshoot/clc): This page includes some known issues and limitations when using CLC (Command Line Client) in Management Center, as well as guidance on workarounds.
- [Troubleshoot Hazelcast clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/troubleshoot/hazelcast-clusters): Management Center writes log entries for each connection failure and allows you to trigger garbage collection and take thread dumps.
- [Troubleshoot Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/troubleshoot/management-center)
- [What’s new in Management Center 5.7 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.9/whats-new): Here are the highlights of what’s new and improved in Hazelcast Management Center 5.7, including Prometheus Exporter updates, FIPS-compliance and CP Subsystem improvements.
- [Ask AI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/ask-ai): Use our Ask AI feature to get instant answers to technical questions.
- [Administration | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/administration): You can use the Administration menu item to manage Hazelcast clusters.
- [Changing the Cluster State | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/changing-cluster-state): Cluster states determine what cluster operations are available. By changing the state of a cluster, you can grant or restrict cluster operations such as migrations as well as change the behavior of those operations.
- [Managing Client Connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/client-filtering): When you use failover clients, you can disconnect them from one cluster and connect them to another, using client filtering in Management Center.
- [Clients | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/clients): You can use the Clients menu item to monitor all the clients that are connected to your Hazelcast cluster.
- [Viewing a Cluster License | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/cluster-license): You can use the Cluster License tab of the Administration menu item to see details about your cluster's license.
- [Cluster State | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/cluster-state): You can use the Cluster State tab of the Administration menu item to see your cluster's name, state, and to shut down the whole cluster.
- [Deploying a Client Filter List with the REST API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/create-filter-lists-rest): You can define filter lists to allow or disallow client connections to clusters, using the REST API in Management Center.
- [Deploying a Client Filter List from the UI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/create-filter-lists-ui): You can define filter lists to allow or disallow client connections to clusters, using the Management Center UI.
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/dashboard): The cluster dashboard provides an overview of the general state and health of a cluster.
- [Healthcheck | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/healthcheck): You can run Healthcheck to analyze member configurations and metrics in a cluster.
- [Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/members): Monitor each member in a cluster and perform management operations on any member such as running garbage collection (GC), taking a thread dump, and shutting it down.
- [User Code Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/namespaces): You can use the <strong>Namespaces</strong> menu item to monitor all the user code namespaces that are connected to your Hazelcast cluster.
- [Persistence | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/persistence): You can use the Persistence tab of the Administration menu item to manage Hazelcast clusters that have persistence enabled.
- [Shutting Down Members and Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/shutting-down-cluster): Maintaining a cluster often requires shutting down and restarting members to make changes take effect. You can shut down a whole Hazelcast cluster or individual members in Management Center with one button.
- [Triggering a Force-Start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/triggering-force-start): You can trigger a force-start to force a cluster with persistence enabled to restart and delete its persistence store when one or more members are missing after a cluster-wide restart.
- [Triggering Hot Backups | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/triggering-hot-backup): You can trigger a hot backup to save a snapshot of the persistence store. Hot backups are useful when you wish to bring up a new cluster with the same data or parts of the data. The new cluster can then be used to share load with the original cluster, perform testing, or reproduce an issue, using production data.
- [Triggering a Partial-Start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/triggering-partial-start): You can trigger a partial-start to allow a cluster with persistence enabled to restart even if some members are missing after a cluster-wide restart.
- [Triggering a Rolling Upgrade | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/triggering-rolling-upgrade): A rolling upgrade allows you to upgrade all running cluster members to a new version of Hazelcast without interrupting the operation of the cluster.
- [Updating Cluster Configuration at Runtime | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/update-config): You can add YAML or XML configuration blocks to your running cluster, without needing to restart it.
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/clusters/wan-replication): You can use the WAN Replication menu item to check the status of WAN replication, synchronize map and cache data structures across clusters, and add dynamic configuration for WAN replication.
- [Atomic Longs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/cp-subsystem/atomic-long)
- [Atomic References | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/cp-subsystem/atomic-ref)
- [Countdown Latches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/cp-subsystem/countdown-latch)
- [CPMaps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/cp-subsystem/cpmap)
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/cp-subsystem/dashboard): You can use the CP Subsystem menu section to manage and monitor the CP subsystem in a cluster.
- [Fenced Locks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/cp-subsystem/fenced-lock)
- [Semaphores | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/cp-subsystem/semaphore)
- [Caches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/data-structures/cache)
- [Executors | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/data-structures/executor)
- [Flake ID Generators | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/data-structures/flake-id-gen)
- [Lists | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/data-structures/list)
- [Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/data-structures/map)
- [MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/data-structures/multimap)
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/data-structures/overview): You can monitor data structures in your cluster using the *Storage*, *Compute*, and *Messaging* menus in Management Center.
- [PN Counters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/data-structures/pn-counter)
- [Queues | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/data-structures/queue)
- [Reliable Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/data-structures/reliable-topic)
- [Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/data-structures/replicated-map)
- [Sets | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/data-structures/set)
- [Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/data-structures/topic)
- [Vector Collections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/data-structures/vector-collection): Learn how to use and monitor vector collections within Management Center.
- [Active Directory | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/active-directory): You can use your existing Active Directory server for authentication and authorization in Management Center.
- [Cluster Connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/cluster-connections): You can connect Management Center to multiple clusters and remove connections when you no longer need them.
- [Configuring Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/configuring): You can use various options to configure the Management Center instance as well as the client that Management Center uses to connect to and interact with Hazelcast clusters.
- [Connecting to a Cluster with the hz-mc conf Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/connecting-to-clusters-mc-conf): You can preconfigure the client connection to a cluster before you start Management Center, using the `hz-mc conf` tool.
- [Connecting to a Cluster from the UI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/connecting-to-clusters-ui): You can configure the Hazelcast client for Management Center, using the UI.
- [Dev Mode | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/dev-mode): Dev mode is a development security provider that allows you to evaluate Management Center without needing credentials for logging in or using the REST API.
- [H2 upgrade | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/h2-upgrade): Management Center uses H2 database to store metadata, including connected clusters, security provider config, and client filtering configs. As H2 version 1.x is no longer maintained, some security scanners report vulnerabilities for this version. Although not affected by these vulnerabilities, Management Center has been updated to use H2 2.x, which also includes a number of fixes and improvements. However, as metadata from the H2 1.x is not binary compatible with version 2.x , data migration is required.
- [Historical Metrics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/historical-metrics): Management Center persists metrics so that you can view historical data for each cluster. You can customize how long data is persisted by changing the time-to-live (TTL).
- [JAAS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/jaas): You can use your own `javax.security.auth.spi.LoginModule` implementation for authentication and authorization in Management Center.
- [LDAP | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/ldap): You can use your existing LDAP server for authentication/authorization on the Management Center.
- [Enterprise Licenses | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/license-management): To use some features in Management Center, you need an Enterprise license.
- [Local Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/local-security-provider): You can use the local security provider to control authentication and authorization in Management Center. With this security provider, user accounts are stored in Management Center's database.
- [Logging | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/logging): You can customize the content of logs as well as enable audit logging.
- [Management Center Configuration Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/mc-conf): The Management Center Configuration Tool (hz-mc conf) is a command line tool that allows you to automate processes that require configuring Management Center, without using the UI.
- [OpenID Connect | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/openid): You can use OpenID Connect single sign-on with Management Center.
- [Usage Analytics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/phone-homes): Hazelcast collects analytics data to learn about the usage of Hazelcast Management Center.
- [Production Checklist | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/production-checklist): Before going into production, you should have a high availability setup and a secure deployment of Management Center.
- [SAML | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/saml): You can use SAML single sign-on with Management Center.
- [Securing Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/security): To secure Management Center, you can encrypt communications using TLS/SSL, secure user sessions, set up user login authentication, and enable audit logging.
- [Security Providers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/security-providers): You can use security providers to authenticate users in Management Center and allow them to log into user accounts.
- [Serve Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/serve-mc-over-https): You can use a self-signed certificate to allow Management Center to communicate over HTTPS with HTTP clients.
- [Serving Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/serving-https): Serving Management Center over HTTPS secures communication between Management Center and HTTP clients such as web browsers that are connected to it.
- [Securing User Sessions | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/sessions): To secure users' sessions, you can configure session timeouts and multiple user login attempts.
- [Switching to a New Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/switching-security-provider)
- [System Properties and Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/system-properties): You can use system properties and environment variables to configure many aspects of Management Center, from JMX to the home directory and feature flags. These properties give you the power to tweak settings at startup without having to configure anything in the UI.
- [TLS/SSL | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/tls-security): To secure any communications from/to Management Center, you can configure it to communicate over TLS/SSL.
- [Updating an Enterprise License for Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/updating-mc-license-ui): You can use the UI to update an Enterprise license for Management Center.
- [User Management | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/user-management): Users in Management Center have roles that determine what permissions they have. For example, an admin user has access to all features, whereas a metrics-only user can only view metrics and can't see the data. To create and manage users, it depends on which security provider you are using.
- [Variable Replacers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/deploy-manage/variable-replacers): Variable replacers are Java classes that replace custom strings in configuration. You can use variable replacers in command line arguments or the `hz-mc conf` tool. A common usecase for variable replacers is to mask sensitive information such as usernames and passwords.
- [Get Started with Management Center Using Docker Compose | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/getting-started/get-started): In this tutorial, you'll start up an instance of Management Center that automatically connects to a Hazelcast cluster, using a Docker container. To get up and running as quickly as possible, an example <code>docker-compose.yml</code> is provided. No other configuration or dependencies are required.
- [Get support | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/getting-started/get-support): Hazelcast provides two types of support: community support for the Community Edition, and customer support for the Enterprise Edition.
- [Graphs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/getting-started/graphs): Graphs are displayed on the dashboard and on the details page of any data structure (with a few exceptions). This page explains how to read graphs and customize their data points.
- [Installing and Starting Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/getting-started/install): You can install Management Center, using Docker, a package manager, or the binary distribution.
- [Management Center 5.8.0 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/getting-started/overview): Hazelcast Management Center provides a powerful and intuitive interface for managing and monitoring your Hazelcast Platform clusters.
- [Tables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/getting-started/tables): Tables are displayed within the dashboard and on the details page of most data structures. This page explains how to read tables and customize their settings, including the columns shown.
- [Top Bar and Side Bar | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/getting-started/user-interface): To help you find your way around Management Center, this page explains the Top Bar and the Side Bar items of the user interface.
- [Client Filtering API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/integrate/client-filtering)
- [Cluster Connections API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/integrate/cluster-connections)
- [Cluster Metrics API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/integrate/cluster-metrics)
- [Clustered REST | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/integrate/clustered-rest): The clustered REST API can be enabled to allow you to monitor clustered statistics of distributed objects through HTTP endpoints.
- [Integrations | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/integrate/integrations): Management Center provides integrations with Prometheus and JMX and provides a fully featured Clustered REST API for all the Clusters that it is connected to.
- [Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/integrate/jmx): Management Center provides a clustered Java Management Extensions (JMX) monitoring service that you can use with any JMX monitoring application. JMX monitoring allows you to monitor clustered metrics of distributed Hazelcast objects from a JMX interface.
- [Clustered JMX Objects and Attributes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/integrate/jmx-api): Explore all available objects and attributes that are available with the clustered JMX interface.
- [Prometheus metrics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/integrate/prometheus-metrics): Management Center automatically reformats all Hazelcast cluster metrics for compatibility with Prometheus. In addition, Management Center updates a subset of metrics to align with Prometheus best practice recommendations. This makes it easier to construct complex queries, build dashboards, and work alongside metrics from other applications.
- [Prometheus Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/integrate/prometheus-monitoring): Prometheus is an open source monitoring system for metrics. You can export Hazelcast cluster metrics to a scrape endpoint in Management Center that Prometheus can consume. This allows you to monitor Hazelcast along with your other applications in the same monitoring tool.
- [WAN Replication API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/integrate/wan-replication)
- [Upgrading Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/migration-guides)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/monitor-streaming/dashboard): The *Streaming* dashboard gives you an overview of a connected cluster, which has Jet enabled.
- [Jobs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/monitor-streaming/jobs): The *Jobs* menu item provides a general overview of the jobs in a Hazelcast cluster that has Jet enabled.
- [Snapshots | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/monitor-streaming/snapshots)
- [SQL Tasks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/monitor-streaming/sql-tasks)
- [5.8.0 Release notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/release-notes/5-8-0): These release notes list any new features, enhancements, fixes, and breaking changes implemented between version 5.7.1 and version 5.8.0 of Hazelcast Management Center (MC).
- [Hazelcast Management Center 5.8.x release notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/release-notes/releases)
- [Executing console commands | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/tools/console): The Management Center console allows you to interact with your Hazelcast cluster.
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/tools/overview)
- [Scripting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/tools/scripting)
- [Executing SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/tools/sql-browser): You can use Management Center to execute SQL queries on a Hazelcast cluster.
- [Troubleshooting Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/troubleshoot/hazelcast-clusters): Management Center writes log entries for each connection failure and allows you to trigger garbage collection and take thread dumps.
- [Troubleshooting Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.8/troubleshoot/management-center)
- [Ask AI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/ask-ai): Use our Ask AI feature to get instant answers to technical questions.
- [Administration | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/administration): You can use the Administration menu item to manage Hazelcast clusters.
- [Changing the Cluster State | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/changing-cluster-state): Cluster states determine what cluster operations are available. By changing the state of a cluster, you can grant or restrict cluster operations such as migrations as well as change the behavior of those operations.
- [Managing Client Connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/client-filtering): When you use failover clients, you can disconnect them from one cluster and connect them to another, using client filtering in Management Center.
- [Clients | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/clients): You can use the Clients menu item to monitor all the clients that are connected to your Hazelcast cluster.
- [Viewing a Cluster License | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/cluster-license): You can use the Cluster License tab of the Administration menu item to see details about your cluster's license.
- [Cluster State | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/cluster-state): You can use the Cluster State tab of the Administration menu item to see your cluster's name, state, and to shut down the whole cluster.
- [Deploying a Client Filter List with the REST API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/create-filter-lists-rest): You can define filter lists to allow or disallow client connections to clusters, using the REST API in Management Center.
- [Deploying a Client Filter List from the UI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/create-filter-lists-ui): You can define filter lists to allow or disallow client connections to clusters, using the Management Center UI.
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/dashboard): The cluster dashboard provides an overview of the general state and health of a cluster.
- [Healthcheck | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/healthcheck): You can run Healthcheck to analyze member configurations and metrics in a cluster.
- [Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/members): Monitor each member in a cluster and perform management operations on any member such as running garbage collection (GC), taking a thread dump, and shutting it down.
- [User Code Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/namespaces): You can use the <strong>Namespaces</strong> menu item to monitor all the user code namespaces that are connected to your Hazelcast cluster.
- [Persistence | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/persistence): You can use the Persistence tab of the Administration menu item to manage Hazelcast clusters that have persistence enabled.
- [Shutting Down Members and Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/shutting-down-cluster): Maintaining a cluster often requires shutting down and restarting members to make changes take effect. You can shut down a whole Hazelcast cluster or individual members in Management Center with one button.
- [Triggering a Force-Start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/triggering-force-start): You can trigger a force-start to force a cluster with persistence enabled to restart and delete its persistence store when one or more members are missing after a cluster-wide restart.
- [Triggering Hot Backups | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/triggering-hot-backup): You can trigger a hot backup to save a snapshot of the persistence store. Hot backups are useful when you wish to bring up a new cluster with the same data or parts of the data. The new cluster can then be used to share load with the original cluster, perform testing, or reproduce an issue, using production data.
- [Triggering a Partial-Start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/triggering-partial-start): You can trigger a partial-start to allow a cluster with persistence enabled to restart even if some members are missing after a cluster-wide restart.
- [Triggering a Rolling Upgrade | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/triggering-rolling-upgrade): A rolling upgrade allows you to upgrade all running cluster members to a new version of Hazelcast without interrupting the operation of the cluster.
- [Updating Cluster Configuration at Runtime | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/update-config): You can add YAML or XML configuration blocks to your running cluster, without needing to restart it.
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/clusters/wan-replication): You can use the WAN Replication menu item to check the status of WAN replication, synchronize map and cache data structures across clusters, and add dynamic configuration for WAN replication.
- [Atomic Longs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/cp-subsystem/atomic-long)
- [Atomic References | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/cp-subsystem/atomic-ref)
- [Countdown Latches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/cp-subsystem/countdown-latch)
- [CPMaps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/cp-subsystem/cpmap)
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/cp-subsystem/dashboard): You can use the CP Subsystem menu section to manage and monitor the CP subsystem in a cluster.
- [Fenced Locks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/cp-subsystem/fenced-lock)
- [Semaphores | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/cp-subsystem/semaphore)
- [Caches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/data-structures/cache)
- [Executors | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/data-structures/executor)
- [Flake ID Generators | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/data-structures/flake-id-gen)
- [Lists | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/data-structures/list)
- [Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/data-structures/map)
- [MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/data-structures/multimap)
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/data-structures/overview): You can monitor data structures in your cluster using the *Storage*, *Compute*, and *Messaging* menus in Management Center.
- [PN Counters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/data-structures/pn-counter)
- [Queues | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/data-structures/queue)
- [Reliable Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/data-structures/reliable-topic)
- [Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/data-structures/replicated-map)
- [Sets | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/data-structures/set)
- [Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/data-structures/topic)
- [Vector Collections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/data-structures/vector-collection): Learn how to use and monitor vector collections within Management Center.
- [Active Directory | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/active-directory): You can use your existing Active Directory server for authentication and authorization in Management Center.
- [Cluster Connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/cluster-connections): You can connect Management Center to multiple clusters and remove connections when you no longer need them.
- [Configuring Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/configuring): You can use various options to configure the Management Center instance as well as the client that Management Center uses to connect to and interact with Hazelcast clusters.
- [Connecting to a Cluster with the hz-mc conf Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/connecting-to-clusters-mc-conf): You can preconfigure the client connection to a cluster before you start Management Center, using the `hz-mc conf` tool.
- [Connecting to a Cluster from the UI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/connecting-to-clusters-ui): You can configure the Hazelcast client for Management Center, using the UI.
- [Dev Mode | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/dev-mode): Dev mode is a development security provider that allows you to evaluate Management Center without needing credentials for logging in or using the REST API.
- [H2 upgrade | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/h2-upgrade): Management Center uses H2 database to store metadata, including connected clusters, security provider config, and client filtering configs. As H2 version 1.x is no longer maintained, some security scanners report vulnerabilities for this version. Although not affected by these vulnerabilities, Management Center has been updated to use H2 2.x, which also includes a number of fixes and improvements. However, as metadata from the H2 1.x is not binary compatible with version 2.x , data migration is required.
- [Historical Metrics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/historical-metrics): Management Center persists metrics so that you can view historical data for each cluster. You can customize how long data is persisted by changing the time-to-live (TTL).
- [JAAS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/jaas): You can use your own `javax.security.auth.spi.LoginModule` implementation for authentication and authorization in Management Center.
- [LDAP | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/ldap): You can use your existing LDAP server for authentication/authorization on the Management Center.
- [Enterprise Licenses | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/license-management): To use some features in Management Center, you need an Enterprise license.
- [Local Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/local-security-provider): You can use the local security provider to control authentication and authorization in Management Center. With this security provider, user accounts are stored in Management Center's database.
- [Logging | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/logging): You can customize the content of logs as well as enable audit logging.
- [Management Center Configuration Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/mc-conf): The Management Center Configuration Tool (hz-mc conf) is a command line tool that allows you to automate processes that require configuring Management Center, without using the UI.
- [OpenID Connect | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/openid): You can use OpenID Connect single sign-on with Management Center.
- [Usage Analytics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/phone-homes): Hazelcast collects analytics data to learn about the usage of Hazelcast Management Center.
- [Production Checklist | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/production-checklist): Before going into production, you should have a high availability setup and a secure deployment of Management Center.
- [SAML | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/saml): You can use SAML single sign-on with Management Center.
- [Securing Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/security): To secure Management Center, you can encrypt communications using TLS/SSL, secure user sessions, set up user login authentication, and enable audit logging.
- [Security Providers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/security-providers): You can use security providers to authenticate users in Management Center and allow them to log into user accounts.
- [Serve Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/serve-mc-over-https): You can use a self-signed certificate to allow Management Center to communicate over HTTPS with HTTP clients.
- [Serving Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/serving-https): Serving Management Center over HTTPS secures communication between Management Center and HTTP clients such as web browsers that are connected to it.
- [Securing User Sessions | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/sessions): To secure users' sessions, you can configure session timeouts and multiple user login attempts.
- [Switching to a New Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/switching-security-provider)
- [System Properties and Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/system-properties): You can use system properties and environment variables to configure many aspects of Management Center, from JMX to the home directory and feature flags. These properties give you the power to tweak settings at startup without having to configure anything in the UI.
- [TLS/SSL | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/tls-security): To secure any communications from/to Management Center, you can configure it to communicate over TLS/SSL.
- [Updating an Enterprise License for Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/updating-mc-license-ui): You can use the UI to update an Enterprise license for Management Center.
- [User Management | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/user-management): Users in Management Center have roles that determine what permissions they have. For example, an admin user has access to all features, whereas a metrics-only user can only view metrics and can't see the data. To create and manage users, it depends on which security provider you are using.
- [Variable Replacers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/deploy-manage/variable-replacers): Variable replacers are Java classes that replace custom strings in configuration. You can use variable replacers in command line arguments or the `hz-mc conf` tool. A common usecase for variable replacers is to mask sensitive information such as usernames and passwords.
- [Get Started with Management Center Using Docker Compose | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/getting-started/get-started): In this tutorial, you'll start up an instance of Management Center that automatically connects to a Hazelcast cluster, using a Docker container. To get up and running as quickly as possible, an example <code>docker-compose.yml</code> is provided. No other configuration or dependencies are required.
- [Graphs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/getting-started/graphs): Graphs are displayed on the dashboard and on the details page of any data structure (with a few exceptions). This page explains how to read graphs and customize their data points.
- [Installing and Starting Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/getting-started/install): You can install Management Center, using Docker, a package manager, or the binary distribution.
- [Management Center 5.7.1 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/getting-started/overview): Management Center is a tool for managing and monitoring Hazelcast Platform clusters.
- [Tables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/getting-started/tables): Tables are displayed within the dashboard and on the details page of most data structures. This page explains how to read tables and customize their settings, including the columns shown.
- [Top Bar and Side Bar | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/getting-started/user-interface): To help you find your way around Management Center, this page explains the Top Bar and the Side Bar items of the user interface.
- [Client Filtering API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/integrate/client-filtering)
- [Cluster Connections API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/integrate/cluster-connections)
- [Cluster Metrics API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/integrate/cluster-metrics)
- [Clustered REST | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/integrate/clustered-rest): The clustered REST API can be enabled to allow you to monitor clustered statistics of distributed objects through HTTP endpoints.
- [Integrations | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/integrate/integrations): Management Center provides integrations with Prometheus and JMX and provides a fully featured Clustered REST API for all the Clusters that it is connected to.
- [Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/integrate/jmx): Management Center provides a clustered Java Management Extensions (JMX) monitoring service that you can use with any JMX monitoring application. JMX monitoring allows you to monitor clustered metrics of distributed Hazelcast objects from a JMX interface.
- [Clustered JMX Objects and Attributes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/integrate/jmx-api): Explore all available objects and attributes that are available with the clustered JMX interface.
- [Prometheus metrics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/integrate/prometheus-metrics): Management Center automatically reformats all Hazelcast cluster metrics for compatibility with Prometheus. In addition, Management Center updates a subset of metrics to align with Prometheus best practice recommendations. This makes it easier to construct complex queries, build dashboards, and work alongside metrics from other applications.
- [Prometheus Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/integrate/prometheus-monitoring): Prometheus is an open source monitoring system for metrics. You can export Hazelcast cluster metrics to a scrape endpoint in Management Center that Prometheus can consume. This allows you to monitor Hazelcast along with your other applications in the same monitoring tool.
- [WAN Replication API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/integrate/wan-replication)
- [Upgrading Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/migration-guides)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/monitor-streaming/dashboard): The *Streaming* dashboard gives you an overview of a connected cluster, which has Jet enabled.
- [Jobs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/monitor-streaming/jobs): The *Jobs* menu item provides a general overview of the jobs in a Hazelcast cluster that has Jet enabled.
- [Snapshots | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/monitor-streaming/snapshots)
- [SQL Tasks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/monitor-streaming/sql-tasks)
- [5.7.0 Release notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/release-notes/5-7-0): These release notes list any new features, enhancements, fixes, and breaking changes implemented between version 5.6.0 and version 5.7.0 of Hazelcast Management Center (MC).
- [5.7.1 Release notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/release-notes/5-7-1): These release notes list any new features, enhancements, fixes, and breaking changes implemented between version 5.7.0 and version 5.7.1 of Hazelcast Management Center (MC).
- [Hazelcast Management Center 5.7.x release notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/release-notes/releases)
- [Executing Console Commands | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/tools/console): The console feature allows you to execute client operations using the built-in Hazelcast Command-Line Client (CLC).
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/tools/overview)
- [Scripting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/tools/scripting)
- [Executing SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/tools/sql-browser): You can use Management Center to execute SQL queries on a Hazelcast cluster.
- [Troubleshooting Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/troubleshoot/hazelcast-clusters): Management Center writes log entries for each connection failure and allows you to trigger garbage collection and take thread dumps.
- [Troubleshooting Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/troubleshoot/management-center)
- [What’s new in Management Center 5.7 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.7/whats-new): Here are the highlights of what’s new and improved in Hazelcast Management Center 5.7, including Prometheus Exporter updates, FIPS-compliance and CP Subsystem improvements.
- [Administration | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/administration): You can use the Administration menu item to manage Hazelcast clusters.
- [Changing the Cluster State | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/changing-cluster-state): Cluster states determine what cluster operations are available. By changing the state of a cluster, you can grant or restrict cluster operations such as migrations as well as change the behavior of those operations.
- [Managing Client Connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/client-filtering): When you use failover clients, you can disconnect them from one cluster and connect them to another, using client filtering in Management Center.
- [Clients | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/clients): You can use the Clients menu item to monitor all the clients that are connected to your Hazelcast cluster.
- [Viewing a Cluster License | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/cluster-license): You can use the Cluster License tab of the Administration menu item to see details about your cluster's license.
- [Cluster State | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/cluster-state): You can use the Cluster State tab of the Administration menu item to see your cluster's name, state, and to shut down the whole cluster.
- [Deploying a Client Filter List with the REST API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/create-filter-lists-rest): You can define filter lists to allow or disallow client connections to clusters, using the REST API in Management Center.
- [Deploying a Client Filter List from the UI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/create-filter-lists-ui): You can define filter lists to allow or disallow client connections to clusters, using the Management Center UI.
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/dashboard): The cluster dashboard provides an overview of the general state and health of a cluster.
- [Healthcheck | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/healthcheck): You can run Healthcheck to analyze member configurations and metrics in a cluster.
- [Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/members): Monitor each member in a cluster and perform management operations on any member such as running garbage collection (GC), taking a thread dump, and shutting it down.
- [User Code Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/namespaces): You can use the <strong>Namespaces</strong> menu item to monitor all the user code namespaces that are connected to your Hazelcast cluster.
- [Persistence | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/persistence): You can use the Persistence tab of the Administration menu item to manage Hazelcast clusters that have persistence enabled.
- [Shutting Down Members and Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/shutting-down-cluster): Maintaining a cluster often requires shutting down and restarting members to make changes take effect. You can shut down a whole Hazelcast cluster or individual members in Management Center with one button.
- [Triggering a Force-Start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/triggering-force-start): You can trigger a force-start to force a cluster with persistence enabled to restart and delete its persistence store when one or more members are missing after a cluster-wide restart.
- [Triggering Hot Backups | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/triggering-hot-backup): You can trigger a hot backup to save a snapshot of the persistence store. Hot backups are useful when you wish to bring up a new cluster with the same data or parts of the data. The new cluster can then be used to share load with the original cluster, perform testing, or reproduce an issue, using production data.
- [Triggering a Partial-Start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/triggering-partial-start): You can trigger a partial-start to allow a cluster with persistence enabled to restart even if some members are missing after a cluster-wide restart.
- [Triggering a Rolling Upgrade | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/triggering-rolling-upgrade): A rolling upgrade allows you to upgrade all running cluster members to a new version of Hazelcast without interrupting the operation of the cluster.
- [Updating Cluster Configuration at Runtime | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/update-config): You can add YAML or XML configuration blocks to your running cluster, without needing to restart it.
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/clusters/wan-replication): You can use the WAN Replication menu item to check the status of WAN replication, synchronize map and cache data structures across clusters, and add dynamic configuration for WAN replication.
- [Atomic Longs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/cp-subsystem/atomic-long)
- [Atomic References | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/cp-subsystem/atomic-ref)
- [Countdown Latches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/cp-subsystem/countdown-latch)
- [CPMaps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/cp-subsystem/cpmap)
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/cp-subsystem/dashboard): You can use the CP Subsystem menu section to manage and monitor the CP subsystem in a cluster.
- [Fenced Locks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/cp-subsystem/fenced-lock)
- [Semaphores | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/cp-subsystem/semaphore)
- [Caches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/data-structures/cache)
- [Executors | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/data-structures/executor)
- [Flake ID Generators | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/data-structures/flake-id-gen)
- [Lists | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/data-structures/list)
- [Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/data-structures/map)
- [MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/data-structures/multimap)
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/data-structures/overview): You can monitor data structures in your cluster using the *Storage*, *Compute*, and *Messaging* menus in Management Center.
- [PN Counters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/data-structures/pn-counter)
- [Queues | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/data-structures/queue)
- [Reliable Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/data-structures/reliable-topic)
- [Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/data-structures/replicated-map)
- [Sets | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/data-structures/set)
- [Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/data-structures/topic)
- [Vector Collections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/data-structures/vector-collection): Learn how to use and monitor vector collections within Management Center.
- [Active Directory | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/active-directory): You can use your existing Active Directory server for authentication and authorization in Management Center.
- [Cluster Connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/cluster-connections): You can connect Management Center to multiple clusters and remove connections when you no longer need them.
- [Configuring Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/configuring): You can use various options to configure the Management Center instance as well as the client that Management Center uses to connect to and interact with Hazelcast clusters.
- [Connecting to a Cluster with the hz-mc conf Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/connecting-to-clusters-mc-conf): You can preconfigure the client connection to a cluster before you start Management Center, using the `hz-mc conf` tool.
- [Connecting to a Cluster from the UI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/connecting-to-clusters-ui): You can configure the Hazelcast client for Management Center, using the UI.
- [Dev Mode | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/dev-mode): Dev mode is a development security provider that allows you to evaluate Management Center without needing credentials for logging in or using the REST API.
- [H2 upgrade | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/h2-upgrade): Management Center uses H2 database to store metadata, including connected clusters, security provider config, and client filtering configs. As H2 version 1.x is no longer maintained, some security scanners report vulnerabilities for this version. Although not affected by these vulnerabilities, Management Center has been updated to use H2 2.x, which also includes a number of fixes and improvements. However, as metadata from the H2 1.x is not binary compatible with version 2.x , data migration is required.
- [Historical Metrics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/historical-metrics): Management Center persists metrics so that you can view historical data for each cluster. You can customize how long data is persisted by changing the time-to-live (TTL).
- [JAAS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/jaas): You can use your own `javax.security.auth.spi.LoginModule` implementation for authentication and authorization in Management Center.
- [LDAP | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/ldap): You can use your existing LDAP server for authentication/authorization on the Management Center.
- [Enterprise Licenses | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/license-management): To use some features in Management Center, you need an Enterprise license.
- [Local Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/local-security-provider): You can use the local security provider to control authentication and authorization in Management Center. With this security provider, user accounts are stored in Management Center's database.
- [Logging | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/logging): You can customize the content of logs as well as enable audit logging.
- [Management Center Configuration Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/mc-conf): The Management Center Configuration Tool (hz-mc conf) is a command line tool that allows you to automate processes that require configuring Management Center, without using the UI.
- [OpenID Connect | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/openid): You can use OpenID Connect single sign-on with Management Center.
- [Usage Analytics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/phone-homes): Hazelcast collects analytics data to learn about the usage of Hazelcast Management Center.
- [Production Checklist | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/production-checklist): Before going into production, you should have a high availability setup and a secure deployment of Management Center.
- [SAML | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/saml): You can use SAML single sign-on with Management Center.
- [Securing Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/security): To secure Management Center, you can encrypt communications using TLS/SSL, secure user sessions, set up user login authentication, and enable audit logging.
- [Security Providers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/security-providers): You can use security providers to authenticate users in Management Center and allow them to log into user accounts.
- [Serve Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/serve-mc-over-https): You can use a self-signed certificate to allow Management Center to communicate over HTTPS with HTTP clients.
- [Serving Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/serving-https): Serving Management Center over HTTPS secures communication between Management Center and HTTP clients such as web browsers that are connected to it.
- [Securing User Sessions | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/sessions): To secure users' sessions, you can configure session timeouts and multiple user login attempts.
- [Switching to a New Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/switching-security-provider)
- [System Properties and Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/system-properties): You can use system properties and environment variables to configure many aspects of Management Center, from JMX to the home directory and feature flags. These properties give you the power to tweak settings at startup without having to configure anything in the UI.
- [TLS/SSL | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/tls-security): To secure any communications from/to Management Center, you can configure it to communicate over TLS/SSL.
- [Updating an Enterprise License for Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/updating-mc-license-ui): You can use the UI to update an Enterprise license for Management Center.
- [User Management | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/user-management): Users in Management Center have roles that determine what permissions they have. For example, an admin user has access to all features, whereas a metrics-only user can only view metrics and can't see the data. To create and manage users, it depends on which security provider you are using.
- [Variable Replacers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/deploy-manage/variable-replacers): Variable replacers are Java classes that replace custom strings in configuration. You can use variable replacers in command line arguments or the `hz-mc conf` tool. A common usecase for variable replacers is to mask sensitive information such as usernames and passwords.
- [Get Started with Management Center Using Docker Compose | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/getting-started/get-started): In this tutorial, you'll start up an instance of Management Center that automatically connects to a Hazelcast cluster, using a Docker container. To get up and running as quickly as possible, an example <code>docker-compose.yml</code> is provided. No other configuration or dependencies are required.
- [Graphs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/getting-started/graphs): Graphs are displayed on the dashboard and on the details page of any data structure (with a few exceptions). This page explains how to read graphs and customize their data points.
- [Installing and Starting Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/getting-started/install): You can install Management Center, using Docker, a package manager, or the binary distribution.
- [Management Center 5.6.0 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/getting-started/overview): Management Center is a tool for managing and monitoring Hazelcast Platform clusters.
- [Tables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/getting-started/tables): Tables are displayed within the dashboard and on the details page of most data structures. This page explains how to read tables and customize their settings, including the columns shown.
- [Top Bar and Side Bar | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/getting-started/user-interface): To help you find your way around Management Center, this page explains the Top Bar and the Side Bar items of the user interface.
- [Client Filtering API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/integrate/client-filtering)
- [Cluster Connections API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/integrate/cluster-connections)
- [Cluster Metrics API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/integrate/cluster-metrics)
- [Clustered REST | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/integrate/clustered-rest): The clustered REST API can be enabled to allow you to monitor clustered statistics of distributed objects through HTTP endpoints.
- [Integrations | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/integrate/integrations): Management Center provides integrations with Prometheus and JMX and provides a fully featured Clustered REST API for all the Clusters that it is connected to.
- [Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/integrate/jmx): Management Center provides a clustered Java Management Extensions (JMX) monitoring service that you can use with any JMX monitoring application. JMX monitoring allows you to monitor clustered metrics of distributed Hazelcast objects from a JMX interface.
- [Clustered JMX Objects and Attributes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/integrate/jmx-api): Explore all available objects and attributes that are available with the clustered JMX interface.
- [Prometheus Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/integrate/prometheus-monitoring): You can export cluster metrics to a scrape endpoint in Management Center that Prometheus can consume. By collecting cluster metrics in Prometheus you can monitor Hazelcast along with your other applications in the same monitoring tool.
- [WAN Replication API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/integrate/wan-replication)
- [Upgrading Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/migration-guides)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/monitor-streaming/dashboard): The *Streaming* dashboard gives you an overview of a connected cluster, which has Jet enabled.
- [Jobs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/monitor-streaming/jobs): The *Jobs* menu item provides a general overview of the jobs in a Hazelcast cluster that has Jet enabled.
- [Snapshots | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/monitor-streaming/snapshots)
- [SQL Tasks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/monitor-streaming/sql-tasks)
- [5.6.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/release-notes/5-6-0)
- [Hazelcast Management Center 5.6.x release notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/release-notes/releases)
- [Executing Console Commands | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/tools/console): The console feature allows you to execute client operations using the built-in Hazelcast Command-Line Client (CLC).
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/tools/overview)
- [Scripting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/tools/scripting)
- [Executing SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/tools/sql-browser): You can use Management Center to execute SQL queries on a Hazelcast cluster.
- [Troubleshooting Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/troubleshoot/hazelcast-clusters): Management Center writes log entries for each connection failure and allows you to trigger garbage collection and take thread dumps.
- [Troubleshooting Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/troubleshoot/management-center)
- [What’s new in Management Center 5.6 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.6/whats-new): Here are the highlights of what’s new and improved in Hazelcast Management Center 5.6.
- [Administration | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/administration): You can use the Administration menu item to manage Hazelcast clusters.
- [Changing the Cluster State | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/changing-cluster-state): Cluster states determine what cluster operations are available. By changing the state of a cluster, you can grant or restrict cluster operations such as migrations as well as change the behavior of those operations.
- [Managing Client Connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/client-filtering): When you use failover clients, you can disconnect them from one cluster and connect them to another, using client filtering in Management Center.
- [Clients | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/clients): You can use the Clients menu item to monitor all the clients that are connected to your Hazelcast cluster.
- [Viewing a Cluster License | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/cluster-license): You can use the Cluster License tab of the Administration menu item to see details about your cluster's license.
- [Cluster State | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/cluster-state): You can use the Cluster State tab of the Administration menu item to see your cluster's name, state, and to shut down the whole cluster.
- [Deploying a Client Filter List with the REST API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/create-filter-lists-rest): You can define filter lists to allow or disallow client connections to clusters, using the REST API in Management Center.
- [Deploying a Client Filter List from the UI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/create-filter-lists-ui): You can define filter lists to allow or disallow client connections to clusters, using the Management Center UI.
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/dashboard): The cluster dashboard provides an overview of the general state and health of a cluster.
- [Healthcheck | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/healthcheck): You can run Healthcheck to analyze member configurations and metrics in a cluster.
- [Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/members): Monitor each member in a cluster and perform management operations on any member such as running garbage collection (GC), taking a thread dump, and shutting it down.
- [User Code Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/namespaces): You can use the <strong>Namespaces</strong> menu item to monitor all the user code namespaces that are connected to your Hazelcast cluster.
- [Persistence | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/persistence): You can use the Persistence tab of the Administration menu item to manage Hazelcast clusters that have persistence enabled.
- [Shutting Down Members and Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/shutting-down-cluster): Maintaining a cluster often requires shutting down and restarting members to make changes take effect. You can shut down a whole Hazelcast cluster or individual members in Management Center with one button.
- [Triggering a Force-Start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/triggering-force-start): You can trigger a force-start to force a cluster with persistence enabled to restart and delete its persistence store when one or more members are missing after a cluster-wide restart.
- [Triggering Hot Backups | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/triggering-hot-backup): You can trigger a hot backup to save a snapshot of the persistence store. Hot backups are useful when you wish to bring up a new cluster with the same data or parts of the data. The new cluster can then be used to share load with the original cluster, perform testing, or reproduce an issue, using production data.
- [Triggering a Partial-Start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/triggering-partial-start): You can trigger a partial-start to allow a cluster with persistence enabled to restart even if some members are missing after a cluster-wide restart.
- [Triggering a Rolling Upgrade | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/triggering-rolling-upgrade): A rolling upgrade allows you to upgrade all running cluster members to a new version of Hazelcast without interrupting the operation of the cluster.
- [Updating Cluster Configuration at Runtime | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/update-config): You can add YAML or XML configuration blocks to your running cluster, without needing to restart it.
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/clusters/wan-replication): You can use the WAN Replication menu item to check the status of WAN replication, synchronize map and cache data structures across clusters, and add dynamic configuration for WAN replication.
- [Atomic Longs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/cp-subsystem/atomic-long)
- [Atomic References | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/cp-subsystem/atomic-ref)
- [Countdown Latches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/cp-subsystem/countdown-latch)
- [CPMaps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/cp-subsystem/cpmap)
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/cp-subsystem/dashboard): You can use the CP Subsystem menu section to manage and monitor the CP subsystem in a cluster.
- [Fenced Locks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/cp-subsystem/fenced-lock)
- [Semaphores | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/cp-subsystem/semaphore)
- [Caches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/data-structures/cache)
- [Executors | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/data-structures/executor)
- [Flake ID Generators | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/data-structures/flake-id-gen)
- [Lists | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/data-structures/list)
- [Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/data-structures/map)
- [MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/data-structures/multimap)
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/data-structures/overview): You can monitor data structures in your cluster using the *Storage*, *Compute*, and *Messaging* menus in Management Center.
- [PN Counters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/data-structures/pn-counter)
- [Queues | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/data-structures/queue)
- [Reliable Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/data-structures/reliable-topic)
- [Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/data-structures/replicated-map)
- [Sets | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/data-structures/set)
- [Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/data-structures/topic)
- [Vector Collections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/data-structures/vector-collection): Learn how to use and monitor vector collections within Management Center.
- [Active Directory | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/active-directory): You can use your existing Active Directory server for authentication and authorization in Management Center.
- [Cluster Connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/cluster-connections): You can connect Management Center to multiple clusters and remove connections when you no longer need them.
- [Configuring Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/configuring): You can use various options to configure the Management Center instance as well as the client that Management Center uses to connect to and interact with Hazelcast clusters.
- [Connecting to a Cluster with the hz-mc conf Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/connecting-to-clusters-mc-conf): You can preconfigure the client connection to a cluster before you start Management Center, using the `hz-mc conf` tool.
- [Connecting to a Cluster from the UI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/connecting-to-clusters-ui): You can configure the Hazelcast client for Management Center, using the UI.
- [Dev Mode | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/dev-mode): Dev mode is a development security provider that allows you to evaluate Management Center without needing credentials for logging in or using the REST API.
- [H2 upgrade | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/h2-upgrade): Management Center uses H2 database to store metadata, including connected clusters, security provider config, and client filtering configs. As H2 version 1.x is no longer maintained, some security scanners report vulnerabilities for this version. Although not affected by these vulnerabilities, Management Center has been updated to use H2 2.x, which also includes a number of fixes and improvements. However, as metadata from the H2 1.x is not binary compatible with version 2.x , data migration is required.
- [Historical Metrics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/historical-metrics): Management Center persists metrics so that you can view historical data for each cluster. You can customize how long data is persisted by changing the time-to-live (TTL).
- [JAAS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/jaas): You can use your own `javax.security.auth.spi.LoginModule` implementation for authentication and authorization in Management Center.
- [LDAP | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/ldap): You can use your existing LDAP server for authentication/authorization on the Management Center.
- [Enterprise Licenses | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/license-management): To use some features in Management Center, you need an Enterprise license.
- [Local Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/local-security-provider): You can use the local security provider to control authentication and authorization in Management Center. With this security provider, user accounts are stored in Management Center's database.
- [Logging | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/logging): You can customize the content of logs as well as enable audit logging.
- [Management Center Configuration Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/mc-conf): The Management Center Configuration Tool (hz-mc conf) is a command line tool that allows you to automate processes that require configuring Management Center, without using the UI.
- [OpenID Connect | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/openid): You can use OpenID Connect single sign-on with Management Center.
- [Usage Analytics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/phone-homes): Hazelcast collects analytics data to learn about the usage of Hazelcast Management Center.
- [Production Checklist | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/production-checklist): Before going into production, you should have a high availability setup and a secure deployment of Management Center.
- [SAML | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/saml): You can use SAML single sign-on with Management Center.
- [Securing Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/security): To secure Management Center, you can encrypt communications using TLS/SSL, secure user sessions, set up user login authentication, and enable audit logging.
- [Security Providers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/security-providers): You can use security providers to authenticate users in Management Center and allow them to log into user accounts.
- [Serve Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/serve-mc-over-https): You can use a self-signed certificate to allow Management Center to communicate over HTTPS with HTTP clients.
- [Serving Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/serving-https): Serving Management Center over HTTPS secures communication between Management Center and HTTP clients such as web browsers that are connected to it.
- [Securing User Sessions | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/sessions): To secure users' sessions, you can configure session timeouts and multiple user login attempts.
- [Switching to a New Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/switching-security-provider)
- [System Properties and Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/system-properties): You can use system properties and environment variables to configure many aspects of Management Center, from JMX to the home directory and feature flags. These properties give you the power to tweak settings at startup without having to configure anything in the UI.
- [TLS/SSL | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/tls-security): To secure any communications from/to Management Center, you can configure it to communicate over TLS/SSL.
- [Updating an Enterprise License for Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/updating-mc-license-ui): You can use the UI to update an Enterprise license for Management Center.
- [User Management | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/user-management): Users in Management Center have roles that determine what permissions they have. For example, an admin user has access to all features, whereas a metrics-only user can only view metrics and can't see the data. To create and manage users, it depends on which security provider you are using.
- [Variable Replacers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/deploy-manage/variable-replacers): Variable replacers are Java classes that replace custom strings in configuration. You can use variable replacers in command line arguments or the `hz-mc conf` tool. A common usecase for variable replacers is to mask sensitive information such as usernames and passwords.
- [Get Started with Management Center Using Docker Compose | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/getting-started/get-started): In this tutorial, you'll start up an instance of Management Center that automatically connects to a Hazelcast cluster, using a Docker container. To get up and running as quickly as possible, an example <code>docker-compose.yml</code> is provided. No other configuration or dependencies are required.
- [Graphs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/getting-started/graphs): Graphs are displayed on the dashboard and on the details page of any data structure (with a few exceptions). This page explains how to read graphs and customize their data points.
- [Installing and Starting Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/getting-started/install): You can install Management Center, using Docker, a package manager, or the binary distribution.
- [Management Center 5.5.2 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/getting-started/overview): Management Center is a tool for managing and monitoring Hazelcast Platform clusters.
- [Tables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/getting-started/tables): Tables are displayed within the dashboard and on the details page of most data structures. This page explains how to read tables and customize their settings, including the columns shown.
- [Top Bar and Side Bar | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/getting-started/user-interface): To help you find your way around Management Center, this page explains the Top Bar and the Side Bar items of the user interface.
- [Client Filtering API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/integrate/client-filtering)
- [Cluster Connections API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/integrate/cluster-connections)
- [Cluster Metrics API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/integrate/cluster-metrics)
- [Clustered REST | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/integrate/clustered-rest): The clustered REST API can be enabled to allow you to monitor clustered statistics of distributed objects through HTTP endpoints.
- [Integrations | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/integrate/integrations): Management Center provides integrations with Prometheus and JMX and provides a fully featured Clustered REST API for all the Clusters that it is connected to.
- [Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/integrate/jmx): Management Center provides a clustered Java Management Extensions (JMX) monitoring service that you can use with any JMX monitoring application. JMX monitoring allows you to monitor clustered metrics of distributed Hazelcast objects from a JMX interface.
- [Clustered JMX Objects and Attributes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/integrate/jmx-api): Explore all available objects and attributes that are available with the clustered JMX interface.
- [Prometheus Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/integrate/prometheus-monitoring): You can export cluster metrics to a scrape endpoint in Management Center that Prometheus can consume. By collecting cluster metrics in Prometheus you can monitor Hazelcast along with your other applications in the same monitoring tool.
- [WAN Replication API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/integrate/wan-replication)
- [Upgrading to Management Center 5.2.x | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/migration-guides)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/monitor-streaming/dashboard): The *Streaming* dashboard gives you an overview of a connected cluster, which has Jet enabled.
- [Jobs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/monitor-streaming/jobs): The *Jobs* menu item provides a general overview of the jobs in a Hazelcast cluster that has Jet enabled.
- [Snapshots | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/monitor-streaming/snapshots)
- [SQL Tasks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/monitor-streaming/sql-tasks)
- [5.5.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/release-notes/5-5-0)
- [5.5.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/release-notes/5-5-1): These release notes list any new features, enhancements, and fixes that were made between version 5.5.0 and 5.5.1 of Hazelcast Management Center (MC).
- [5.5.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/release-notes/5-5-2): These release notes list any new features, enhancements, and fixes that were made between version 5.5.1 and 5.5.2 of Hazelcast Management Center (MC).
- [Hazelcast Management Center 5.5.x release notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/release-notes/releases)
- [Executing Console Commands | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/tools/console): The console feature allows you to execute client operations using the built-in Hazelcast Command-Line Client (CLC).
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/tools/overview)
- [Scripting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/tools/scripting)
- [Executing SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/tools/sql-browser): You can use Management Center to execute SQL queries on a Hazelcast cluster.
- [Troubleshooting Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/troubleshoot/hazelcast-clusters): Management Center writes log entries for each connection failure and allows you to trigger garbage collection and take thread dumps.
- [Troubleshooting Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/troubleshoot/management-center)
- [What’s new in Management Center 5.5 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.5/whats-new): Here are the highlights of what’s new and improved in Hazelcast Management Center 5.5.
- [Administration | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/clusters/administration): You can use the Administration menu item to manage Hazelcast clusters.
- [Changing the Cluster State | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/clusters/changing-cluster-state): Cluster states determine what cluster operations are available. By changing the state of a cluster, you can grant or restrict cluster operations such as migrations as well as change the behavior of those operations.
- [Managing Client Connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/clusters/client-filtering): When you use failover clients, you can disconnect them from one cluster and connect them to another, using client filtering in Management Center.
- [Clients | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/clusters/clients): You can use the Clients menu item to monitor all the clients that are connected to your Hazelcast cluster.
- [Viewing a Cluster License | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/clusters/cluster-license): You can use the Cluster License tab of the Administration menu item to see details about your cluster's license.
- [Cluster State | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/clusters/cluster-state): You can use the Cluster State tab of the Administration menu item to see your cluster's name, state, and to shut down the whole cluster.
- [Deploying a Client Filter List with the REST API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/clusters/create-filter-lists-rest): You can define filter lists to allow or disallow client connections to clusters, using the REST API in Management Center.
- [Deploying a Client Filter List from the UI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/clusters/create-filter-lists-ui): You can define filter lists to allow or disallow client connections to clusters, using the Management Center UI.
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/clusters/dashboard): The cluster dashboard provides an overview of the general state and health of a cluster.
- [Healthcheck | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/clusters/healthcheck): You can run Healthcheck to analyze member configurations and metrics in a cluster.
- [Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/clusters/members): Monitor each member in a cluster and perform management operations on any member such as running garbage collection (GC), taking a thread dump, and shutting it down.
- [Persistence | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/clusters/persistence): You can use the Persistence tab of the Administration menu item to manage Hazelcast clusters that have persistence enabled.
- [Shutting Down Members and Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/clusters/shutting-down-cluster): Maintaining a cluster often requires shutting down and restarting members to make changes take effect. You can shut down a whole Hazelcast cluster or individual members in Management Center with one button.
- [Triggering a Force-Start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/clusters/triggering-force-start): You can trigger a force-start to force a cluster with persistence enabled to restart and delete its persistence store when one or more members are missing after a cluster-wide restart.
- [Triggering Hot Backups | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/clusters/triggering-hot-backup): You can trigger a hot backup to save a snapshot of the persistence store. Hot backups are useful when you wish to bring up a new cluster with the same data or parts of the data. The new cluster can then be used to share load with the original cluster, perform testing, or reproduce an issue, using production data.
- [Triggering a Partial-Start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/clusters/triggering-partial-start): You can trigger a partial-start to allow a cluster with persistence enabled to restart even if some members are missing after a cluster-wide restart.
- [Triggering a Rolling Upgrade | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/clusters/triggering-rolling-upgrade): A rolling upgrade allows you to upgrade all running cluster members to a new version of Hazelcast without interrupting the operation of the cluster.
- [Updating Cluster Configuration at Runtime | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/clusters/update-config): You can add YAML or XML configuration blocks to your running cluster, without needing to restart it.
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/clusters/wan-replication): You can use the WAN Replication menu item to check the status of WAN replication, synchronize map and cache data structures across clusters, and add dynamic configuration for WAN replication.
- [Atomic Longs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/cp-subsystem/atomic-long)
- [Atomic References | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/cp-subsystem/atomic-ref)
- [Countdown Latches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/cp-subsystem/countdown-latch)
- [CPMaps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/cp-subsystem/cpmap)
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/cp-subsystem/dashboard): You can use the CP Subsystem menu section to manage and monitor the CP subsystem in a cluster.
- [Fenced Locks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/cp-subsystem/fenced-lock)
- [Semaphores | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/cp-subsystem/semaphore)
- [Caches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/data-structures/cache)
- [Executors | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/data-structures/executor)
- [Flake ID Generators | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/data-structures/flake-id-gen)
- [Lists | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/data-structures/list)
- [Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/data-structures/map)
- [MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/data-structures/multimap)
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/data-structures/overview): You can monitor data structures in your cluster using the *Storage*, *Compute*, and *Messaging* menus in Management Center.
- [PN Counters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/data-structures/pn-counter)
- [Queues | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/data-structures/queue)
- [Reliable Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/data-structures/reliable-topic)
- [Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/data-structures/replicated-map)
- [Sets | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/data-structures/set)
- [Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/data-structures/topic)
- [Active Directory | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/active-directory): You can use your existing Active Directory server for authentication and authorization in Management Center.
- [Cluster Connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/cluster-connections): You can connect Management Center to multiple clusters and remove connections when you no longer need them.
- [Configuring Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/configuring): You can use various options to configure the Management Center instance as well as the client that Management Center uses to connect to and interact with Hazelcast clusters.
- [Connecting to a Cluster with the hz-mc conf Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/connecting-to-clusters-mc-conf): You can preconfigure the client connection to a cluster before you start Management Center, using the `hz-mc conf` tool.
- [Connecting to a Cluster from the UI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/connecting-to-clusters-ui): You can configure the Hazelcast client for Management Center, using the UI.
- [Dev Mode | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/dev-mode): Dev mode is a development security provider that allows you to evaluate Management Center without needing credentials for logging in or using the REST API.
- [H2 upgrade | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/h2-upgrade): Management Center uses H2 database to store metadata, including connected clusters, security provider config, and client filtering configs. As H2 version 1.x is no longer maintained, some security scanners report vulnerabilities for this version. Although not affected by these vulnerabilities, Management Center has been updated to use H2 2.x, which also includes a number of fixes and improvements. However, as metadata from the H2 1.x is not binary compatible with version 2.x , data migration is required.
- [Historical Metrics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/historical-metrics): Management Center persists metrics so that you can view historical data for each cluster. You can customize how long data is persisted by changing the time-to-live (TTL).
- [JAAS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/jaas): You can use your own `javax.security.auth.spi.LoginModule` implementation for authentication and authorization in Management Center.
- [LDAP | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/ldap): You can use your existing LDAP server for authentication/authorization on the Management Center.
- [Enterprise Licenses | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/license-management): To use some features in Management Center, you need an Enterprise license.
- [Local Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/local-security-provider): You can use the local security provider to control authentication and authorization in Management Center. With this security provider, user accounts are stored in Management Center's database.
- [Logging | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/logging): You can customize the content of logs as well as enable audit logging.
- [Management Center Configuration Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/mc-conf): The Management Center Configuration Tool (hz-mc conf) is a command line tool that allows you to automate processes that require configuring Management Center, without using the UI.
- [OpenID Connect | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/openid): You can use OpenID Connect single sign-on with Management Center.
- [Usage Analytics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/phone-homes): Hazelcast collects analytics data to learn about the usage of Hazelcast Management Center.
- [Production Checklist | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/production-checklist): Before going into production, you should have a high availability setup and a secure deployment of Management Center.
- [SAML | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/saml): You can use SAML single sign-on with Management Center.
- [Securing Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/security): To secure Management Center, you can encrypt communications using TLS/SSL, secure user sessions, set up user login authentication, and enable audit logging.
- [Security Providers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/security-providers): You can use security providers to authenticate users in Management Center and allow them to log into user accounts.
- [Serve Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/serve-mc-over-https): You can use a self-signed certificate to allow Management Center to communicate over HTTPS with HTTP clients.
- [Serving Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/serving-https): Serving Management Center over HTTPS secures communication between Management Center and HTTP clients such as web browsers that are connected to it.
- [Securing User Sessions | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/sessions): To secure users' sessions, you can configure session timeouts and multiple user login attempts.
- [Switching to a New Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/switching-security-provider)
- [System Properties and Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/system-properties): You can use system properties and environment variables to configure many aspects of Management Center, from JMX to the home directory and feature flags. These properties give you the power to tweak settings at startup without having to configure anything in the UI.
- [TLS/SSL | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/tls-security): To secure any communications from/to Management Center, you can configure it to communicate over TLS/SSL.
- [Updating an Enterprise License for Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/updating-mc-license-ui): You can use the UI to update an Enterprise license for Management Center.
- [User Management | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/user-management): Users in Management Center have roles that determine what permissions they have. For example, an admin user has access to all features, whereas a metrics-only user can only view metrics and can't see the data. To create and manage users, it depends on which security provider you are using.
- [Variable Replacers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/deploy-manage/variable-replacers): Variable replacers are Java classes that replace custom strings in configuration. You can use variable replacers in command line arguments or the `hz-mc conf` tool. A common usecase for variable replacers is to mask sensitive information such as usernames and passwords.
- [Get Started with Management Center Using Docker Compose | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/getting-started/get-started): In this tutorial, you'll start up an instance of Management Center that automatically connects to a Hazelcast cluster, using a Docker container. To get up and running as quickly as possible, an example <code>docker-compose.yml</code> is provided. No other configuration or dependencies are required.
- [Graphs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/getting-started/graphs): Graphs are displayed on the dashboard and on the details page of any data structure (with a few exceptions). This page explains how to read graphs and customize their data points.
- [Installing and Starting Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/getting-started/install): You can install Management Center, using Docker, a package manager, or the binary distribution.
- [Management Center 5.4.1 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/getting-started/overview): Management Center is a tool for managing and monitoring Hazelcast Platform clusters.
- [Tables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/getting-started/tables): Tables are displayed within the dashboard and on the details page of most data structures. This page explains how to read tables and customize their settings, including the columns shown.
- [Top Bar and Side Bar | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/getting-started/user-interface): To help you find your way around Management Center, this page explains the Top Bar and the Side Bar items of the user interface.
- [Client Filtering API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/integrate/client-filtering)
- [Cluster Connections API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/integrate/cluster-connections)
- [Cluster Metrics API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/integrate/cluster-metrics)
- [Clustered REST | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/integrate/clustered-rest): The clustered REST API can be enabled to allow you to monitor clustered statistics of distributed objects through HTTP endpoints.
- [Integrations | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/integrate/integrations): Management Center provides integrations with Prometheus and JMX and provides a fully featured Clustered REST API for all the Clusters that it is connected to.
- [Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/integrate/jmx): Management Center provides a clustered Java Management Extensions (JMX) monitoring service that you can use with any JMX monitoring application. JMX monitoring allows you to monitor clustered metrics of distributed Hazelcast objects from a JMX interface.
- [Clustered JMX Objects and Attributes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/integrate/jmx-api): Explore all available objects and attributes that are available with the clustered JMX interface.
- [Prometheus Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/integrate/prometheus-monitoring): You can export cluster metrics to a scrape endpoint in Management Center that Prometheus can consume. By collecting cluster metrics in Prometheus you can monitor Hazelcast along with your other applications in the same monitoring tool.
- [WAN Replication API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/integrate/wan-replication)
- [Upgrading to Management Center 5.2.x | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/migration-guides)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/monitor-streaming/dashboard): The *Streaming* dashboard gives you an overview of a connected cluster, which has Jet enabled.
- [Jobs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/monitor-streaming/jobs): The *Jobs* menu item provides a general overview of the jobs in a Hazelcast cluster that has Jet enabled.
- [Snapshots | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/monitor-streaming/snapshots)
- [SQL Tasks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/monitor-streaming/sql-tasks)
- [5.4.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/release-notes/5-4-0)
- [5.4.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/release-notes/5-4-1): These release notes list fixes that were made between version 5.4.0 and 5.4.1 of Hazelcast Management Center (MC).
- [Hazelcast Management Center 5.4.x release notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/release-notes/releases)
- [Executing Console Commands | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/tools/console): The console feature allows you to execute client operations using the built-in Hazelcast Command-Line Client (CLC).
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/tools/overview)
- [Scripting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/tools/scripting)
- [Executing SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/tools/sql-browser): You can use Management Center to execute SQL queries on a Hazelcast cluster.
- [Troubleshooting Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/troubleshoot/hazelcast-clusters): Management Center writes log entries for each connection failure and allows you to trigger garbage collection and take thread dumps.
- [Troubleshooting Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/troubleshoot/management-center)
- [What’s New in Management Center 5.4 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.4/whats-new): Here are the highlights of what’s new and improved in Hazelcast Management Center 5.4.
- [Administration | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/clusters/administration): You can use the Administration menu item to manage Hazelcast clusters.
- [Changing the Cluster State | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/clusters/changing-cluster-state): Cluster states determine what cluster operations are available. By changing the state of a cluster, you can grant or restrict cluster operations such as migrations as well as change the behavior of those operations.
- [Managing Client Connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/clusters/client-filtering): When you use failover clients, you can disconnect them from one cluster and connect them to another, using client filtering in Management Center.
- [Clients | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/clusters/clients): You can use the Clients menu item to monitor all the clients that are connected to your Hazelcast cluster.
- [Viewing a Cluster License | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/clusters/cluster-license): You can use the Cluster License tab of the Administration menu item to see details about your cluster's license.
- [Cluster State | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/clusters/cluster-state): You can use the Cluster State tab of the Administration menu item to see your cluster's name, state, and to shut down the whole cluster.
- [Deploying a Client Filter List with the REST API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/clusters/create-filter-lists-rest): You can define filter lists to allow or disallow client connections to clusters, using the REST API in Management Center.
- [Deploying a Client Filter List from the UI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/clusters/create-filter-lists-ui): You can define filter lists to allow or disallow client connections to clusters, using the Management Center UI.
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/clusters/dashboard): The cluster dashboard provides an overview of the general state and health of a cluster.
- [Running a Config Healthcheck | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/clusters/healthcheck): You can generate a healthcheck report to analyze all member configurations in a cluster.
- [Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/clusters/members): Monitor each member in a cluster and perform management operations on any member such as running garbage collection (GC), taking a thread dump, and shutting it down.
- [Persistence | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/clusters/persistence): You can use the Persistence tab of the Administration menu item to manage Hazelcast clusters that have persistence enabled.
- [Shutting Down Members and Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/clusters/shutting-down-cluster): Maintaining a cluster often requires shutting down and restarting members to make changes take effect. You can shut down a whole Hazelcast cluster or individual members in Management Center with one button.
- [Triggering a Force-Start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/clusters/triggering-force-start): You can trigger a force-start to force a cluster with persistence enabled to restart and delete its persistence store when one or more members are missing after a cluster-wide restart.
- [Triggering Hot Backups | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/clusters/triggering-hot-backup): You can trigger a hot backup to save a snapshot of the persistence store. Hot backups are useful when you wish to bring up a new cluster with the same data or parts of the data. The new cluster can then be used to share load with the original cluster, perform testing, or reproduce an issue, using production data.
- [Triggering a Partial-Start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/clusters/triggering-partial-start): You can trigger a partial-start to allow a cluster with persistence enabled to restart even if some members are missing after a cluster-wide restart.
- [Triggering a Rolling Upgrade | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/clusters/triggering-rolling-upgrade): A rolling upgrade allows you to upgrade all running cluster members to a new version of Hazelcast without interrupting the operation of the cluster.
- [Updating Cluster Configuration at Runtime | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/clusters/update-config): You can add YAML or XML configuration blocks to your running cluster, without needing to restart it.
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/clusters/wan-replication): You can use the WAN Replication menu item to check the status of WAN replication, synchronize map and cache data structures across clusters, and add dynamic configuration for WAN replication.
- [Atomic Longs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/cp-subsystem/atomic-long)
- [Atomic References | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/cp-subsystem/atomic-ref)
- [Countdown Latches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/cp-subsystem/countdown-latch)
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/cp-subsystem/dashboard): You can use the CP Subsystem menu section to manage and monitor the CP subsystem in a cluster.
- [Fenced Locks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/cp-subsystem/fenced-lock)
- [Semaphores | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/cp-subsystem/semaphore)
- [Caches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/data-structures/cache)
- [Executors | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/data-structures/executor)
- [Flake ID Generators | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/data-structures/flake-id-gen)
- [Lists | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/data-structures/list)
- [Locks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/data-structures/lock)
- [Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/data-structures/map)
- [MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/data-structures/multimap)
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/data-structures/overview): You can monitor data structures in your cluster using the *Storage*, *Compute*, and *Messaging* menus in Management Center.
- [PN Counters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/data-structures/pn-counter)
- [Queues | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/data-structures/queue)
- [Reliable Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/data-structures/reliable-topic)
- [Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/data-structures/replicated-map)
- [Sets | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/data-structures/set)
- [Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/data-structures/topic)
- [Active Directory | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/active-directory): You can use your existing Active Directory server for authentication and authorization in Management Center.
- [Cluster Connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/cluster-connections): You can connect Management Center to multiple clusters and remove connections when you no longer need them.
- [Configuring Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/configuring): You can use various options to configure the Management Center instance as well as the client that Management Center uses to connect to and interact with Hazelcast clusters.
- [Connecting to a Cluster with the hz-mc conf Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/connecting-to-clusters-mc-conf): You can preconfigure the client connection to a cluster before you start Management Center, using the `hz-mc conf` tool.
- [Connecting to a Cluster from the UI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/connecting-to-clusters-ui): You can configure the Hazelcast client for Management Center, using the UI.
- [Dev Mode | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/dev-mode): Dev mode is a development security provider that allows you to evaluate Management Center without needing credentials for logging in or using the REST API.
- [Historical Metrics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/historical-metrics): Management Center persists metrics so that you can view historical data for each cluster. You can customize how long data is persisted by changing the time-to-live (TTL).
- [JAAS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/jaas): You can use your own `javax.security.auth.spi.LoginModule` implementation for authentication and authorization in Management Center.
- [LDAP | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/ldap): You can use your existing LDAP server for authentication/authorization on the Management Center.
- [Enterprise Licenses | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/license-management): To use some features in Management Center, you need an Enterprise license.
- [Local Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/local-security-provider): You can use the local security provider to control authentication and authorization in Management Center. With this security provider, user accounts are stored in Management Center's database.
- [Logging | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/logging): You can customize the content of logs as well as enable audit logging.
- [Management Center Configuration Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/mc-conf): The Management Center Configuration Tool (hz-mc conf) is a command line tool that allows you to automate processes that require configuring Management Center, without using the UI.
- [OpenID Connect | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/openid): You can use OpenID Connect single sign-on with Management Center.
- [Usage Analytics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/phone-homes): Hazelcast collects analytics data to learn about the usage of Hazelcast Management Center.
- [Production Checklist | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/production-checklist): Before going into production, you should have a high availability setup and a secure deployment of Management Center.
- [SAML | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/saml): You can use SAML single sign-on with Management Center.
- [Securing Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/security): To secure Management Center, you can encrypt communications using TLS/SSL, secure user sessions, set up user login authentication, and enable audit logging.
- [Security Providers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/security-providers): You can use security providers to authenticate users in Management Center and allow them to log into user accounts.
- [Serve Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/serve-mc-over-https): You can use a self-signed certificate to allow Management Center to communicate over HTTPS with HTTP clients.
- [Serving Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/serving-https): Serving Management Center over HTTPS secures communication between Management Center and HTTP clients such as web browsers that are connected to it.
- [Securing User Sessions | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/sessions): To secure users' sessions, you can configure session timeouts and multiple user login attempts.
- [Switching to a New Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/switching-security-provider)
- [System Properties and Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/system-properties): You can use system properties and environment variables to configure many aspects of Management Center, from JMX to the home directory and feature flags. These properties give you the power to tweak settings at startup without having to configure anything in the UI.
- [TLS/SSL | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/tls-security): To secure any communications from/to Management Center, you can configure it to communicate over TLS/SSL.
- [Updating an Enterprise License for Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/updating-mc-license-ui): You can use the UI to update an Enterprise license for Management Center.
- [User Management | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/user-management): Users in Management Center have roles that determine what permissions they have. For example, an admin user has access to all features, whereas a metrics-only user can only view metrics and can't see the data. To create and manage users, it depends on which security provider you are using.
- [Variable Replacers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/deploy-manage/variable-replacers): Variable replacers are Java classes that replace custom strings in configuration. You can use variable replacers in command line arguments or the `hz-mc conf` tool. A common usecase for variable replacers is to mask sensitive information such as usernames and passwords.
- [Get Started with Management Center Using Docker Compose | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/getting-started/get-started): In this tutorial, you'll start up an instance of Management Center that automatically connects to a Hazelcast cluster, using a Docker container. To get up and running as quickly as possible, an example <code>docker-compose.yml</code> is provided. No other configuration or dependencies are required.
- [Graphs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/getting-started/graphs): Graphs are displayed on the dashboard and on the details page of any data structure (with a few exceptions). This page explains how to read graphs and customize their data points.
- [Installing and Starting Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/getting-started/install): You can install Management Center, using Docker, a package manager, or the binary distribution.
- [Management Center 5.3.4 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/getting-started/overview): Management Center is a tool for managing and monitoring Hazelcast Platform clusters.
- [Tables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/getting-started/tables): Tables are displayed within the dashboard and on the details page of most data structures. This page explains how to read tables and customize their settings, including the columns shown.
- [User Interface Menu and Toolbar | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/getting-started/user-interface): To help you find your way around Management Center, this page explains the toolbar and left menu items of the user interface.
- [Client Filtering API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/integrate/client-filtering)
- [Cluster Connections API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/integrate/cluster-connections)
- [Cluster Metrics API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/integrate/cluster-metrics)
- [Clustered REST | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/integrate/clustered-rest): The clustered REST API can be enabled to allow you to monitor clustered statistics of distributed objects through HTTP endpoints.
- [Integrations | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/integrate/integrations): Management Center provides integrations with Prometheus and JMX and provides a fully featured Clustered REST API for all the Clusters that it is connected to.
- [Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/integrate/jmx): Management Center provides a clustered Java Management Extensions (JMX) monitoring service that you can use with any JMX monitoring application. JMX monitoring allows you to monitor clustered metrics of distributed Hazelcast objects from a JMX interface.
- [Clustered JMX Objects and Attributes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/integrate/jmx-api): Explore all available objects and attributes that are available with the clustered JMX interface.
- [Prometheus Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/integrate/prometheus-monitoring): You can export cluster metrics to a scrape endpoint in Management Center that Prometheus can consume. By collecting cluster metrics in Prometheus you can monitor Hazelcast along with your other applications in the same monitoring tool.
- [WAN Replication API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/integrate/wan-replication)
- [Upgrading to Management Center 5.2.x | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/migration-guides)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/monitor-streaming/dashboard): The *Streaming* dashboard gives you an overview of a connected cluster, which has Jet enabled.
- [Jobs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/monitor-streaming/jobs): The *Jobs* menu item provides a general overview of the jobs in a Hazelcast cluster that has Jet enabled.
- [Snapshots | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/monitor-streaming/snapshots)
- [5.3.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/release-notes/5-3-0): These release notes list any new features, enhancements, and fixes that were made between version 5.2 and 5.3.0 of Hazelcast Management Center (MC).
- [5.3.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/release-notes/5-3-1): These release notes list any new features, enhancements, and fixes that were made between version 5.3.0 and 5.3.1 of Hazelcast Management Center (MC).
- [5.3.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/release-notes/5-3-2): These release notes list any new features, enhancements, and fixes that were made between version 5.3.1 and 5.3.2 of Hazelcast Management Center (MC).
- [5.3.3 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/release-notes/5-3-3): These release notes list any new features, enhancements, and fixes that were made between version 5.3.2 and 5.3.3 of Hazelcast Management Center (MC).
- [5.3.4 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/release-notes/5-3-4): These release notes list any new features, enhancements, and fixes that were made between version 5.3.3 and 5.3.4 of Hazelcast Management Center (MC).
- [Hazelcast Management Center 5.3.x Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/release-notes/releases)
- [Executing Console Commands | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/tools/console): The console feature enables you to execute commands on the cluster. For example, you can perform `put` and `get` operations on a map.
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/tools/overview)
- [Scripting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/tools/scripting)
- [Executing SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/tools/sql-browser): You can use Management Center to execute SQL queries on a Hazelcast cluster.
- [Troubleshooting Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/troubleshoot/hazelcast-clusters): Management Center writes log entries for each connection failure and allows you to trigger garbage collection and take thread dumps.
- [Troubleshooting Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.3/troubleshoot/management-center)
- [Administration | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/clusters/administration): You can use the Administration menu item to manage Hazelcast clusters.
- [Changing the Cluster State | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/clusters/changing-cluster-state): Cluster states determine what cluster operations are available. By changing the state of a cluster, you can grant or restrict cluster operations such as migrations as well as change the behavior of those operations.
- [Filtering Client Connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/clusters/client-filtering): Create filter lists that define which clients are allowed to connect to the cluster.
- [Clients | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/clusters/clients): You can use the Clients menu item to monitor all the clients that are connected to your Hazelcast cluster.
- [Viewing a Cluster License | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/clusters/cluster-license): You can use the Cluster License tab of the Administration menu item to see details about your cluster's license.
- [Cluster State | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/clusters/cluster-state): You can use the Cluster State tab of the Administration menu item to see your cluster's name, state, and to shut down the whole cluster.
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/clusters/dashboard): The cluster dashboard provides an overview of the general state and health of a cluster.
- [Running a Config Healthcheck | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/clusters/healthcheck): You can generate a healthcheck report to analyze all member configurations in a cluster.
- [Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/clusters/members): Monitor each member in a cluster and perform management operations on any member such as running garbage collection (GC), taking a thread dump, and shutting it down.
- [Persistence | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/clusters/persistence): You can use the Persistence tab of the Administration menu item to manage Hazelcast clusters that have persistence enabled.
- [Shutting Down Members and Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/clusters/shutting-down-cluster): Maintaining a cluster often requires shutting down and restarting members to make changes take effect. You can shut down a whole Hazelcast cluster or individual members in Management Center with one button.
- [Triggering a Force-Start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/clusters/triggering-force-start): You can trigger a force-start to force a cluster with persistence enabled to restart and delete its persistence store when one or more members are missing after a cluster-wide restart.
- [Triggering Hot Backups | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/clusters/triggering-hot-backup): You can trigger a hot backup to save a snapshot of the persistence store. Hot backups are useful when you wish to bring up a new cluster with the same data or parts of the data. The new cluster can then be used to share load with the original cluster, perform testing, or reproduce an issue, using production data.
- [Triggering a Partial-Start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/clusters/triggering-partial-start): You can trigger a partial-start to allow a cluster with persistence enabled to restart even if some members are missing after a cluster-wide restart.
- [Triggering a Rolling Upgrade | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/clusters/triggering-rolling-upgrade): A rolling upgrade allows you to upgrade all running cluster members to a new version of Hazelcast without interrupting the operation of the cluster.
- [Updating Cluster Configuration at Runtime | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/clusters/update-config): You can add YAML or XML configuration blocks to your running cluster, without needing to restart it.
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/clusters/wan-replication): You can use the WAN Replication menu item to check the status of WAN replication, synchronize map and cache data structures across clusters, and add dynamic configuration for WAN replication.
- [Atomic Longs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/cp-subsystem/atomic-long)
- [Atomic References | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/cp-subsystem/atomic-ref)
- [Countdown Latches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/cp-subsystem/countdown-latch)
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/cp-subsystem/dashboard): You can use the CP Subsystem menu section to manage and monitor the CP subsystem in a cluster.
- [Fenced Locks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/cp-subsystem/fenced-lock)
- [Semaphores | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/cp-subsystem/semaphore)
- [Caches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/data-structures/cache)
- [Executors | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/data-structures/executor)
- [Flake ID Generators | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/data-structures/flake-id-gen)
- [Locks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/data-structures/lock)
- [Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/data-structures/map)
- [MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/data-structures/multimap)
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/data-structures/overview): You can monitor data structures in your cluster using the *Storage*, *Compute*, and *Messaging* menus in Management Center.
- [PN Counters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/data-structures/pn-counter)
- [Queues | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/data-structures/queue)
- [Reliable Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/data-structures/reliable-topic)
- [Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/data-structures/replicated-map)
- [Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/data-structures/topic)
- [Active Directory | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/active-directory): You can use your existing Active Directory server for authentication and authorization in Management Center.
- [Cluster Connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/cluster-connections): You can connect Management Center to multiple clusters and remove connections when you no longer need them.
- [Configuring Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/configuring): You can use various options to configure the Management Center instance as well as the client that Management Center uses to connect to and interact with Hazelcast clusters.
- [Connecting to a Cluster with the hz-mc conf Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/connecting-to-clusters-mc-conf): You can preconfigure the client connection to a cluster before you start Management Center, using the `hz-mc conf` tool.
- [Connecting to a Cluster from the UI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/connecting-to-clusters-ui): You can configure the Hazelcast client for Management Center, using the UI.
- [Dev Mode | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/dev-mode): Dev mode is a development security provider that allows you to evaluate Management Center without needing credentials for logging in or using the REST API.
- [Historical Metrics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/historical-metrics): Management Center persists metrics so that you can view historical data for each cluster. You can customize how long data is persisted by changing the time-to-live (TTL).
- [JAAS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/jaas): You can use your own `javax.security.auth.spi.LoginModule` implementation for authentication and authorization in Management Center.
- [LDAP | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/ldap): You can use your existing LDAP server for authentication/authorization on the Management Center.
- [Enterprise Licenses | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/license-management): To use some features in Management Center, you need an Enterprise license.
- [Local Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/local-security-provider): You can use the local security provider to control authentication and authorization in Management Center. With this security provider, user accounts are stored in Management Center's database.
- [Logging | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/logging): You can customize the content of logs as well as enable audit logging.
- [Management Center Configuration Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/mc-conf): The Management Center Configuration Tool (hz-mc conf) is a command line tool that allows you to automate processes that require configuring Management Center, without using the UI.
- [OpenID Connect | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/openid): You can use OpenID Connect single sign-on with Management Center.
- [Usage Analytics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/phone-homes): Hazelcast collects analytics data to learn about the usage of Hazelcast Management Center.
- [Production Checklist | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/production-checklist): Before going into production, you should have a high availability setup and a secure deployment of Management Center.
- [SAML | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/saml): You can use SAML single sign-on with Management Center.
- [Securing Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/security): To secure Management Center, you can encrypt communications using TLS/SSL, secure user sessions, set up user login authentication, and enable audit logging.
- [Security Providers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/security-providers): You can use security providers to authenticate users in Management Center and allow them to log into user accounts.
- [Serve Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/serve-mc-over-https): You can use a self-signed certificate to allow Management Center to communicate over HTTPS with HTTP clients.
- [Serving Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/serving-https): Serving Management Center over HTTPS secures communication between Management Center and HTTP clients such as web browsers that are connected to it.
- [Securing User Sessions | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/sessions): To secure users' sessions, you can configure session timeouts and multiple user login attempts.
- [Switching to a New Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/switching-security-provider)
- [System Properties and Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/system-properties): You can use system properties and environment variables to configure many aspects of Management Center, from JMX to the home directory and feature flags. These properties give you the power to tweak settings at startup without having to configure anything in the UI.
- [TLS/SSL | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/tls-security): To secure any communications from/to Management Center, you can configure it to communicate over TLS/SSL.
- [Updating an Enterprise License for Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/updating-mc-license-ui): You can use the UI to update an Enterprise license for Management Center.
- [User Management | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/user-management): Users in Management Center have roles that determine what permissions they have. For example, an admin user has access to all features, whereas a metrics-only user can only view metrics and can't see the data. To create and manage users, it depends on which security provider you are using.
- [Variable Replacers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/deploy-manage/variable-replacers): Variable replacers are Java classes that replace custom strings in configuration. You can use variable replacers in command line arguments or the `hz-mc conf` tool. A common usecase for variable replacers is to mask sensitive information such as usernames and passwords.
- [Get Started with Management Center Using Docker Compose | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/getting-started/get-started): In this tutorial, you'll start up an instance of Management Center that automatically connects to a Hazelcast cluster, using a Docker container. To get up and running as quickly as possible, an example <code>docker-compose.yml</code> is provided. No other configuration or dependencies are required.
- [Graphs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/getting-started/graphs): Graphs are displayed on the dashboard and on the details page of any data structure (with a few exceptions). This page explains how to read graphs and customize their data points.
- [Installing and Starting Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/getting-started/install): You can install Management Center, using Docker, a package manager, or the binary distribution.
- [Management Center 5.2.1 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/getting-started/overview): Management Center is a tool for managing and monitoring Hazelcast Platform clusters.
- [Tables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/getting-started/tables): Tables are displayed within the dashboard and on the details page of most data structures. This page explains how to read tables and customize their settings, including the columns shown.
- [User Interface Menu and Toolbar | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/getting-started/user-interface): To help you find your way around Management Center, this page explains the toolbar and left menu items of the user interface.
- [Client Filtering API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/integrate/client-filtering)
- [Cluster Connections API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/integrate/cluster-connections)
- [Cluster Metrics API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/integrate/cluster-metrics)
- [Clustered REST | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/integrate/clustered-rest): The clustered REST API can be enabled to allow you to monitor clustered statistics of distributed objects through HTTP endpoints.
- [Integrations | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/integrate/integrations): Management Center provides integrations with Prometheus and JMX and provides a fully featured Clustered REST API for all the Clusters that it is connected to.
- [Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/integrate/jmx): Management Center provides a clustered Java Management Extensions (JMX) monitoring service that you can use with any JMX monitoring application. JMX monitoring allows you to monitor clustered metrics of distributed Hazelcast objects from a JMX interface.
- [Clustered JMX Objects and Attributes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/integrate/jmx-api): Explore all available objects and attributes that are available with the clustered JMX interface.
- [Prometheus Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/integrate/prometheus-monitoring): You can export cluster metrics to a scrape endpoint in Management Center that Prometheus can consume. By collecting cluster metrics in Prometheus you can monitor Hazelcast along with your other applications in the same monitoring tool.
- [Upgrading to Management Center 5.2.x | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/migration-guides)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/monitor-streaming/dashboard): The *Streaming* dashboard gives you an overview of a connected cluster, which has Jet enabled.
- [Jobs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/monitor-streaming/jobs): The *Jobs* menu item provides a general overview of the jobs in a Hazelcast cluster that has Jet enabled.
- [Snapshots | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/monitor-streaming/snapshots)
- [5.2.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/release-notes/5-2-0): These release notes list any new features, enhancements, and fixes that were made between version 5.1 and 5.2.0 of Hazelcast Management Center (MC).
- [5.2.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/release-notes/5-2-1): These release notes list any new features, enhancements, and fixes that were made between version 5.2.0 and 5.2.1 of Hazelcast Management Center (MC).
- [Hazelcast Management Center Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/release-notes/releases)
- [Executing Console Commands | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/tools/console): The console feature enables you to execute commands on the cluster. For example, you can perform `put` and `get` operations on a map.
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/tools/overview)
- [Scripting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/tools/scripting)
- [Executing SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/tools/sql-browser): You can use Management Center to execute SQL queries on a Hazelcast cluster.
- [Troubleshooting Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/troubleshoot/hazelcast-clusters): Management Center writes log entries for each connection failure and allows you to trigger garbage collection and take thread dumps.
- [Troubleshooting Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.2/troubleshoot/management-center)
- [Administration | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/clusters/administration): You can use the Administration menu item to manage Hazelcast clusters.
- [Changing the Cluster State | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/clusters/changing-cluster-state): Cluster states determine what cluster operations are available. By changing the state of a cluster, you can grant or restrict cluster operations such as migrations as well as change the behavior of those operations.
- [Filtering Client Connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/clusters/client-filtering): Create filter lists that define which clients are allowed to connect to the cluster.
- [Clients | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/clusters/clients): You can use the Clients menu item to monitor all the clients that are connected to your Hazelcast cluster.
- [Viewing a Cluster License | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/clusters/cluster-license): You can use the Cluster License tab of the Administration menu item to see details about your cluster's license.
- [Cluster State | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/clusters/cluster-state): You can use the Cluster State tab of the Administration menu item to see your cluster's name, state, and to shut down the whole cluster.
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/clusters/dashboard): The cluster dashboard provides an overview of the general state and health of a cluster.
- [Running a Config Healthcheck | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/clusters/healthcheck): You can generate a healthcheck report to analyze all member configurations in a cluster.
- [Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/clusters/members): Monitor each member in a cluster and perform management operations on any member such as running garbage collection (GC), taking a thread dump, and shutting it down.
- [Persistence | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/clusters/persistence): You can use the Persistence tab of the Administration menu item to manage Hazelcast clusters that have persistence enabled.
- [Shutting Down Members and Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/clusters/shutting-down-cluster): Maintaining a cluster often requires shutting down and restarting members to make changes take effect. You can shut down a whole Hazelcast cluster or individual members in Management Center with one button.
- [Triggering a Force-Start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/clusters/triggering-force-start): You can trigger a force-start to force a cluster with persistence enabled to restart and delete its persistence store when one or more members are missing after a cluster-wide restart.
- [Triggering Hot Backups | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/clusters/triggering-hot-backup): You can trigger a hot backup to save a snapshot of the persistence store. Hot backups are useful when you wish to bring up a new cluster with the same data or parts of the data. The new cluster can then be used to share load with the original cluster, perform testing, or reproduce an issue, using production data.
- [Triggering a Partial-Start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/clusters/triggering-partial-start): You can trigger a partial-start to allow a cluster with persistence enabled to restart even if some members are missing after a cluster-wide restart.
- [Triggering a Rolling Upgrade | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/clusters/triggering-rolling-upgrade): A rolling upgrade allows you to upgrade all running cluster members to a new version of Hazelcast without interrupting the operation of the cluster.
- [Updating Cluster Configuration at Runtime | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/clusters/update-config): You can add YAML or XML configuration blocks to your running cluster, without needing to restart it.
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/clusters/wan-replication): You can use the WAN Replication menu item to check the status of WAN replication, synchronize map and cache data structures across clusters, and add dynamic configuration for WAN replication.
- [Atomic Longs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/cp-subsystem/atomic-long)
- [Atomic References | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/cp-subsystem/atomic-ref)
- [Countdown Latches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/cp-subsystem/countdown-latch)
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/cp-subsystem/dashboard): You can use the CP Subsystem menu section to manage and monitor the CP subsystem in a cluster.
- [Fenced Locks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/cp-subsystem/fenced-lock)
- [Semaphores | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/cp-subsystem/semaphore)
- [Caches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/data-structures/cache)
- [Executors | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/data-structures/executor)
- [Flake ID Generators | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/data-structures/flake-id-gen)
- [Locks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/data-structures/lock)
- [Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/data-structures/map)
- [MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/data-structures/multimap)
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/data-structures/overview): You can monitor data structures in your cluster using the *Storage*, *Compute*, and *Messaging* menus in Management Center.
- [PN Counters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/data-structures/pn-counter)
- [Queues | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/data-structures/queue)
- [Reliable Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/data-structures/reliable-topic)
- [Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/data-structures/replicated-map)
- [Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/data-structures/topic)
- [Active Directory | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/active-directory): You can use your existing Active Directory server for authentication and authorization in Management Center.
- [Cluster Connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/cluster-connections): You can connect Management Center to multiple clusters and remove connections when you no longer need them.
- [Configuring Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/configuring): You can use various options to configure the Management Center instance as well as the client that Management Center uses to connect to and interact with Hazelcast clusters.
- [Connecting to a Cluster with the hz-mc conf Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/connecting-to-clusters-mc-conf): You can preconfigure the client connection to a cluster before you start Management Center, using the `hz-mc conf` tool.
- [Connecting to a Cluster from the UI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/connecting-to-clusters-ui): You can configure the Hazelcast client for Management Center, using the UI.
- [Dev Mode | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/dev-mode): Dev mode is a development security provider that allows you to evaluate Management Center without needing credentials for logging in or using the REST API.
- [Historical Metrics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/historical-metrics): Management Center persists metrics so that you can view historical data for each cluster. You can customize how long data is persisted by changing the time-to-live (TTL).
- [JAAS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/jaas): You can use your own `javax.security.auth.spi.LoginModule` implementation for authentication and authorization in Management Center.
- [LDAP | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/ldap): You can use your existing LDAP server for authentication/authorization on the Management Center.
- [Enterprise Licenses | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/license-management): To use some features in Management Center, you need an Enterprise license.
- [Local Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/local-security-provider): You can use the local security provider to control authentication and authorization in Management Center. With this security provider, user accounts are stored in Management Center's database.
- [Logging | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/logging): You can customize the content of logs as well as enable audit logging.
- [Management Center Configuration Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/mc-conf): The Management Center Configuration Tool (hz-mc conf) is a command line tool that allows you to automate processes that require configuring Management Center, without using the UI.
- [OpenID Connect | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/openid): You can use OpenID Connect single sign-on with Management Center.
- [Usage Analytics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/phone-homes): Hazelcast collects analytics data to learn about the usage of Hazelcast Management Center.
- [Production Checklist | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/production-checklist): Before going into production, you should have a high availability setup and a secure deployment of Management Center.
- [SAML | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/saml): You can use SAML single sign-on with Management Center.
- [Securing Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/security): To secure Management Center, you can encrypt communications using TLS/SSL, secure user sessions, set up user login authentication, and enable audit logging.
- [Security Providers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/security-providers): You can use security providers to authenticate users in Management Center and allow them to log into user accounts.
- [Serve Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/serve-mc-over-https): You can use a self-signed certificate to allow Management Center to communicate over HTTPS with HTTP clients.
- [Serving Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/serving-https): Serving Management Center over HTTPS secures communication between Management Center and HTTP clients such as web browsers that are connected to it.
- [Securing User Sessions | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/sessions): To secure users' sessions, you can configure session timeouts and multiple user login attempts.
- [Switching to a New Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/switching-security-provider)
- [System Properties and Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/system-properties): You can use system properties and environment variables to configure many aspects of Management Center, from JMX to the home directory and feature flags. These properties give you the power to tweak settings at startup without having to configure anything in the UI.
- [TLS/SSL | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/tls-security): To secure any communications from/to Management Center, you can configure it to communicate over TLS/SSL.
- [Updating an Enterprise License for Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/updating-mc-license-ui): You can use the UI to update an Enterprise license for Management Center.
- [User Management | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/user-management): Users in Management Center have roles that determine what permissions they have. For example, an admin user has access to all features, whereas a metrics-only user can only view metrics and can't see the data. To create and manage users, it depends on which security provider you are using.
- [Variable Replacers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/deploy-manage/variable-replacers): Variable replacers are Java classes that replace custom strings in configuration. You can use variable replacers in command line arguments or the `hz-mc conf` tool. A common usecase for variable replacers is to mask sensitive information such as usernames and passwords.
- [Get Started with Management Center Using Docker Compose | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/getting-started/get-started): In this tutorial, you'll start up an instance of Management Center that automatically connects to a Hazelcast cluster, using a Docker container. To get up and running as quickly as possible, an example <code>docker-compose.yml</code> is provided. No other configuration or dependencies are required.
- [Graphs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/getting-started/graphs): Graphs are displayed on the dashboard and on the details page of any data structure (with a few exceptions). This page explains how to read graphs and customize their data points.
- [Installing and Starting Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/getting-started/install): You can install Management Center, using Docker, a package manager, or the binary distribution.
- [Management Center 5.1.4 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/getting-started/overview): Management Center is a tool for managing and monitoring Hazelcast clusters.
- [User Interface Menu and Toolbar | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/getting-started/user-interface): To help you find your way around Management Center, this page explains the toolbar and left menu items of the user interface.
- [Client Filtering API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/integrate/client-filtering)
- [Cluster Connections API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/integrate/cluster-connections)
- [Cluster Metrics API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/integrate/cluster-metrics)
- [Clustered REST | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/integrate/clustered-rest): The clustered REST API can be enabled to allow you to monitor clustered statistics of distributed objects through HTTP endpoints.
- [Integrations | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/integrate/integrations): Management Center provides integrations with Prometheus and JMX and provides a fully featured Clustered REST API for all the Clusters that it is connected to.
- [Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/integrate/jmx): Management Center provides a clustered Java Management Extensions (JMX) monitoring service that you can use with any JMX monitoring application. JMX monitoring allows you to monitor clustered metrics of distributed Hazelcast objects from a JMX interface.
- [Clustered JMX Objects and Attributes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/integrate/jmx-api): Explore all available objects and attributes that are available with the clustered JMX interface.
- [Prometheus Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/integrate/prometheus-monitoring): You can export cluster metrics to a scrape endpoint in Management Center that Prometheus can consume. By collecting cluster metrics in Prometheus you can monitor Hazelcast along with your other applications in the same monitoring tool.
- [Upgrading to Management Center 5.1.x | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/migration-guides)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/monitor-streaming/dashboard): The *Streaming* dashboard gives you an overview of a connected cluster, which has Jet enabled.
- [Jobs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/monitor-streaming/jobs): The *Jobs* menu item provides a general overview of the jobs in a Hazelcast cluster that has Jet enabled.
- [Snapshots | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/monitor-streaming/snapshots)
- [5.1.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/release-notes/5-1-1): These release notes list any new features, enhancements, and fixes that were made between version 5.0 and 5.1.1 of Hazelcast Management Center (MC).
- [5.1.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/release-notes/5-1-2): These release notes list any new features, enhancements, and fixes that were made between version 5.1.1 and 5.1.2 of Hazelcast Management Center (MC).
- [5.1.3 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/release-notes/5-1-3): These release notes list any new features, enhancements, and fixes that were made between version 5.1.2 and 5.1.3 of Hazelcast Management Center (MC).
- [5.1.4 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/release-notes/5-1-4): These release notes list any new features, enhancements, and fixes that were made between version 5.1.3 and 5.1.4 of Hazelcast Management Center (MC).
- [Hazelcast Management Center Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/release-notes/releases)
- [Executing Console Commands | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/tools/console): The console feature enables you to execute commands on the cluster. For example, you can perform `put` and `get` operations on a map.
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/tools/overview)
- [Scripting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/tools/scripting)
- [Executing SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/tools/sql-browser): You can use Management Center to execute SQL queries on a Hazelcast cluster.
- [Troubleshooting Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/troubleshoot/hazelcast-clusters): Management Center writes log entries for each connection failure and allows you to trigger garbage collection and take thread dumps.
- [Troubleshooting Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.1/troubleshoot/management-center)
- [Administration | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/administration): You can use the Administration menu item to manage Hazelcast clusters.
- [Changing the Cluster State | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/changing-cluster-state): Cluster states determine what cluster operations are available. By changing the state of a cluster, you can grant or restrict cluster operations such as migrations as well as change the behavior of those operations.
- [Filtering Client Connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/client-filtering): Create filter lists that define which clients are allowed to connect to the cluster.
- [Clients | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/clients): You can use the Clients menu item to monitor all the clients that are connected to your Hazelcast cluster.
- [Viewing a Cluster License | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/cluster-license): You can use the Cluster License tab of the Administration menu item to see details about your cluster's license.
- [Cluster State | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/cluster-state): You can use the Cluster State tab of the Administration menu item to see your cluster's name, state, and to shut down the whole cluster.
- [CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/cp-subsystem): You can use the CP Subsystem tab of the Administration menu item to manage and monitor the CP subsystem in a cluster.
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/dashboard): The cluster dashboard provides an overview of the general state and health of a cluster.
- [Running a Config Healthcheck | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/healthcheck): You can generate a healthcheck report to analyze all member configurations in a cluster.
- [Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/members): Monitor each member in a cluster and perform management operations on any member such as running garbage collection (GC), taking a thread dump, and shutting it down.
- [Persistence | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/persistence): You can use the Persistence tab of the Administration menu item to manage Hazelcast clusters that have persistence enabled.
- [Promoting Members to CP Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/promoting-cp-member): You can promote any existing member that is not part of the CP subsystem to a CP member.
- [Removing CP Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/removing-cp-member): You can manually remove a disconnected CP member from the CP subsystem, using Management Center.
- [Restarting CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/restarting-cp-subsystem): If the majority of CP members crash, you can restart the CP subsystem to delete all CP data and trigger a new round of the discovery process.
- [Shutting Down Members and Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/shutting-down-cluster): Maintaining a cluster often requires shutting down and restarting members to make changes take effect. You can shut down a whole Hazelcast cluster or individual members in Management Center with one button.
- [Triggering a Force-Start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/triggering-force-start): You can trigger a force-start to force a cluster with persistence enabled to restart and delete its persistence store when one or more members are missing after a cluster-wide restart.
- [Triggering Hot Backups | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/triggering-hot-backup): You can trigger a hot backup to save a snapshot of the persistence store. Hot backups are useful when you wish to bring up a new cluster with the same data or parts of the data. The new cluster can then be used to share load with the original cluster, perform testing, or reproduce an issue, using production data.
- [Triggering a Partial-Start | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/triggering-partial-start): You can trigger a partial-start to allow a cluster with persistence enabled to restart even if some members are missing after a cluster-wide restart.
- [Triggering a Rolling Upgrade | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/triggering-rolling-upgrade): A rolling upgrade allows you to upgrade all running cluster members to a new version of Hazelcast without interrupting the operation of the cluster.
- [WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/clusters/wan-replication): You can use the WAN Replication menu item to check the status of WAN replication, synchronize map and cache data structures across clusters, and add dynamic configuration for WAN replication.
- [Caches | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/data-structures/cache)
- [Executors | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/data-structures/executor)
- [Flake ID Generators | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/data-structures/flake-id-gen)
- [Locks | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/data-structures/lock)
- [Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/data-structures/map)
- [MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/data-structures/multimap)
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/data-structures/overview): You can monitor data structures in your cluster using the *Storage*, *Compute*, and *Messaging* menus in Management Center.
- [PN Counters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/data-structures/pn-counter)
- [Queues | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/data-structures/queue)
- [Reliable Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/data-structures/reliable-topic)
- [Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/data-structures/replicated-map)
- [Topics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/data-structures/topic)
- [Active Directory | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/active-directory): You can use your existing Active Directory server for authentication and authorization in Management Center.
- [Cluster Connections | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/cluster-connections): You can connect Management Center to multiple clusters and remove connections when you no longer need them.
- [Configuring Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/configuring): You can use various options to configure the Management Center instance as well as the client that Management Center uses to connect to and interact with Hazelcast clusters.
- [Connecting to a Cluster with the mc-conf Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/connecting-to-clusters-mc-conf): You can preconfigure the client connection to a cluster before you start Management Center, using the `mc-conf` tool.
- [Connecting to a Cluster from the UI | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/connecting-to-clusters-ui): You can configure the Hazelcast client for Management Center, using the UI.
- [Dev Mode | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/dev-mode): Dev mode is a development security provider that allows you to evaluate Management Center without needing credentials for logging in or using the REST API.
- [Historical Metrics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/historical-metrics): Management Center persists metrics so that you can view historical data for each cluster. You can customize how long data is persisted by changing the time-to-live (TTL).
- [JAAS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/jaas): You can use your own `javax.security.auth.spi.LoginModule` implementation for authentication and authorization in Management Center.
- [LDAP | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/ldap): You can use your existing LDAP server for authentication/authorization on the Management Center.
- [Enterprise Licenses | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/license-management): To use some features in Management Center, you need an Enterprise license.
- [Local Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/local-security-provider): You can use the local security provider to control authentication and authorization in Management Center. With this security provider, user accounts are stored in Management Center's database.
- [Logging | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/logging): You can customize the content of logs as well as enable audit logging.
- [Management Center Configuration Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/mc-conf): The Management Center Configuration Tool (mc-conf) is a command line tool that allows you to automate processes that require configuring Management Center, without using the UI.
- [OpenID Connect | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/openid): You can use OpenID Connect single sign-on with Management Center.
- [Phone Home | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/phone-homes): Hazelcast uses phone home data to learn about the usage of Hazelcast Management Center.
- [Production Checklist | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/production-checklist): Before going into production, you should have a high availability setup and a secure deployment of Management Center.
- [SAML | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/saml): You can use SAML single sign-on with Management Center.
- [Securing Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/security): To secure Management Center, you can encrypt communications using TLS/SSL, secure user sessions, set up user login authentication, and enable audit logging.
- [Security Providers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/security-providers): You can use security providers to authenticate users in Management Center and allow them to log into user accounts.
- [Serve Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/serve-mc-over-https): You can use a self-signed certificate to allow Management Center to communicate over HTTPS with HTTP clients.
- [Serving Management Center over HTTPS | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/serving-https): Serving Management Center over HTTPS secures communication between Management Center and HTTP clients such as web browsers that are connected to it.
- [Securing User Sessions | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/sessions): To secure users' sessions, you can configure session timeouts and multiple user login attempts.
- [Switching to a New Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/switching-security-provider)
- [System Properties and Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/system-properties): You can use system properties and environment variables to configure many aspects of Management Center, from JMX to the home directory and feature flags. These properties give you the power to tweak settings at startup without having to configure anything in the UI.
- [TLS/SSL | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/tls-security): To secure any communications from/to Management Center, you can configure it to communicate over TLS/SSL.
- [Updating an Enterprise License for Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/updating-mc-license-ui): You can use the UI to update an Enterprise license for Management Center.
- [User Management | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/user-management): Users in Management Center have roles that determine what permissions they have. For example, an admin user has access to all features, whereas a metrics-only user can only view metrics and can't see the data. To create and manage users, it depends on which security provider you are using.
- [Variable Replacers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/deploy-manage/variable-replacers): Variable replacers are Java classes that replace custom strings in configuration. You can use variable replacers in command line arguments or the `mc-conf` tool. A common usecase for variable replacers is to mask sensitive information such as usernames and passwords.
- [Get Started with Management Center Using Docker Compose | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/getting-started/get-started): In this tutorial, you'll start up an instance of Management Center that automatically connects to a Hazelcast cluster, using a Docker container. To get up and running as quickly as possible, an example <code>docker-compose.yml</code> is provided. No other configuration or dependencies are required.
- [Graphs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/getting-started/graphs): Graphs are displayed on the dashboard and on the details page of any data structure (with a few exceptions). This page explains how to read graphs and customize their data points.
- [Installing and Starting Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/getting-started/install): You can install Management Center, using Docker, a package manager, or the binary distribution.
- [Management Center 5.0.4 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/getting-started/overview): Management Center is a tool for managing and monitoring Hazelcast clusters.
- [User Interface Menu and Toolbar | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/getting-started/user-interface): To help you find your way around Management Center, this page explains the toolbar and left menu items of the user interface.
- [Clustered REST | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/integrate/clustered-rest): The clustered REST API can be enabled to allow you to monitor clustered statistics of distributed objects through HTTP endpoints.
- [Integrations | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/integrate/integrations): Management Center provides integrations with Prometheus and JMX.
- [Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/integrate/jmx): Management Center provides a clustered Java Management Extensions (JMX) monitoring service that you can use with any JMX monitoring application. JMX monitoring allows you to monitor clustered metrics of distributed Hazelcast objects from a JMX interface.
- [Clustered JMX Objects and Attributes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/integrate/jmx-api): Explore all available objects and attributes that are available with the clustered JMX interface.
- [Prometheus Monitoring | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/integrate/prometheus-monitoring): You can export cluster metrics to a scrape endpoint in Management Center that Prometheus can consume. By collecting cluster metrics in Prometheus you can monitor Hazelcast along with your other applications in the same monitoring tool.
- [Upgrading from Management Center 3.x | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/migration-guides)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/monitor-streaming/dashboard): The *Streaming* dashboard gives you an overview of a connected cluster, which has Jet enabled.
- [Jobs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/monitor-streaming/jobs): The *Jobs* menu item provides a general overview of the jobs in a Hazelcast cluster that has Jet enabled.
- [Snapshots | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/monitor-streaming/snapshots)
- [5.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/release-notes/5-0): These release notes list any new features, enhancements, and fixes that were made between version 4.x and 5.0 of Hazelcast Management Center.
- [5.0.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/release-notes/5-0-1): These release notes list any new features, enhancements, and fixes that were made between version 5.0 and 5.0.1 of Hazelcast Management Center.
- [5.0.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/release-notes/5-0-2): These release notes list any new features, enhancements, and fixes that were made between version 5.0.1 and 5.0.2 of Hazelcast Management Center.
- [5.0.3 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/release-notes/5-0-3): These release notes list any new features, enhancements, and fixes that were made between version 5.0.2 and 5.0.3 of Hazelcast Management Center.
- [5.0.4 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/release-notes/5-0-4): These release notes list any new features, enhancements, and fixes that were made between version 5.0.3 and 5.0.4 of Hazelcast Management Center.
- [Executing Console Commands | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/tools/console): The console feature enables you to execute commands on the cluster. For example, you can perform `put` and `get` operations on a map.
- [Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/tools/overview)
- [Scripting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/tools/scripting)
- [Executing SQL Queries | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/tools/sql-browser): You can use Management Center to execute SQL queries on a Hazelcast cluster.
- [Troubleshooting Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/troubleshoot/hazelcast-clusters): Management Center writes log entries for each connection failure and allows you to trigger garbage collection and take thread dumps.
- [Troubleshooting Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/5.0/troubleshoot/management-center)
- [Hazelcast Management Center Reference Manual 4.2022.01 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/)
- [Automated Security Scanning | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/automated-security-scan)
- [Clustered REST | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/clustered-rest)
- [Configuration Health Check | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/config-healthcheck)
- [Configuring Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/configuring)
- [Connecting to the Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/connecting-members)
- [Getting Started | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/getting-started)
- [High Availability Setup | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/high-availability)
- [Integrating with AppDynamics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/jmx/appdynamics)
- [Configuring Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/jmx/configuring)
- [Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/jmx/jmx)
- [Clustered JMX API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/jmx/jmx-api)
- [Integrating with New Relic | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/jmx/new-relic)
- [Authentication Options | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/launching/auth-options)
- [Dev Mode | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/launching/dev-mode)
- [Launching the Management Center User Interface | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/launching/launching)
- [Managing Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/managing-clusters)
- [Managing Licenses | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/managing-licenses)
- [Managing Security Providers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/managing-security-providers)
- [Managing Users | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/managing-users)
- [Management Center Configuration Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/mc-conf)
- [Metrics Persistence | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/metric-persistence)
- [Migration Guides | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/migration-guides)
- [Cluster Administration | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/monitor-imdg/cluster-administration)
- [Executing Console Commands | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/monitor-imdg/console)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/monitor-imdg/dashboard)
- [Monitoring Clients | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/monitor-imdg/monitor-clients)
- [Monitoring Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/monitor-imdg/monitor-dds)
- [Monitoring an IMDG Cluster | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/monitor-imdg/monitor-imdg)
- [Monitoring Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/monitor-imdg/monitor-members)
- [Monitoring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/monitor-imdg/monitor-wan-replication)
- [Scripting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/monitor-imdg/scripting)
- [Widget | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/monitor-imdg/widget)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/monitor-jet/dashboard)
- [Jobs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/monitor-jet/jobs)
- [Monitoring a Jet Cluster | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/monitor-jet/monitor-jet)
- [Snapshots | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/monitor-jet/snapshots)
- [Phone Home | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/phone-home)
- [Prometheus Exporter | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/prometheus)
- [SQL Browser | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/sql-browser)
- [Supported Environments | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/supported-environments)
- [Troubleshooting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/troubleshooting)
- [User Interface Logs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/ui-logs)
- [User Interface Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2022.01/user-interface)
- [Hazelcast Management Center Reference Manual 4.2021.12 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/)
- [Automated Security Scanning | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/automated-security-scan)
- [Clustered REST | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/clustered-rest)
- [Configuration Health Check | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/config-healthcheck)
- [Configuring Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/configuring)
- [Connecting to the Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/connecting-members)
- [Getting Started | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/getting-started)
- [High Availability Setup | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/high-availability)
- [Integrating with AppDynamics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/jmx/appdynamics)
- [Configuring Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/jmx/configuring)
- [Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/jmx/jmx)
- [Clustered JMX API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/jmx/jmx-api)
- [Integrating with New Relic | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/jmx/new-relic)
- [Authentication Options | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/launching/auth-options)
- [Dev Mode | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/launching/dev-mode)
- [Launching the Management Center User Interface | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/launching/launching)
- [Managing Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/managing-clusters)
- [Managing Licenses | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/managing-licenses)
- [Managing Security Providers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/managing-security-providers)
- [Managing Users | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/managing-users)
- [Management Center Configuration Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/mc-conf)
- [Metrics Persistence | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/metric-persistence)
- [Migration Guides | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/migration-guides)
- [Cluster Administration | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/monitor-imdg/cluster-administration)
- [Executing Console Commands | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/monitor-imdg/console)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/monitor-imdg/dashboard)
- [Monitoring Clients | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/monitor-imdg/monitor-clients)
- [Monitoring Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/monitor-imdg/monitor-dds)
- [Monitoring an IMDG Cluster | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/monitor-imdg/monitor-imdg)
- [Monitoring Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/monitor-imdg/monitor-members)
- [Monitoring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/monitor-imdg/monitor-wan-replication)
- [Scripting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/monitor-imdg/scripting)
- [Widget | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/monitor-imdg/widget)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/monitor-jet/dashboard)
- [Jobs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/monitor-jet/jobs)
- [Monitoring a Jet Cluster | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/monitor-jet/monitor-jet)
- [Snapshots | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/monitor-jet/snapshots)
- [Phone Home | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/phone-home)
- [Prometheus Exporter | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/prometheus)
- [SQL Browser | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/sql-browser)
- [Supported Environments | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/supported-environments)
- [Troubleshooting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/troubleshooting)
- [User Interface Logs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/ui-logs)
- [User Interface Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12/user-interface)
- [Hazelcast Management Center Reference Manual 4.2021.12-1 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/)
- [Automated Security Scanning | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/automated-security-scan)
- [Clustered REST | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/clustered-rest)
- [Configuration Health Check | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/config-healthcheck)
- [Configuring Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/configuring)
- [Connecting to the Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/connecting-members)
- [Getting Started | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/getting-started)
- [High Availability Setup | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/high-availability)
- [Integrating with AppDynamics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/jmx/appdynamics)
- [Configuring Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/jmx/configuring)
- [Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/jmx/jmx)
- [Clustered JMX API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/jmx/jmx-api)
- [Integrating with New Relic | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/jmx/new-relic)
- [Authentication Options | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/launching/auth-options)
- [Dev Mode | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/launching/dev-mode)
- [Launching the Management Center User Interface | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/launching/launching)
- [Managing Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/managing-clusters)
- [Managing Licenses | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/managing-licenses)
- [Managing Security Providers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/managing-security-providers)
- [Managing Users | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/managing-users)
- [Management Center Configuration Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/mc-conf)
- [Metrics Persistence | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/metric-persistence)
- [Migration Guides | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/migration-guides)
- [Cluster Administration | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/monitor-imdg/cluster-administration)
- [Executing Console Commands | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/monitor-imdg/console)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/monitor-imdg/dashboard)
- [Monitoring Clients | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/monitor-imdg/monitor-clients)
- [Monitoring Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/monitor-imdg/monitor-dds)
- [Monitoring an IMDG Cluster | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/monitor-imdg/monitor-imdg)
- [Monitoring Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/monitor-imdg/monitor-members)
- [Monitoring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/monitor-imdg/monitor-wan-replication)
- [Scripting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/monitor-imdg/scripting)
- [Widget | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/monitor-imdg/widget)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/monitor-jet/dashboard)
- [Jobs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/monitor-jet/jobs)
- [Monitoring a Jet Cluster | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/monitor-jet/monitor-jet)
- [Snapshots | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/monitor-jet/snapshots)
- [Phone Home | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/phone-home)
- [Prometheus Exporter | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/prometheus)
- [SQL Browser | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/sql-browser)
- [Supported Environments | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/supported-environments)
- [Troubleshooting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/troubleshooting)
- [User Interface Logs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/ui-logs)
- [User Interface Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.12-1/user-interface)
- [Hazelcast Management Center Reference Manual 4.2021.06 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/)
- [Automated Security Scanning | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/automated-security-scan)
- [Clustered REST | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/clustered-rest)
- [Configuration Health Check | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/config-healthcheck)
- [Configuring Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/configuring)
- [Connecting to the Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/connecting-members)
- [Getting Started | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/getting-started)
- [High Availability Setup | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/high-availability)
- [Integrating with AppDynamics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/jmx/appdynamics)
- [Configuring Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/jmx/configuring)
- [Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/jmx/jmx)
- [Clustered JMX API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/jmx/jmx-api)
- [Integrating with New Relic | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/jmx/new-relic)
- [Authentication Options | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/launching/auth-options)
- [Dev Mode | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/launching/dev-mode)
- [Launching the Management Center User Interface | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/launching/launching)
- [Managing Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/managing-clusters)
- [Managing Licenses | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/managing-licenses)
- [Managing Security Providers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/managing-security-providers)
- [Managing Users | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/managing-users)
- [Management Center Configuration Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/mc-conf)
- [Metrics Persistence | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/metric-persistence)
- [Migration Guides | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/migration-guides)
- [Cluster Administration | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/monitor-imdg/cluster-administration)
- [Executing Console Commands | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/monitor-imdg/console)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/monitor-imdg/dashboard)
- [Monitoring Clients | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/monitor-imdg/monitor-clients)
- [Monitoring Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/monitor-imdg/monitor-dds)
- [Monitoring an IMDG Cluster | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/monitor-imdg/monitor-imdg)
- [Monitoring Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/monitor-imdg/monitor-members)
- [Monitoring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/monitor-imdg/monitor-wan-replication)
- [Scripting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/monitor-imdg/scripting)
- [Widget | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/monitor-imdg/widget)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/monitor-jet/dashboard)
- [Jobs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/monitor-jet/jobs)
- [Monitoring a Jet Cluster | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/monitor-jet/monitor-jet)
- [Snapshots | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/monitor-jet/snapshots)
- [Phone Home | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/phone-home)
- [Prometheus Exporter | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/prometheus)
- [SQL Browser | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/sql-browser)
- [Supported Environments | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/supported-environments)
- [Troubleshooting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/troubleshooting)
- [User Interface Logs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/ui-logs)
- [User Interface Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.06/user-interface)
- [Hazelcast Management Center Reference Manual 4.2021.04 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/)
- [Automated Security Scanning | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/automated-security-scan)
- [Clustered REST | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/clustered-rest)
- [Configuration Health Check | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/config-healthcheck)
- [Configuring Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/configuring)
- [Connecting to the Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/connecting-members)
- [Getting Started | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/getting-started)
- [High Availability Setup | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/high-availability)
- [Integrating with AppDynamics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/jmx/appdynamics)
- [Configuring Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/jmx/configuring)
- [Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/jmx/jmx)
- [Clustered JMX API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/jmx/jmx-api)
- [Integrating with New Relic | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/jmx/new-relic)
- [Authentication Options | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/launching/auth-options)
- [Dev Mode | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/launching/dev-mode)
- [Launching the Management Center User Interface | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/launching/launching)
- [Managing Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/managing-clusters)
- [Managing Licenses | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/managing-licenses)
- [Managing Security Providers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/managing-security-providers)
- [Managing Users | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/managing-users)
- [Management Center Configuration Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/mc-conf)
- [Metrics Persistence | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/metric-persistence)
- [Migration Guides | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/migration-guides)
- [Cluster Administration | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/monitor-imdg/cluster-administration)
- [Executing Console Commands | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/monitor-imdg/console)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/monitor-imdg/dashboard)
- [Monitoring Clients | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/monitor-imdg/monitor-clients)
- [Monitoring Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/monitor-imdg/monitor-dds)
- [Monitoring an IMDG Cluster | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/monitor-imdg/monitor-imdg)
- [Monitoring Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/monitor-imdg/monitor-members)
- [Monitoring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/monitor-imdg/monitor-wan-replication)
- [Scripting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/monitor-imdg/scripting)
- [Widget | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/monitor-imdg/widget)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/monitor-jet/dashboard)
- [Jobs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/monitor-jet/jobs)
- [Monitoring a Jet Cluster | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/monitor-jet/monitor-jet)
- [Snapshots | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/monitor-jet/snapshots)
- [Phone Home | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/phone-home)
- [Prometheus Exporter | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/prometheus)
- [SQL Browser | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/sql-browser)
- [Supported Environments | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/supported-environments)
- [Troubleshooting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/troubleshooting)
- [User Interface Logs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/ui-logs)
- [User Interface Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.04/user-interface)
- [Hazelcast Management Center Reference Manual 4.2021.03 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/)
- [Automated Security Scanning | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/automated-security-scan)
- [Clustered REST | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/clustered-rest)
- [Configuring Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/configuring)
- [Connecting to the Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/connecting-members)
- [Getting Started | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/getting-started)
- [Integrating with AppDynamics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/jmx/appdynamics)
- [Configuring Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/jmx/configuring)
- [Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/jmx/jmx)
- [Clustered JMX API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/jmx/jmx-api)
- [Integrating with New Relic | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/jmx/new-relic)
- [Authentication Options | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/launching/auth-options)
- [Dev Mode | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/launching/dev-mode)
- [Launching the Management Center User Interface | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/launching/launching)
- [Managing Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/managing-clusters)
- [Managing Licenses | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/managing-licenses)
- [Managing Security Providers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/managing-security-providers)
- [Managing Users | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/managing-users)
- [Management Center Configuration Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/mc-conf)
- [Metrics Persistence | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/metric-persistence)
- [Migration Guides | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/migration-guides)
- [Cluster Administration | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/monitor-imdg/cluster-administration)
- [Executing Console Commands | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/monitor-imdg/console)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/monitor-imdg/dashboard)
- [Monitoring Clients | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/monitor-imdg/monitor-clients)
- [Monitoring Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/monitor-imdg/monitor-dds)
- [Monitoring an IMDG Cluster | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/monitor-imdg/monitor-imdg)
- [Monitoring Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/monitor-imdg/monitor-members)
- [Monitoring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/monitor-imdg/monitor-wan-replication)
- [Scripting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/monitor-imdg/scripting)
- [Widget | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/monitor-imdg/widget)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/monitor-jet/dashboard)
- [Jobs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/monitor-jet/jobs)
- [Monitoring a Jet Cluster | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/monitor-jet/monitor-jet)
- [Snapshots | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/monitor-jet/snapshots)
- [Phone Home | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/phone-home)
- [Prometheus Exporter | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/prometheus)
- [SQL Browser | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/sql-browser)
- [Supported Environments | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/supported-environments)
- [Troubleshooting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/troubleshooting)
- [User Interface Logs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/ui-logs)
- [User Interface Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.03/user-interface)
- [Hazelcast Management Center Reference Manual 4.2021.02 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/)
- [Automated Security Scanning | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/automated-security-scan)
- [Clustered REST | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/clustered-rest)
- [Configuring Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/configuring)
- [Connecting to the Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/connecting-members)
- [Getting Started | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/getting-started)
- [Integrating with AppDynamics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/jmx/appdynamics)
- [Configuring Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/jmx/configuring)
- [Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/jmx/jmx)
- [Clustered JMX API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/jmx/jmx-api)
- [Integrating with New Relic | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/jmx/new-relic)
- [Authentication Options | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/launching/auth-options)
- [Dev Mode | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/launching/dev-mode)
- [Launching the Management Center User Interface | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/launching/launching)
- [Managing Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/managing-clusters)
- [Managing Licenses | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/managing-licenses)
- [Managing Security Providers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/managing-security-providers)
- [Managing Users | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/managing-users)
- [Management Center Configuration Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/mc-conf)
- [Metrics Persistence | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/metric-persistence)
- [Migration Guides | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/migration-guides)
- [Authentication Options | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/monitor-imdg/client-filtering)
- [Cluster Administration | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/monitor-imdg/cluster-administration)
- [Executing Console Commands | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/monitor-imdg/console)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/monitor-imdg/dashboard)
- [Monitoring Clients | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/monitor-imdg/monitor-clients)
- [Monitoring Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/monitor-imdg/monitor-dds)
- [Monitoring an IMDG Cluster | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/monitor-imdg/monitor-imdg)
- [Monitoring Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/monitor-imdg/monitor-members)
- [Monitoring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/monitor-imdg/monitor-wan-replication)
- [Scripting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/monitor-imdg/scripting)
- [Widget | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/monitor-imdg/widget)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/monitor-jet/dashboard)
- [Jobs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/monitor-jet/jobs)
- [Monitoring a Jet Cluster | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/monitor-jet/monitor-jet)
- [Snapshots | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/monitor-jet/snapshots)
- [Phone Home | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/phone-home)
- [Prometheus Exporter | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/prometheus)
- [SQL Browser | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/sql-browser)
- [Supported Environments | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/supported-environments)
- [Troubleshooting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/troubleshooting)
- [User Interface Logs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/ui-logs)
- [User Interface Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2021.02/user-interface)
- [Hazelcast Management Center Reference Manual 4.2020.12 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/)
- [Automated Security Scanning | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/automated-security-scan)
- [Clustered REST | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/clustered-rest)
- [Configuring Management Center | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/configuring)
- [Connecting to the Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/connecting-members)
- [Getting Started | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/getting-started)
- [Integrating with AppDynamics | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/jmx/appdynamics)
- [Configuring Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/jmx/configuring)
- [Clustered JMX | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/jmx/jmx)
- [Clustered JMX API | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/jmx/jmx-api)
- [Integrating with New Relic | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/jmx/new-relic)
- [Authentication Options | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/launching/auth-options)
- [Dev Mode | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/launching/dev-mode)
- [Launching the Management Center User Interface | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/launching/launching)
- [Managing Clusters | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/managing-clusters)
- [Managing Licenses | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/managing-licenses)
- [Managing Security Providers | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/managing-security-providers)
- [Managing Users | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/managing-users)
- [Management Center Configuration Tool | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/mc-conf)
- [Metrics Persistence | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/metric-persistence)
- [Migration Guides | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/migration-guides)
- [Authentication Options | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/monitor-imdg/client-filtering)
- [Cluster Administration | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/monitor-imdg/cluster-administration)
- [Executing Console Commands | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/monitor-imdg/console)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/monitor-imdg/dashboard)
- [Monitoring Clients | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/monitor-imdg/monitor-clients)
- [Monitoring Data Structures | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/monitor-imdg/monitor-dds)
- [Monitoring an IMDG Cluster | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/monitor-imdg/monitor-imdg)
- [Monitoring Members | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/monitor-imdg/monitor-members)
- [Monitoring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/monitor-imdg/monitor-wan-replication)
- [Scripting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/monitor-imdg/scripting)
- [Widget | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/monitor-imdg/widget)
- [Dashboard Page | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/monitor-jet/dashboard)
- [Jobs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/monitor-jet/jobs)
- [Monitoring a Jet Cluster | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/monitor-jet/monitor-jet)
- [Snapshots | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/monitor-jet/snapshots)
- [Phone Home | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/phone-home)
- [Prometheus Exporter | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/prometheus)
- [SQL Browser | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/sql-browser)
- [Supported Environments | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/supported-environments)
- [Troubleshooting | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/troubleshooting)
- [User Interface Logs | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/ui-logs)
- [User Interface Overview | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.12/user-interface)
- [Management Center Reference Manual 4.2020.10 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.10/)
- [Management Center Reference Manual 4.2020.08 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.2020.08/)
- [Management Center Reference Manual 4.0.3 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/4.0/)
- [Management Center Reference Manual 3.12.17 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/3.12/)
- [Management Center Reference Manual 3.11.4 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/3.11/)
- [Management Center Reference Manual 3.10.4 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/3.10/)
- [Management Center Reference Manual 3.9.4 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/3.9/)
- [Management Center Reference Manual 3.8.5 | Hazelcast Documentation](https://docs.hazelcast.com/management-center/3.8/)

## Operator

- [Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/): Hazelcast Platform Operator simplifies working with Hazelcast clusters on Kubernetes and Red Hat OpenShift by eliminating the need for manual deployment and life-cycle management.
- [Advanced Network Configuration | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/advanced-networking)
- [Hazelcast Platform Operator API Docs | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/api-ref)
- [Ask AI | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/ask-ai): Use our Ask AI feature to get instant answers to technical questions.
- [Authorization Methods to Access Cloud Storage | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/authorization)
- [Persistence, Backup and Restore | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/backup-restore): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Configuring Cache | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/cache-configuration): Hazelcast offers a specification-compliant JCache implementation. The Hazelcast JCache implementation is 100% TCK (Technology Compatibility Kit) compliant and therefore passes all specification requirements. You can create and configure JCache using the <code>Cache</code> custom resource.
- [Client Authentication and Authorization | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/client-simple-auth)
- [Configure diagnostic logging | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/configure-diagnostic-logging): Hazelcast provides diagnostic logging capabilities to help with monitoring and troubleshooting.
- [Configure JAAS | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/configure-jaas): This topic explains how to configure JAAS-based authentication.
- [Configure simple authentication and authorization | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/configure-simple-security): This topic explains how to configure simple authentication and authorization for clients.
- [Connecting to Hazelcast from Outside Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/connect-outside-kubernetes): Hazelcast supports connections from both smart and unisocket clients that are outside your Kubernetes cluster. To allow these clients to connect to Hazelcast, you need to configure the `exposeExternally` field of the Hazelcast custom resource.
- [Enabling CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/cp-subsystem): CP Subsystem is a component of a Hazelcast cluster that builds a strongly consistent layer for a set of distributed data structures. As well as network partitions, the CP Subsystem withstands server and client failures.
- [Custom Configuration of Hazelcast cluster | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/custom-config): Hazelcast Platform Operator's Custom Config allows users to provide a raw Hazelcast Configuration that can be directly utilized. It is perfect for those who want to take complete control over their configuration or to use new features that are not yet present in the Operator.
- [Deploy Management Center with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/deploy-management-center): In this tutorial, you'll deploy an instance of Management Center using Hazelcast Platform Operator for Kubernetes.
- [Configuring Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/env-vars)
- [Deploy a Cluster with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/get-started): This topic explains how to deploy a Hazelcast cluster using Hazelcast Platform Operator for Kubernetes.
- [Get support | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/get-support): 'Getting support with Hazelcast Platform Operator.'
- [Configuring System Properties | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/hazelcast-parameters)
- [Running Highly Available Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/high-availability-mode): High Availability Mode guarantees that even if the Kubernetes node or whole availability zone is down, and all related Hazelcast members are terminated, you will not experience any data loss.
- [Change the default image registry | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/image-registry)
- [Configuring the Jet Engine | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/jet-engine-configuration): Data Pipelines allow you to process data stored in one location and send the result to another, such as from a data lake to an analytics database or into a payment processing system. You can also use the same source and sink so the pipeline only processes data. You can configure Hazelcast’s Jet engine using the Hazelcast Platform Operator.
- [Running Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/jet-job-configuration): Data Pipelines allow you to process data stored in one location and send the result to another, such as from a data lake to an analytics database or into a payment processing system. You can also use the same source and sink so the pipeline only processes data.
- [Saving State of Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/jet-job-snapshot): During the processing of data pipelines, the states of the computation process are saved and used by the pipelines. These states are crucial for ensuring the accuracy and integrity of the data processing operations. Jet's snapshot allows you to save and restore these processing states.
- [Configuring JVM Parameters | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/jvm-parameters): You can configure the JVM in the <code>hazelcast</code> container using the <code>jvm</code> field of the CRD spec.
- [Deploying Lite Members | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/lite-members)
- [Connecting to a Hazelcast Cluster | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/management-center-clusters): You can connect Management Center to multiple clusters.
- [External Access to Management Center | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/management-center-external-access): Expose Management Center so that you can effortlessly monitor and manage your Hazelcast cluster.
- [Management Center JVM Arguments | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/management-center-jvm-args): Configure Management Center JVM Arguments.
- [LDAP Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/management-center-ldap): This topic explains how to use your existing LDAP server for authentication/authorization in Management Center.
- [Management Center Persistence | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/management-center-persistence): Configure Management Center Persistence.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/map-configuration): Hazelcast maps are used to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures. You can create and configure maps using the <code>Map</code> resource.
- [Migrating From Helm Chart to the Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/migrating-from-helm)
- [Module Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/module-deployment): Hazelcast Platform Operator allows you to deploy your own custom and domain classes to Hazelcast Plaftorm cluster members. You can deploy your application code from external buckets, ConfigMap objects, and URLs in Kubernetes.
- [Mount Persistent Volume Claims for Hazelcast clusters | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/mount-pvc)
- [Configuring MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/multimap-configuration): Hazelcast MultiMap, also known as IMultiMap, is a specialized map where you can store multiple values under a single key. Just like any other distributed data structure implementation in Hazelcast, MultiMap is distributed and thread-safe. You can create and configure MultiMaps using the <code>MultiMap</code> custom resource.
- [Configuring the Native Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/native-memory): The Native Memory Store is a pluggable memory manager. It allows you to set up different configurations, or stores, for your application’s data structures on a single JVM. These memory stores form part of a common access layer which scales up to use a configured amount of memory on the JVM.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/phone-homes): Each instance of Hazelcast Platform Operator reports usage data to the Hazelcast phone home server when a Custom Resource is successfully deployed and every 24 hours after that. Hazelcast uses this data to learn about the usage of Hazelcast Platform Operator.
- [Configuring Queues | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/queue-configuration): Hazelcast distributed queue is an implementation of java.util.concurrent.BlockingQueue. Being distributed, Hazelcast distributed queue enables all cluster members to interact with it. Using Hazelcast distributed queue, you can add an item in one cluster member and remove it from another one. You can create and configure queue using the <code>Queue</code> custom resource.
- [Release notes | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/release-notes): These release notes list any new features, enhancements, fixes, and breaking changes implemented between version 5.14.0 and version 5.15.0 of Hazelcast Operator.
- [Remove a Cluster with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/remove-cluster): This topic explains how to remove a cluster using the Hazelcast Platform Operator for Kubernetes.
- [Remove Management Center using the Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/remove-management-center): This topic describes how to remove Management Center using the Hazelcast Platform Operator for Kubernetes.
- [Configuring Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/replicatedmap-configuration): A replicated map is a distributed key-value data structure where the data is replicated to all members in the cluster. It provides full replication of entries to all members for high-speed access. You can create and configure replicated maps using the <code>ReplicatedMap</code> custom resource.
- [Configuring Container Resources | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/resource-configuration)
- [Scaling and Upgrading a Hazelcast Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/scaling-upgrading)
- [Scheduling Hazelcast Pods | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/scheduling-configuration): You can make sure that pods for Hazelcast members are run on certain nodes, using the following scheduling principles of Kubernetes: node selector, node affinity, taints, and tolerations.
- [Configuring the Hazelcast Serialization | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/serialization-configuration): For data to be sent over a network between cluster members and/or clients, it needs to be serialized into raw bytes. Hazelcast has many serialization options to choose from, depending on what you plan on doing with your data.
- [Configuring TLS | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/tls): Hazelcast TLS is a security feature that provides encryption and authentication of data transmitted between Hazelcast nodes, preventing unauthorized access and eavesdropping.
- [Configuring Topics | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/topic-configuration): Hazelcast provides a distribution mechanism for publishing messages that are delivered to multiple subscribers. This is known as a publish/subscribe (pub/sub) messaging model. Publishing and subscription operations are cluster wide. When a member subscribes to a topic, it is registered to receive messages published by any member in the cluster, including any new members that joined after you added the listener. You can create and configure topics using the <code>Topic</code> custom resource.
- [Connect to Hazelcast from outside Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/tutorials/operator-tutorial-expose-externally): Learn how to connect to a Hazelcast cluster running in Kubernetes from outside of the Kubernetes environment.
- [Restore a cluster from cloud storage with Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/tutorials/operator-tutorial-external-backup-restore): Learn how to back up data in Hazelcast maps to cloud storage and restore a cluster from that backup data.
- [Run a data pipeline using Jet with Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/tutorials/operator-tutorial-jet): Learn how to run a data pipeline in Hazelcast using Jet.
- [Save the state of a Jet job with Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/tutorials/operator-tutorial-jet-job-snapshot): Learn how to save the state of your data pipelines and initiate a data pipeline from an existing state using the Hazelcast Platform Operator.
- [Configure TLS with Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/tutorials/operator-tutorial-tls): Learn how to secure Hazelcast cluster with TLS and Hazelcast Platform Operator.
- [Replicate data between two Hazelcast clusters with Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/tutorials/operator-tutorial-wan-replication): Learn how to keep data in sync across two Hazelcast clusters.
- [Synchronize data between two Hazelcast clusters using WAN Sync | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/tutorials/operator-tutorial-wan-sync): Learn how to synchronize data across two Hazelcast clusters using WAN Sync.
- [User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/user-code-deployment): Hazelcast allows you to deploy your own custom and domain classes to cluster members. From Hazelcast Platform Operator, you can deploy your application code from external buckets and ConfigMap objects in Kubernetes.
- [User Code Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/user-code-namespaces): User Code Namespaces provide a container for Java classpath resources, such as user code and accompanying artifacts like property files. This provides namespace isolation to ensure that access to resources in different namespaces can be managed through configuration. From Hazelcast Platform Operator, you can deploy your application code from external buckets using UserCodeNamespace CRs.
- [Configuring Vector Collections | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/vector-collection-configuration): The primary object for interacting with vector storage is a Vector Collection. A Vector Collection holds information about the vectors and associated metadata (user values).
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/wan-replication): WAN replication allows you to keep Hazelcast clusters in sync across multiple sites or cloud deployments. In Hazelcast Platform Operator, you can create a <code>WanReplication</code> resource to replicate multiple maps from multiple source clusters to a single target Hazelcast cluster. 
- [Syncronizing WAN replicated data | Hazelcast Documentation](https://docs.hazelcast.com/operator/latest-snapshot/wan-sync): WAN Syncronization allows you to overcome out-of-sync issues with the WAN replicated data. 
- [Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/): Hazelcast Platform Operator simplifies working with Hazelcast clusters on Kubernetes and Red Hat OpenShift by eliminating the need for manual deployment and life-cycle management.
- [Advanced Network Configuration | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/advanced-networking)
- [Running in air-gapped environments | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/air-gapped-env)
- [Hazelcast Platform Operator API Docs | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/api-ref)
- [Ask AI | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/ask-ai): Use our Ask AI feature to get instant answers to technical questions.
- [Authorization Methods to Access Cloud Storage | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/authorization)
- [Persistence, Backup and Restore | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/backup-restore): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Configuring Cache | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/cache-configuration): Hazelcast offers a specification-compliant JCache implementation. The Hazelcast JCache implementation is 100% TCK (Technology Compatibility Kit) compliant and therefore passes all specification requirements. You can create and configure JCache using the <code>Cache</code> custom resource.
- [Client Authentication and Authorization | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/client-simple-auth)
- [Configure JAAS | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/configure-jaas): This topic explains how to configure JAAS-based authentication.
- [Configure simple authentication and authorization | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/configure-simple-security): This topic explains how to configure simple authentication and authorization for clients.
- [Connecting to Hazelcast from Outside Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/connect-outside-kubernetes): Hazelcast supports connections from both smart and unisocket clients that are outside your Kubernetes cluster. To allow these clients to connect to Hazelcast, you need to configure the `exposeExternally` field of the Hazelcast custom resource.
- [Enabling CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/cp-subsystem): CP Subsystem is a component of a Hazelcast cluster that builds a strongly consistent layer for a set of distributed data structures. As well as network partitions, the CP Subsystem withstands server and client failures.
- [Custom Configuration of Hazelcast cluster | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/custom-config): Hazelcast Platform Operator's Custom Config allows users to provide a raw Hazelcast Configuration that can be directly utilized. It is perfect for those who want to take complete control over their configuration or to use new features that are not yet present in the Operator.
- [Deploy Management Center with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/deploy-management-center): In this tutorial, you'll deploy an instance of Management Center using Hazelcast Platform Operator for Kubernetes.
- [Configuring Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/env-vars)
- [Deploy a Cluster with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/get-started): This topic explains how to deploy a Hazelcast cluster using Hazelcast Platform Operator for Kubernetes.
- [Get support | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/get-support): 'Getting support with Hazelcast Platform Operator.'
- [Configuring System Properties | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/hazelcast-parameters)
- [Running Highly Available Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/high-availability-mode): High Availability Mode guarantees that even if the Kubernetes node or whole availability zone is down, and all related Hazelcast members are terminated, you will not experience any data loss.
- [Configuring the Jet Engine | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/jet-engine-configuration): Data Pipelines allow you to process data stored in one location and send the result to another, such as from a data lake to an analytics database or into a payment processing system. You can also use the same source and sink so the pipeline only processes data. You can configure Hazelcast’s Jet engine using the Hazelcast Platform Operator.
- [Running Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/jet-job-configuration): Data Pipelines allow you to process data stored in one location and send the result to another, such as from a data lake to an analytics database or into a payment processing system. You can also use the same source and sink so the pipeline only processes data.
- [Saving State of Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/jet-job-snapshot): During the processing of data pipelines, the states of the computation process are saved and used by the pipelines. These states are crucial for ensuring the accuracy and integrity of the data processing operations. Jet's snapshot allows you to save and restore these processing states.
- [Configuring JVM Parameters | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/jvm-parameters): You can configure the JVM in the <code>hazelcast</code> container using the <code>jvm</code> field of the CRD spec.
- [Deploying Lite Members | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/lite-members)
- [Connecting to a Hazelcast Cluster | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/management-center-clusters): You can connect Management Center to multiple clusters.
- [External Access to Management Center | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/management-center-external-access): Expose Management Center so that you can effortlessly monitor and manage your Hazelcast cluster.
- [Management Center JVM Arguments | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/management-center-jvm-args): Configure Management Center JVM Arguments.
- [LDAP Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/management-center-ldap): This topic explains how to use your existing LDAP server for authentication/authorization in Management Center.
- [Management Center Persistence | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/management-center-persistence): Configure Management Center Persistence.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/map-configuration): Hazelcast maps are used to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures. You can create and configure maps using the <code>Map</code> resource.
- [Migrating From Helm Chart to the Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/migrating-from-helm)
- [Configuring MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/multimap-configuration): Hazelcast MultiMap, also known as IMultiMap, is a specialized map where you can store multiple values under a single key. Just like any other distributed data structure implementation in Hazelcast, MultiMap is distributed and thread-safe. You can create and configure MultiMaps using the <code>MultiMap</code> custom resource.
- [Configuring the Native Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/native-memory): The Native Memory Store is a pluggable memory manager. It allows you to set up different configurations, or stores, for your application’s data structures on a single JVM. These memory stores form part of a common access layer which scales up to use a configured amount of memory on the JVM.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/phone-homes): Each instance of Hazelcast Platform Operator reports usage data to the Hazelcast phone home server when a Custom Resource is successfully deployed and every 24 hours after that. Hazelcast uses this data to learn about the usage of Hazelcast Platform Operator.
- [Configuring Queues | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/queue-configuration): Hazelcast distributed queue is an implementation of java.util.concurrent.BlockingQueue. Being distributed, Hazelcast distributed queue enables all cluster members to interact with it. Using Hazelcast distributed queue, you can add an item in one cluster member and remove it from another one. You can create and configure queue using the <code>Queue</code> custom resource.
- [Release notes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/release-notes): These release notes list any new features, enhancements, fixes, and breaking changes implemented between version 5.14.0 and version 5.15.0 of Hazelcast Operator.
- [Remove a Cluster with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/remove-cluster): This topic explains how to remove a cluster using the Hazelcast Platform Operator for Kubernetes.
- [Remove Management Center using the Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/remove-management-center): This topic describes how to remove Management Center using the Hazelcast Platform Operator for Kubernetes.
- [Configuring Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/replicatedmap-configuration): A replicated map is a distributed key-value data structure where the data is replicated to all members in the cluster. It provides full replication of entries to all members for high-speed access. You can create and configure replicated maps using the <code>ReplicatedMap</code> custom resource.
- [Configuring Container Resources | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/resource-configuration)
- [Scaling and Upgrading a Hazelcast Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/scaling-upgrading)
- [Scheduling Hazelcast Pods | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/scheduling-configuration): You can make sure that pods for Hazelcast members are run on certain nodes, using the following scheduling principles of Kubernetes: node selector, node affinity, taints, and tolerations.
- [Configuring the Hazelcast Serialization | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/serialization-configuration): For data to be sent over a network between cluster members and/or clients, it needs to be serialized into raw bytes. Hazelcast has many serialization options to choose from, depending on what you plan on doing with your data.
- [Configuring TLS | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/tls): Hazelcast TLS is a security feature that provides encryption and authentication of data transmitted between Hazelcast nodes, preventing unauthorized access and eavesdropping.
- [Configuring Topics | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/topic-configuration): Hazelcast provides a distribution mechanism for publishing messages that are delivered to multiple subscribers. This is known as a publish/subscribe (pub/sub) messaging model. Publishing and subscription operations are cluster wide. When a member subscribes to a topic, it is registered to receive messages published by any member in the cluster, including any new members that joined after you added the listener. You can create and configure topics using the <code>Topic</code> custom resource.
- [User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/user-code-deployment): Hazelcast allows you to deploy your own custom and domain classes to cluster members. From Hazelcast Platform Operator, you can deploy your application code from external buckets and ConfigMap objects in Kubernetes.
- [User Code Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/user-code-namespaces): User Code Namespaces provide a container for Java classpath resources, such as user code and accompanying artifacts like property files. This provides namespace isolation to ensure that access to resources in different namespaces can be managed through configuration. From Hazelcast Platform Operator, you can deploy your application code from external buckets using UserCodeNamespace CRs.
- [Configuring Vector Collections | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/vector-collection-configuration): The primary object for interacting with vector storage is a Vector Collection. A Vector Collection holds information about the vectors and associated metadata (user values).
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/wan-replication): WAN replication allows you to keep Hazelcast clusters in sync across multiple sites or cloud deployments. In Hazelcast Platform Operator, you can create a <code>WanReplication</code> resource to replicate multiple maps from multiple source clusters to a single target Hazelcast cluster. 
- [Syncronizing WAN replicated data | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.15/wan-sync): WAN Syncronization allows you to overcome out-of-sync issues with the WAN replicated data. 
- [Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/): By eliminating the need for manual deployment and life-cycle management, Hazelcast Platform Operator simplifies working with Hazelcast clusters on Kubernetes and Red Hat OpenShift.
- [Advanced Network Configuration | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/advanced-networking)
- [Running in air-gapped environments | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/air-gapped-env)
- [Hazelcast Platform Operator API Docs | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/api-ref)
- [Authorization Methods to Access Cloud Storage | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/authorization)
- [Persistence, Backup and Restore | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/backup-restore): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Configuring Cache | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/cache-configuration): Hazelcast offers a specification-compliant JCache implementation. The Hazelcast JCache implementation is 100% TCK (Technology Compatibility Kit) compliant and therefore passes all specification requirements. You can create and configure JCache using the <code>Cache</code> custom resource.
- [Connecting to Hazelcast from Outside Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/connect-outside-kubernetes): Hazelcast supports connections from both smart and unisocket clients that are outside your Kubernetes cluster. To allow these clients to connect to Hazelcast, you need to configure the `exposeExternally` field of the Hazelcast custom resource.
- [Enabling CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/cp-subsystem): CP Subsystem is a component of a Hazelcast cluster that builds a strongly consistent layer for a set of distributed data structures. As well as network partitions, the CP Subsystem withstands server and client failures.
- [Custom Configuration of Hazelcast cluster | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/custom-config): Hazelcast Platform Operator's Custom Config allows users to provide a raw Hazelcast Configuration that can be directly utilized. It is perfect for those who want to take complete control over their configuration or to use new features that are not yet present in the Operator.
- [Deploy Management Center with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/deploy-management-center): In this tutorial, you'll deploy an instance of Management Center using Hazelcast Platform Operator for Kubernetes.
- [Configuring Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/env-vars)
- [Deploy a Cluster with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/get-started): In this tutorial, you'll deploy a Hazelcast cluster using Hazelcast Platform Operator for Kubernetes.
- [Configuring System Properties | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/hazelcast-parameters)
- [Running Highly Available Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/high-availability-mode): High Availability Mode guarantees that even if the Kubernetes node or whole availability zone is down, and all related Hazelcast members are terminated, you will not experience any data loss.
- [Configuring the Jet Engine | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/jet-engine-configuration): Data Pipelines allow you to process data stored in one location and send the result to another, such as from a data lake to an analytics database or into a payment processing system. You can also use the same source and sink so the pipeline only processes data. You can configure Hazelcast’s Jet engine using the Hazelcast Platform Operator.
- [Running Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/jet-job-configuration): Data Pipelines allow you to process data stored in one location and send the result to another, such as from a data lake to an analytics database or into a payment processing system. You can also use the same source and sink so the pipeline only processes data.
- [Saving State of Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/jet-job-snapshot): During the processing of data pipelines, the states of the computation process are saved and used by the pipelines. These states are crucial for ensuring the accuracy and integrity of the data processing operations. Jet's snapshot allows you to save and restore these processing states.
- [Configuring JVM Parameters | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/jvm-parameters): You can configure the JVM in the <code>hazelcast</code> container using the <code>jvm</code> field of the CRD spec.
- [Deploying Lite Members | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/lite-members)
- [Connecting to a Hazelcast Cluster | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/management-center-clusters): You can connect Management Center to multiple clusters.
- [External Access to Management Center | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/management-center-external-access): Expose Management Center so that you can effortlessly monitor and manage your Hazelcast cluster.
- [Management Center JVM Arguments | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/management-center-jvm-args): Configure Management Center JVM Arguments.
- [LDAP Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/management-center-ldap): You can use your existing LDAP server for authentication/authorization on the Management Center.
- [Management Center Persistence | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/management-center-persistence): Configure Management Center Persistence.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/map-configuration): Hazelcast maps are used to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures. You can create and configure maps using the <code>Map</code> resource.
- [Migrating From Helm Chart to the Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/migrating-from-helm)
- [Configuring MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/multimap-configuration): Hazelcast MultiMap, also known as IMultiMap, is a specialized map where you can store multiple values under a single key. Just like any other distributed data structure implementation in Hazelcast, MultiMap is distributed and thread-safe. You can create and configure MultiMaps using the <code>MultiMap</code> custom resource.
- [Configuring the Native Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/native-memory): The Native Memory Store is a pluggable memory manager. It allows you to set up different configurations, or stores, for your application’s data structures on a single JVM. These memory stores form part of a common access layer which scales up to use a configured amount of memory on the JVM.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/phone-homes): Each instance of Hazelcast Platform Operator reports usage data to the Hazelcast phone home server when a Custom Resource is successfully deployed and every 24 hours after that. Hazelcast uses this data to learn about the usage of Hazelcast Platform Operator.
- [Configuring Queues | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/queue-configuration): Hazelcast distributed queue is an implementation of java.util.concurrent.BlockingQueue. Being distributed, Hazelcast distributed queue enables all cluster members to interact with it. Using Hazelcast distributed queue, you can add an item in one cluster member and remove it from another one. You can create and configure queue using the <code>Queue</code> custom resource.
- [Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/release-notes)
- [Configuring Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/replicatedmap-configuration): A replicated map is a distributed key-value data structure where the data is replicated to all members in the cluster. It provides full replication of entries to all members for high-speed access. You can create and configure replicated maps using the <code>ReplicatedMap</code> custom resource.
- [Configuring Container Resources | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/resource-configuration)
- [Scaling and Upgrading a Hazelcast Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/scaling-upgrading)
- [Scheduling Hazelcast Pods | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/scheduling-configuration): You can make sure that pods for Hazelcast members are run on certain nodes, using the following scheduling principles of Kubernetes: node selector, node affinity, taints, and tolerations.
- [Configuring the Hazelcast Serialization | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/serialization-configuration): For data to be sent over a network between cluster members and/or clients, it needs to be serialized into raw bytes. Hazelcast has many serialization options to choose from, depending on what you plan on doing with your data.
- [Configuring TLS | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/tls): Hazelcast TLS is a security feature that provides encryption and authentication of data transmitted between Hazelcast nodes, preventing unauthorized access and eavesdropping.
- [Configuring Topics | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/topic-configuration): Hazelcast provides a distribution mechanism for publishing messages that are delivered to multiple subscribers. This is known as a publish/subscribe (pub/sub) messaging model. Publishing and subscription operations are cluster wide. When a member subscribes to a topic, it is registered to receive messages published by any member in the cluster, including any new members that joined after you added the listener. You can create and configure topics using the <code>Topic</code> custom resource.
- [User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/user-code-deployment): Hazelcast allows you to deploy your own custom and domain classes to cluster members. From Hazelcast Platform Operator, you can deploy your application code from external buckets and ConfigMap objects in Kubernetes.
- [User Code Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/user-code-namespaces): User Code Namespaces provide a container for Java classpath resources, such as user code and accompanying artifacts like property files. This provides namespace isolation to ensure that access to resources in different namespaces can be managed through configuration. From Hazelcast Platform Operator, you can deploy your application code from external buckets using UserCodeNamespace CRs.
- [Configuring Vector Collections | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/vector-collection-configuration): The primary object for interacting with vector storage is a Vector Collection. A Vector Collection holds information about the vectors and associated metadata (user values).
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/wan-replication): WAN replication allows you to keep Hazelcast clusters in sync across multiple sites or cloud deployments. In Hazelcast Platform Operator, you can create a <code>WanReplication</code> resource to replicate multiple maps from multiple source clusters to a single target Hazelcast cluster. 
- [Syncronizing WAN replicated data | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/wan-sync): WAN Syncronization allows you to overcome out-of-sync issues with the WAN replicated data. 
- [What’s new in Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.14/whats-new): Here are the highlights of what's new and improved in Hazelcast Platform Operator 5.14.
- [Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/): By eliminating the need for manual deployment and life-cycle management, Hazelcast Platform Operator simplifies working with Hazelcast clusters on Kubernetes and Red Hat OpenShift.
- [Advanced Network Configuration | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/advanced-networking)
- [Hazelcast Platform Operator API Docs | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/api-ref)
- [Authorization Methods to Access Cloud Storage | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/authorization)
- [Persistence, Backup and Restore | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/backup-restore): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Configuring Cache | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/cache-configuration): Hazelcast offers a specification-compliant JCache implementation. The Hazelcast JCache implementation is 100% TCK (Technology Compatibility Kit) compliant and therefore passes all specification requirements. You can create and configure JCache using the <code>Cache</code> custom resource.
- [Connecting to Hazelcast from Outside Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/connect-outside-kubernetes): Hazelcast supports connections from both smart and unisocket clients that are outside your Kubernetes cluster. To allow these clients to connect to Hazelcast, you need to configure the `exposeExternally` field of the Hazelcast custom resource.
- [Enabling CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/cp-subsystem): CP Subsystem is a component of a Hazelcast cluster that builds a strongly consistent layer for a set of distributed data structures. As well as network partitions, the CP Subsystem withstands server and client failures.
- [Custom Configuration of Hazelcast cluster | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/custom-config): Hazelcast Platform Operator's Custom Config allows users to provide a raw Hazelcast Configuration that can be directly utilized. It is perfect for those who want to take complete control over their configuration or to use new features that are not yet present in the Operator.
- [Deploy Management Center with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/deploy-management-center): In this tutorial, you'll deploy an instance of Management Center using Hazelcast Platform Operator for Kubernetes.
- [Configuring Environment Variables | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/env-vars)
- [Deploy a Cluster with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/get-started): In this tutorial, you'll deploy a Hazelcast cluster using Hazelcast Platform Operator for Kubernetes.
- [Configuring System Properties | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/hazelcast-parameters)
- [Running Highly Available Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/high-availability-mode): High Availability Mode guarantees that even if the Kubernetes node or whole availability zone is down, and all related Hazelcast members are terminated, you will not experience any data loss.
- [Configuring the Jet Engine | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/jet-engine-configuration): Data Pipelines allow you to process data stored in one location and send the result to another, such as from a data lake to an analytics database or into a payment processing system. You can also use the same source and sink so the pipeline only processes data. You can configure Hazelcast’s Jet engine using the Hazelcast Platform Operator.
- [Running Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/jet-job-configuration): Data Pipelines allow you to process data stored in one location and send the result to another, such as from a data lake to an analytics database or into a payment processing system. You can also use the same source and sink so the pipeline only processes data.
- [Saving State of Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/jet-job-snapshot): During the processing of data pipelines, the states of the computation process are saved and used by the pipelines. These states are crucial for ensuring the accuracy and integrity of the data processing operations. Jet's snapshot allows you to save and restore these processing states.
- [Configuring JVM Parameters | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/jvm-parameters): You can configure the JVM in the <code>hazelcast</code> container using the <code>jvm</code> field of the CRD spec.
- [Connecting to a Hazelcast Cluster | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/management-center-clusters): You can connect Management Center to multiple clusters.
- [External Access to Management Center | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/management-center-external-access): Expose Management Center so that you can effortlessly monitor and manage your Hazelcast cluster.
- [Management Center JVM Arguments | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/management-center-jvm-args): Configure Management Center JVM Arguments.
- [LDAP Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/management-center-ldap): You can use your existing LDAP server for authentication/authorization on the Management Center.
- [Management Center Persistence | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/management-center-persistence): Configure Management Center Persistence.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/map-configuration): Hazelcast maps are used to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures. You can create and configure maps using the <code>Map</code> resource.
- [Migrating From Helm Chart to the Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/migrating-from-helm)
- [Configuring MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/multimap-configuration): Hazelcast MultiMap, also known as IMultiMap, is a specialized map where you can store multiple values under a single key. Just like any other distributed data structure implementation in Hazelcast, MultiMap is distributed and thread-safe. You can create and configure MultiMaps using the <code>MultiMap</code> custom resource.
- [Configuring the Native Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/native-memory): The Native Memory Store is a pluggable memory manager. It allows you to set up different configurations, or stores, for your application’s data structures on a single JVM. These memory stores form part of a common access layer which scales up to use a configured amount of memory on the JVM.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/phone-homes): Each instance of Hazelcast Platform Operator reports usage data to the Hazelcast phone home server when a Custom Resource is successfully deployed and every 24 hours after that. Hazelcast uses this data to learn about the usage of Hazelcast Platform Operator.
- [Configuring Queues | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/queue-configuration): Hazelcast distributed queue is an implementation of java.util.concurrent.BlockingQueue. Being distributed, Hazelcast distributed queue enables all cluster members to interact with it. Using Hazelcast distributed queue, you can add an item in one cluster member and remove it from another one. You can create and configure queue using the <code>Queue</code> custom resource.
- [Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/release-notes): These release notes list any new features, enhancements, fixes and breaking changes that were made between version 5.12.0 and version 5.13.0 of Hazelcast Operator.
- [Configuring Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/replicatedmap-configuration): A replicated map is a distributed key-value data structure where the data is replicated to all members in the cluster. It provides full replication of entries to all members for high-speed access. You can create and configure replicated maps using the <code>ReplicatedMap</code> custom resource.
- [Configuring Container Resources | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/resource-configuration)
- [Scaling and Upgrading a Hazelcast Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/scaling-upgrading)
- [Scheduling Hazelcast Pods | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/scheduling-configuration): You can make sure that pods for Hazelcast members are run on certain nodes, using the following scheduling principles of Kubernetes: node selector, node affinity, taints, and tolerations.
- [Configuring the Hazelcast Serialization | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/serialization-configuration): For data to be sent over a network between cluster members and/or clients, it needs to be serialized into raw bytes. Hazelcast has many serialization options to choose from, depending on what you plan on doing with your data.
- [Configuring TLS | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/tls): Hazelcast TLS is a security feature that provides encryption and authentication of data transmitted between Hazelcast nodes, preventing unauthorized access and eavesdropping.
- [Configuring Topics | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/topic-configuration): Hazelcast provides a distribution mechanism for publishing messages that are delivered to multiple subscribers. This is known as a publish/subscribe (pub/sub) messaging model. Publishing and subscription operations are cluster wide. When a member subscribes to a topic, it is registered to receive messages published by any member in the cluster, including any new members that joined after you added the listener. You can create and configure topics using the <code>Topic</code> custom resource.
- [User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/user-code-deployment): Hazelcast allows you to deploy your own custom and domain classes to cluster members. From Hazelcast Platform Operator, you can deploy your application code from external buckets and ConfigMap objects in Kubernetes.
- [User Code Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/user-code-namespaces): User Code Namespaces provide a container for Java classpath resources, such as user code and accompanying artifacts like property files. This provides namespace isolation to ensure that access to resources in different namespaces can be managed through configuration. From Hazelcast Platform Operator, you can deploy your application code from external buckets using UserCodeNamespace CRs.
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/wan-replication): WAN replication allows you to keep Hazelcast clusters in sync across multiple sites or cloud deployments. In Hazelcast Platform Operator, you can create a <code>WanReplication</code> resource to replicate multiple maps from multiple source clusters to a single target Hazelcast cluster. 
- [Syncronizing WAN replicated data | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/wan-sync): WAN Syncronization allows you to overcome out-of-sync issues with the WAN replicated data. 
- [What’s New in Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.13/whats-new): Here are the highlights of what's new and improved in Hazelcast Platform Operator 5.13.
- [Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/): By eliminating the need for manual deployment and life-cycle management, Hazelcast Platform Operator simplifies working with Hazelcast clusters on Kubernetes and Red Hat OpenShift.
- [Advanced Network Configuration | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/advanced-networking)
- [Hazelcast Platform Operator API Docs | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/api-ref)
- [Persistence, Backup and Restore | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/backup-restore): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Configuring Cache | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/cache-configuration): Hazelcast offers a specification-compliant JCache implementation. The Hazelcast JCache implementation is 100% TCK (Technology Compatibility Kit) compliant and therefore passes all specification requirements. You can create and configure JCache using the <code>Cache</code> custom resource.
- [Connecting to Hazelcast from Outside Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/connect-outside-kubernetes): Hazelcast supports connections from both smart and unisocket clients that are outside your Kubernetes cluster. To allow these clients to connect to Hazelcast, you need to configure the `exposeExternally` field of the Hazelcast custom resource.
- [Enabling CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/cp-subsystem): CP Subsystem is a component of a Hazelcast cluster that builds a strongly consistent layer for a set of distributed data structures. As well as network partitions, the CP Subsystem withstands server and client failures.
- [Custom Configuration of Hazelcast cluster | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/custom-config): Hazelcast Platform Operator's Custom Config allows users to provide a raw Hazelcast Configuration that can be directly utilized. It is perfect for those who want to take complete control over their configuration or to use new features that are not yet present in the Operator.
- [Deploy Management Center with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/deploy-management-center): In this tutorial, you'll deploy an instance of Management Center using Hazelcast Platform Operator for Kubernetes.
- [Deploy a Cluster with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/get-started): In this tutorial, you'll deploy a Hazelcast cluster using Hazelcast Platform Operator for Kubernetes.
- [Configuring System Properties | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/hazelcast-parameters)
- [Running Highly Available Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/high-availability-mode): High Availability Mode guarantees that even if the Kubernetes node or whole availability zone is down, and all related Hazelcast members are terminated, you will not experience any data loss.
- [Configuring the Jet Engine | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/jet-engine-configuration): Data Pipelines allow you to process data stored in one location and send the result to another, such as from a data lake to an analytics database or into a payment processing system. You can also use the same source and sink so the pipeline only processes data. You can configure Hazelcast’s Jet engine using the Hazelcast Platform Operator.
- [Running Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/jet-job-configuration): Data Pipelines allow you to process data stored in one location and send the result to another, such as from a data lake to an analytics database or into a payment processing system. You can also use the same source and sink so the pipeline only processes data.
- [Saving State of Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/jet-job-snapshot): During the processing of data pipelines, the states of the computation process are saved and used by the pipelines. These states are crucial for ensuring the accuracy and integrity of the data processing operations. Jet's snapshot allows you to save and restore these processing states.
- [Configuring JVM Parameters | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/jvm-parameters): You can configure the JVM in the <code>hazelcast</code> container using the <code>jvm</code> field of the CRD spec.
- [Connecting to a Hazelcast Cluster | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/management-center-clusters): You can connect Management Center to multiple clusters.
- [External Access to Management Center | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/management-center-external-access): Expose Management Center so that you can effortlessly monitor and manage your Hazelcast cluster.
- [Management Center JVM Arguments | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/management-center-jvm-args): Configure Management Center JVM Arguments.
- [LDAP Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/management-center-ldap): You can use your existing LDAP server for authentication/authorization on the Management Center.
- [Management Center Persistence | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/management-center-persistence): Configure Management Center Persistence.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/map-configuration): Hazelcast maps are used to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures. You can create and configure maps using the <code>Map</code> resource.
- [Migrating From Helm Chart to the Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/migrating-from-helm)
- [Migrating to 5.13 | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/migration-guide)
- [Configuring MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/multimap-configuration): Hazelcast MultiMap, also known as IMultiMap, is a specialized map where you can store multiple values under a single key. Just like any other distributed data structure implementation in Hazelcast, MultiMap is distributed and thread-safe. You can create and configure MultiMaps using the <code>MultiMap</code> custom resource.
- [Configuring the Native Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/native-memory): The Native Memory Store is a pluggable memory manager. It allows you to set up different configurations, or stores, for your application’s data structures on a single JVM. These memory stores form part of a common access layer which scales up to use a configured amount of memory on the JVM.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/phone-homes): Each instance of Hazelcast Platform Operator reports usage data to the Hazelcast phone home server when a Custom Resource is successfully deployed and every 24 hours after that. Hazelcast uses this data to learn about the usage of Hazelcast Platform Operator.
- [Configuring Queues | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/queue-configuration): Hazelcast distributed queue is an implementation of java.util.concurrent.BlockingQueue. Being distributed, Hazelcast distributed queue enables all cluster members to interact with it. Using Hazelcast distributed queue, you can add an item in one cluster member and remove it from another one. You can create and configure queue using the <code>Queue</code> custom resource.
- [Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/release-notes)
- [Configuring Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/replicatedmap-configuration): A replicated map is a distributed key-value data structure where the data is replicated to all members in the cluster. It provides full replication of entries to all members for high-speed access. You can create and configure replicated maps using the <code>ReplicatedMap</code> custom resource.
- [Configuring Container Resources | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/resource-configuration)
- [Scaling and Upgrading a Hazelcast Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/scaling-upgrading)
- [Scheduling Hazelcast Pods | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/scheduling-configuration): You can make sure that pods for Hazelcast members are run on certain nodes, using the following scheduling principles of Kubernetes: node selector, node affinity, taints, and tolerations.
- [Configuring the Hazelcast Serialization | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/serialization-configuration): For data to be sent over a network between cluster members and/or clients, it needs to be serialized into raw bytes. Hazelcast has many serialization options to choose from, depending on what you plan on doing with your data.
- [Configuring TLS | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/tls): Hazelcast TLS is a security feature that provides encryption and authentication of data transmitted between Hazelcast nodes, preventing unauthorized access and eavesdropping.
- [Configuring Topics | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/topic-configuration): Hazelcast provides a distribution mechanism for publishing messages that are delivered to multiple subscribers. This is known as a publish/subscribe (pub/sub) messaging model. Publishing and subscription operations are cluster wide. When a member subscribes to a topic, it is registered to receive messages published by any member in the cluster, including any new members that joined after you added the listener. You can create and configure topics using the <code>Topic</code> custom resource.
- [User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/user-code-deployment): Hazelcast allows you to deploy your own custom and domain classes to cluster members. From Hazelcast Platform Operator, you can deploy your application code from external buckets and ConfigMap objects in Kubernetes.
- [User Code Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/user-code-namespaces): User Code Namespaces provide a container for Java classpath resources, such as user code and accompanying artifacts like property files. This provides namespace isolation to ensure that access to resources in different namespaces can be managed through configuration. From Hazelcast Platform Operator, you can deploy your application code from external buckets using UserCodeNamespace CRs.
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/wan-replication): WAN replication allows you to keep Hazelcast clusters in sync across multiple sites or cloud deployments. In Hazelcast Platform Operator, you can create a <code>WanReplication</code> resource to replicate multiple maps from multiple source clusters to a single target Hazelcast cluster. 
- [Syncronizing WAN replicated data | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.12/wan-sync): WAN Syncronization allows you to overcome out-of-sync issues with the WAN replicated data. 
- [Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/): By eliminating the need for manual deployment and life-cycle management, Hazelcast Platform Operator simplifies working with Hazelcast clusters on Kubernetes and Red Hat OpenShift.
- [Advanced Network Configuration | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/advanced-networking)
- [Hazelcast Platform Operator API Docs | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/api-ref)
- [Persistence, Backup and Restore | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/backup-restore): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Configuring Cache | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/cache-configuration): Hazelcast offers a specification-compliant JCache implementation. The Hazelcast JCache implementation is 100% TCK (Technology Compatibility Kit) compliant and therefore passes all specification requirements. You can create and configure JCache using the <code>Cache</code> custom resource.
- [Connecting to Hazelcast from Outside Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/connect-outside-kubernetes): Hazelcast supports connections from both smart and unisocket clients that are outside your Kubernetes cluster. To allow these clients to connect to Hazelcast, you need to configure the `exposeExternally` field of the Hazelcast custom resource.
- [Enabling CP Subsystem | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/cp-subsystem): CP Subsystem is a component of a Hazelcast cluster that builds a strongly consistent layer for a set of distributed data structures. As well as network partitions, the CP Subsystem withstands server and client failures.
- [Custom Configuration of Hazelcast cluster | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/custom-config): Hazelcast Platform Operator's Custom Config allows users to provide a raw Hazelcast Configuration that can be directly utilized. It is perfect for those who want to take complete control over their configuration or to use new features that are not yet present in the Operator.
- [Deploy Management Center with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/deploy-management-center): In this tutorial, you'll deploy an instance of Management Center using Hazelcast Platform Operator for Kubernetes.
- [Deploy a Cluster with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/get-started): In this tutorial, you'll deploy a Hazelcast cluster using Hazelcast Platform Operator for Kubernetes.
- [Configuring System Properties | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/hazelcast-parameters)
- [Running Highly Available Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/high-availability-mode): High Availability Mode guarantees that even if the Kubernetes node or whole availability zone is down, and all related Hazelcast members are terminated, you will not experience any data loss.
- [Configuring the Jet Engine | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/jet-engine-configuration): Data Pipelines allow you to process data stored in one location and send the result to another, such as from a data lake to an analytics database or into a payment processing system. You can also use the same source and sink so the pipeline only processes data. You can configure Hazelcast’s Jet engine using the Hazelcast Platform Operator.
- [Running Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/jet-job-configuration): Data Pipelines allow you to process data stored in one location and send the result to another, such as from a data lake to an analytics database or into a payment processing system. You can also use the same source and sink so the pipeline only processes data.
- [Saving State of Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/jet-job-snapshot): During the processing of data pipelines, the states of the computation process are saved and used by the pipelines. These states are crucial for ensuring the accuracy and integrity of the data processing operations. Jet's snapshot allows you to save and restore these processing states.
- [Configuring JVM Parameters | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/jvm-parameters): You can configure the JVM in the <code>hazelcast</code> container using the <code>jvm</code> field of the CRD spec.
- [Connecting to a Hazelcast Cluster | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/management-center-clusters): You can connect Management Center to multiple clusters.
- [External Access to Management Center | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/management-center-external-access): Expose Management Center so that you can effortlessly monitor and manage your Hazelcast cluster.
- [Management Center JVM Arguments | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/management-center-jvm-args): Configure Management Center JVM Arguments.
- [LDAP Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/management-center-ldap): You can use your existing LDAP server for authentication/authorization on the Management Center.
- [Management Center Persistence | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/management-center-persistence): Configure Management Center Persistence.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/map-configuration): Hazelcast maps are used to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures. You can create and configure maps using the <code>Map</code> resource.
- [Migrating From Helm Chart to the Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/migrating-from-helm)
- [Configuring MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/multimap-configuration): Hazelcast MultiMap, also known as IMultiMap, is a specialized map where you can store multiple values under a single key. Just like any other distributed data structure implementation in Hazelcast, MultiMap is distributed and thread-safe. You can create and configure MultiMaps using the <code>MultiMap</code> custom resource.
- [Configuring the Native Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/native-memory): The Native Memory Store is a pluggable memory manager. It allows you to set up different configurations, or stores, for your application’s data structures on a single JVM. These memory stores form part of a common access layer which scales up to use a configured amount of memory on the JVM.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/phone-homes): Each instance of Hazelcast Platform Operator reports usage data to the Hazelcast phone home server when a Custom Resource is successfully deployed and every 24 hours after that. Hazelcast uses this data to learn about the usage of Hazelcast Platform Operator.
- [Configuring Queues | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/queue-configuration): Hazelcast distributed queue is an implementation of java.util.concurrent.BlockingQueue. Being distributed, Hazelcast distributed queue enables all cluster members to interact with it. Using Hazelcast distributed queue, you can add an item in one cluster member and remove it from another one. You can create and configure queue using the <code>Queue</code> custom resource.
- [Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/release-notes)
- [Configuring Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/replicatedmap-configuration): A replicated map is a distributed key-value data structure where the data is replicated to all members in the cluster. It provides full replication of entries to all members for high-speed access. You can create and configure replicated maps using the <code>ReplicatedMap</code> custom resource.
- [Configuring Container Resources | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/resource-configuration)
- [Scaling and Upgrading a Hazelcast Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/scaling-upgrading)
- [Scheduling Hazelcast Pods | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/scheduling-configuration): You can make sure that pods for Hazelcast members are run on certain nodes, using the following scheduling principles of Kubernetes: node selector, node affinity, taints, and tolerations.
- [Configuring the Hazelcast Serialization | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/serialization-configuration): For data to be sent over a network between cluster members and/or clients, it needs to be serialized into raw bytes. Hazelcast has many serialization options to choose from, depending on what you plan on doing with your data.
- [Configuring TLS | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/tls): Hazelcast TLS is a security feature that provides encryption and authentication of data transmitted between Hazelcast nodes, preventing unauthorized access and eavesdropping.
- [Configuring Topics | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/topic-configuration): Hazelcast provides a distribution mechanism for publishing messages that are delivered to multiple subscribers. This is known as a publish/subscribe (pub/sub) messaging model. Publishing and subscription operations are cluster wide. When a member subscribes to a topic, it is registered to receive messages published by any member in the cluster, including any new members that joined after you added the listener. You can create and configure topics using the <code>Topic</code> custom resource.
- [User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/user-code-deployment): Hazelcast allows you to deploy your own custom and domain classes to cluster members. From Hazelcast Platform Operator, you can deploy your application code from external buckets and ConfigMap objects in Kubernetes.
- [User Code Namespaces | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/user-code-namespaces): User Code Namespaces provide a container for Java classpath resources, such as user code and accompanying artifacts like property files. This provides namespace isolation to ensure that access to resources in different namespaces can be managed through configuration. With the Hazelcast Platform Operator, you can create User Code Namespaces from the client.
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/wan-replication): WAN replication allows you to keep Hazelcast clusters in sync across multiple sites or cloud deployments. In Hazelcast Platform Operator, you can create a <code>WanReplication</code> resource to replicate multiple maps from multiple source clusters to a single target Hazelcast cluster. 
- [Syncronizing WAN replicated data | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.11/wan-sync): WAN Syncronization allows you to overcome out-of-sync issues with the WAN replicated data. 
- [Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/): By eliminating the need for manual deployment and life-cycle management, Hazelcast Platform Operator simplifies working with Hazelcast clusters on Kubernetes and Red Hat OpenShift.
- [Advanced Network Configuration | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/advanced-networking)
- [Hazelcast Platform Operator API Docs | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/api-ref)
- [Persistence, Backup and Restore | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/backup-restore): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Configuring Cache | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/cache-configuration): Hazelcast offers a specification-compliant JCache implementation. The Hazelcast JCache implementation is 100% TCK (Technology Compatibility Kit) compliant and therefore passes all specification requirements. You can create and configure JCache using the <code>Cache</code> custom resource.
- [Connecting to Hazelcast from Outside Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/connect-outside-kubernetes): Hazelcast supports connections from both smart and unisocket clients that are outside your Kubernetes cluster. To allow these clients to connect to Hazelcast, you need to configure the `exposeExternally` field of the Hazelcast custom resource.
- [Custom Configuration of Hazelcast cluster | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/custom-config): Hazelcast Platform Operator's Custom Config allows users to provide a raw Hazelcast Configuration that can be directly utilized. It is perfect for those who want to take complete control over their configuration or to use new features that are not yet present in the Operator.
- [Deploy Management Center with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/deploy-management-center): In this tutorial, you'll deploy an instance of Management Center using Hazelcast Platform Operator for Kubernetes.
- [Deploy a Cluster with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/get-started): In this tutorial, you'll deploy a Hazelcast cluster using Hazelcast Platform Operator for Kubernetes.
- [Running Highly Available Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/high-availability-mode): High Availability Mode guarantees that even if the Kubernetes node or whole availability zone is down, and all related Hazelcast members are terminated, you will not experience any data loss.
- [Configuring the Jet Engine | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/jet-engine-configuration): Data Pipelines allow you to process data stored in one location and send the result to another, such as from a data lake to an analytics database or into a payment processing system. You can also use the same source and sink so the pipeline only processes data. You can configure Hazelcast’s Jet engine using the Hazelcast Platform Operator.
- [Running Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/jet-job-configuration): Data Pipelines allow you to process data stored in one location and send the result to another, such as from a data lake to an analytics database or into a payment processing system. You can also use the same source and sink so the pipeline only processes data.
- [Saving State of Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/jet-job-snapshot): During the processing of data pipelines, the states of the computation process are saved and used by the pipelines. These states are crucial for ensuring the accuracy and integrity of the data processing operations. Jet's snapshot allows you to save and restore these processing states.
- [Configuring JVM Parameters | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/jvm-parameters): You can configure the JVM in the <code>hazelcast</code> container using the <code>jvm</code> field of the CRD spec.
- [Connecting to a Hazelcast Cluster | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/management-center-clusters): You can connect Management Center to multiple clusters.
- [External Access to Management Center | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/management-center-external-access): Expose Management Center so that you can effortlessly monitor and manage your Hazelcast cluster.
- [Management Center JVM Arguments | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/management-center-jvm-args): Configure Management Center JVM Arguments.
- [LDAP Security Provider | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/management-center-ldap): You can use your existing LDAP server for authentication/authorization on the Management Center.
- [Management Center Persistence | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/management-center-persistence): Configure Management Center Persistence.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/map-configuration): Hazelcast maps are used to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures. You can create and configure maps using the <code>Map</code> resource.
- [Migrating to 5.11 | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/migration-guide)
- [Configuring MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/multimap-configuration): Hazelcast MultiMap, also known as IMultiMap, is a specialized map where you can store multiple values under a single key. Just like any other distributed data structure implementation in Hazelcast, MultiMap is distributed and thread-safe. You can create and configure MultiMaps using the <code>MultiMap</code> custom resource.
- [Configuring the Native Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/native-memory): The Native Memory Store is a pluggable memory manager. It allows you to set up different configurations, or stores, for your application’s data structures on a single JVM. These memory stores form part of a common access layer which scales up to use a configured amount of memory on the JVM.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/phone-homes): Each instance of Hazelcast Platform Operator reports usage data to the Hazelcast phone home server when a Custom Resource is successfully deployed and every 24 hours after that. Hazelcast uses this data to learn about the usage of Hazelcast Platform Operator.
- [Configuring Queues | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/queue-configuration): Hazelcast distributed queue is an implementation of java.util.concurrent.BlockingQueue. Being distributed, Hazelcast distributed queue enables all cluster members to interact with it. Using Hazelcast distributed queue, you can add an item in one cluster member and remove it from another one. You can create and configure queue using the <code>Queue</code> custom resource.
- [Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/release-notes)
- [Configuring Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/replicatedmap-configuration): A replicated map is a distributed key-value data structure where the data is replicated to all members in the cluster. It provides full replication of entries to all members for high-speed access. You can create and configure replicated maps using the <code>ReplicatedMap</code> custom resource.
- [Scheduling Hazelcast Pods | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/scheduling-configuration): You can make sure that pods for Hazelcast members are run on certain nodes, using the following scheduling principles of Kubernetes: node selector, node affinity, taints, and tolerations.
- [Configuring the Hazelcast Serialization | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/serialization-configuration): For data to be sent over a network between cluster members and/or clients, it needs to be serialized into raw bytes. Hazelcast has many serialization options to choose from, depending on what you plan on doing with your data.
- [Configuring TLS | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/tls): Hazelcast TLS is a security feature that provides encryption and authentication of data transmitted between Hazelcast nodes, preventing unauthorized access and eavesdropping.
- [Configuring Topics | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/topic-configuration): Hazelcast provides a distribution mechanism for publishing messages that are delivered to multiple subscribers. This is known as a publish/subscribe (pub/sub) messaging model. Publishing and subscription operations are cluster wide. When a member subscribes to a topic, it is registered to receive messages published by any member in the cluster, including any new members that joined after you added the listener. You can create and configure topics using the <code>Topic</code> custom resource.
- [User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/user-code-deployment): Hazelcast allows you to deploy your own custom and domain classes to cluster members. From Hazelcast Platform Operator, you can deploy your application code from external buckets and ConfigMap objects in Kubernetes.
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.10/wan-replication): WAN replication allows you to keep Hazelcast clusters in sync across multiple sites or cloud deployments. In Hazelcast Platform Operator, you can create a <code>WanReplication</code> resource to replicate multiple maps from multiple source clusters to a single target Hazelcast cluster. 
- [Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/): By eliminating the need for manual deployment and life-cycle management, Hazelcast Platform Operator simplifies working with Hazelcast clusters on Kubernetes and Red Hat OpenShift.
- [Advanced Network Configuration | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/advanced-networking)
- [Hazelcast Platform Operator API Docs | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/api-ref)
- [Persistence, Backup and Restore | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/backup-restore): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Configuring Cache | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/cache-configuration): Hazelcast offers a specification-compliant JCache implementation. The Hazelcast JCache implementation is 100% TCK (Technology Compatibility Kit) compliant and therefore passes all specification requirements. You can create and configure JCache using the <code>Cache</code> custom resource.
- [Connecting to Hazelcast from Outside Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/connect-outside-kubernetes): Hazelcast supports connections from both smart and unisocket clients that are outside your Kubernetes cluster. To allow these clients to connect to Hazelcast, you need to configure the `exposeExternally` field of the Hazelcast custom resource.
- [Custom Configuration of Hazelcast cluster | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/custom-config): Hazelcast Platform Operator's Custom Config allows users to provide a raw Hazelcast Configuration that can be directly utilized. It is perfect for those who want to take complete control over their configuration or to use new features that are not yet present in the Operator.
- [Deploy Management Center with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/deploy-management-center): In this tutorial, you'll deploy an instance of Management Center using Hazelcast Platform Operator for Kubernetes.
- [Deploy a Cluster with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/get-started): In this tutorial, you'll deploy a Hazelcast cluster using Hazelcast Platform Operator for Kubernetes.
- [Running Highly Available Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/high-availability-mode): High Availability Mode guarantees that even if the Kubernetes node or whole availability zone is down, and all related Hazelcast members are terminated, you will not experience any data loss.
- [Configuring the Jet Engine | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/jet-engine-configuration): Data Pipelines allow you to process data stored in one location and send the result to another, such as from a data lake to an analytics database or into a payment processing system. You can also use the same source and sink so the pipeline only processes data. You can configure Hazelcast’s Jet engine using the Hazelcast Platform Operator.
- [Running Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/jet-job-configuration): Data Pipelines allow you to process data stored in one location and send the result to another, such as from a data lake to an analytics database or into a payment processing system. You can also use the same source and sink so the pipeline only processes data.
- [Saving State of Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/jet-job-snapshot): During the processing of data pipelines, the states of the computation process are saved and used by the pipelines. These states are crucial for ensuring the accuracy and integrity of the data processing operations. Jet's snapshot allows you to save and restore these processing states.
- [Configuring JVM Parameters | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/jvm-parameters): You can configure the JVM in the <code>hazelcast</code> container using the <code>jvm</code> field of the CRD spec.
- [Connecting to a Hazelcast Cluster | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/management-center-clusters): You can connect Management Center to multiple clusters.
- [External Access to Management Center | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/management-center-external-access): Expose Management Center so that you can effortlessly monitor and manage your Hazelcast cluster.
- [Management Center JVM Arguments | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/management-center-jvm-args): Configure Management Center JVM Arguments.
- [Management Center Persistence | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/management-center-persistence): Configure Management Center Persistence.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/map-configuration): Hazelcast maps are used to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures. You can create and configure maps using the <code>Map</code> resource.
- [Configuring MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/multimap-configuration): Hazelcast MultiMap, also known as IMultiMap, is a specialized map where you can store multiple values under a single key. Just like any other distributed data structure implementation in Hazelcast, MultiMap is distributed and thread-safe. You can create and configure MultiMaps using the <code>MultiMap</code> custom resource.
- [Configuring the Native Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/native-memory): The Native Memory Store is a pluggable memory manager. It allows you to set up different configurations, or stores, for your application’s data structures on a single JVM. These memory stores form part of a common access layer which scales up to use a configured amount of memory on the JVM.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/phone-homes): Each instance of Hazelcast Platform Operator reports usage data to the Hazelcast phone home server when a Custom Resource is successfully deployed and every 24 hours after that. Hazelcast uses this data to learn about the usage of Hazelcast Platform Operator.
- [Configuring Queues | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/queue-configuration): Hazelcast distributed queue is an implementation of java.util.concurrent.BlockingQueue. Being distributed, Hazelcast distributed queue enables all cluster members to interact with it. Using Hazelcast distributed queue, you can add an item in one cluster member and remove it from another one. You can create and configure queue using the <code>Queue</code> custom resource.
- [Release notes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/release-notes)
- [Configuring Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/replicatedmap-configuration): A replicated map is a distributed key-value data structure where the data is replicated to all members in the cluster. It provides full replication of entries to all members for high-speed access. You can create and configure replicated maps using the <code>ReplicatedMap</code> custom resource.
- [Scheduling Hazelcast Pods | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/scheduling-configuration): You can make sure that pods for Hazelcast members are run on certain nodes, using the following scheduling principles of Kubernetes: node selector, node affinity, taints, and tolerations.
- [Configuring the Hazelcast Serialization | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/serialization-configuration): For data to be sent over a network between cluster members and/or clients, it needs to be serialized into raw bytes. Hazelcast has many serialization options to choose from, depending on what you plan on doing with your data.
- [Configuring TLS | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/tls): Hazelcast TLS is a security feature that provides encryption and authentication of data transmitted between Hazelcast nodes, preventing unauthorized access and eavesdropping.
- [Configuring Topics | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/topic-configuration): Hazelcast provides a distribution mechanism for publishing messages that are delivered to multiple subscribers. This is known as a publish/subscribe (pub/sub) messaging model. Publishing and subscription operations are cluster wide. When a member subscribes to a topic, it is registered to receive messages published by any member in the cluster, including any new members that joined after you added the listener. You can create and configure topics using the <code>Topic</code> custom resource.
- [User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/user-code-deployment): Hazelcast allows you to deploy your own custom and domain classes to cluster members. From Hazelcast Platform Operator, you can deploy your application code from external buckets and ConfigMap objects in Kubernetes.
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.9/wan-replication): WAN replication allows you to keep Hazelcast clusters in sync across multiple sites or cloud deployments. In Hazelcast Platform Operator, you can create a <code>WanReplication</code> resource to replicate multiple maps from multiple source clusters to a single target Hazelcast cluster. 
- [Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/): By eliminating the need for manual deployment and life-cycle management, Hazelcast Platform Operator simplifies working with Hazelcast clusters on Kubernetes and Red Hat OpenShift.
- [Advanced Network Configuration | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/advanced-networking)
- [Hazelcast Platform Operator API Docs | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/api-ref)
- [Persistence, Backup and Restore | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/backup-restore): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Configuring Cache | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/cache-configuration): Hazelcast offers a specification-compliant JCache implementation. The Hazelcast JCache implementation is 100% TCK (Technology Compatibility Kit) compliant and therefore passes all specification requirements. You can create and configure JCache using the <code>Cache</code> custom resource.
- [Connecting to Hazelcast from Outside Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/connect-outside-kubernetes): Hazelcast supports connections from both smart and unisocket clients that are outside your Kubernetes cluster. To allow these clients to connect to Hazelcast, you need to configure the `exposeExternally` field of the Hazelcast custom resource.
- [Custom Configuration of Hazelcast cluster | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/custom-config): Hazelcast Platform Operator's Custom Config allows users to provide a raw Hazelcast Configuration that can be directly utilized. It is perfect for those who want to take complete control over their configuration or to use new features that are not yet present in the Operator.
- [Deploy Management Center with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/deploy-management-center): In this tutorial, you'll deploy an instance of Management Center using Hazelcast Platform Operator for Kubernetes.
- [Deploy a Cluster with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/get-started): In this tutorial, you'll deploy a Hazelcast cluster using Hazelcast Platform Operator for Kubernetes.
- [Running Highly Available Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/high-availability-mode): High Availability Mode guarantees that even if the Kubernetes node or whole availability zone is down, and all related Hazelcast members are terminated, you will not experience any data loss.
- [Configuring the Jet Engine | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/jet-engine-configuration): Data Pipelines allow you to process data stored in one location and send the result to another, such as from a data lake to an analytics database or into a payment processing system. You can also use the same source and sink so the pipeline only processes data. You can configure Hazelcast’s Jet engine using the Hazelcast Platform Operator.
- [Running Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/jet-job-configuration): Data Pipelines allow you to process data stored in one location and send the result to another, such as from a data lake to an analytics database or into a payment processing system. You can also use the same source and sink so the pipeline only processes data.
- [Saving State of Data Pipelines | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/jet-job-snapshot): During the processing of data pipelines, the states of the computation process are saved and used by the pipelines. These states are crucial for ensuring the accuracy and integrity of the data processing operations. Jet's snapshot allows you to save and restore these processing states.
- [Configuring JVM Parameters | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/jvm-parameters): You can configure the JVM in the <code>hazelcast</code> container using the <code>jvm</code> field of the CRD spec.
- [Connecting to a Hazelcast Cluster | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/management-center-clusters): You can connect Management Center to multiple clusters.
- [External Access to Management Center | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/management-center-external-access): Expose Management Center so that you can effortlessly monitor and manage your Hazelcast cluster.
- [Management Center Persistence | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/management-center-persistence): Configure Management Center Persistence.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/map-configuration): Hazelcast maps are used to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures. You can create and configure maps using the <code>Map</code> resource.
- [Configuring MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/multimap-configuration): Hazelcast MultiMap, also known as IMultiMap, is a specialized map where you can store multiple values under a single key. Just like any other distributed data structure implementation in Hazelcast, MultiMap is distributed and thread-safe. You can create and configure MultiMaps using the <code>MultiMap</code> custom resource.
- [Configuring the Native Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/native-memory): The Native Memory Store is a pluggable memory manager. It allows you to set up different configurations, or stores, for your application’s data structures on a single JVM. These memory stores form part of a common access layer which scales up to use a configured amount of memory on the JVM.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/phone-homes): Each instance of Hazelcast Platform Operator reports usage data to the Hazelcast phone home server when a Custom Resource is successfully deployed and every 24 hours after that. Hazelcast uses this data to learn about the usage of Hazelcast Platform Operator.
- [Configuring Queues | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/queue-configuration): Hazelcast distributed queue is an implementation of java.util.concurrent.BlockingQueue. Being distributed, Hazelcast distributed queue enables all cluster members to interact with it. Using Hazelcast distributed queue, you can add an item in one cluster member and remove it from another one. You can create and configure queue using the <code>Queue</code> custom resource.
- [5.8 Release notes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/release-notes)
- [Configuring Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/replicatedmap-configuration): A replicated map is a distributed key-value data structure where the data is replicated to all members in the cluster. It provides full replication of entries to all members for high-speed access. You can create and configure replicated maps using the <code>ReplicatedMap</code> custom resource.
- [Scheduling Hazelcast Pods | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/scheduling-configuration): You can make sure that pods for Hazelcast members are run on certain nodes, using the following scheduling principles of Kubernetes: node selector, node affinity, taints, and tolerations.
- [Configuring the Hazelcast Serialization | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/serialization-configuration): For data to be sent over a network between cluster members and/or clients, it needs to be serialized into raw bytes. Hazelcast has many serialization options to choose from, depending on what you plan on doing with your data.
- [Configuring TLS | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/tls): Hazelcast TLS is a security feature that provides encryption and authentication of data transmitted between Hazelcast nodes, preventing unauthorized access and eavesdropping.
- [Configuring Topics | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/topic-configuration): Hazelcast provides a distribution mechanism for publishing messages that are delivered to multiple subscribers. This is known as a publish/subscribe (pub/sub) messaging model. Publishing and subscription operations are cluster wide. When a member subscribes to a topic, it is registered to receive messages published by any member in the cluster, including any new members that joined after you added the listener. You can create and configure topics using the <code>Topic</code> custom resource.
- [User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/user-code-deployment): Hazelcast allows you to deploy your own custom and domain classes to cluster members. From Hazelcast Platform Operator, you can deploy your application code from external buckets and ConfigMap objects in Kubernetes.
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.8/wan-replication): WAN replication allows you to keep Hazelcast clusters in sync across multiple sites or cloud deployments. In Hazelcast Platform Operator, you can create a <code>WanReplication</code> resource to replicate multiple maps from multiple source clusters to a single target Hazelcast cluster. 
- [Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/): Hazelcast Platform Operator automates common management tasks such as configuring, creating, scaling, and recovering Hazelcast clusters on Kubernetes and Red Hat OpenShift. By taking care of manual deployment and life-cycle management, Hazelcast Platform Operator makes it simpler to work with Hazelcast clusters.
- [Advanced Network Configuration | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/advanced-networking)
- [Hazelcast Platform Operator API Docs | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/api-ref)
- [Persistence, Backup and Restore | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/backup-restore): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Configuring Cache | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/cache-configuration): Hazelcast offers a specification-compliant JCache implementation. The Hazelcast JCache implementation is 100% TCK (Technology Compatibility Kit) compliant and therefore passes all specification requirements. You can create and configure JCache using the <code>Cache</code> custom resource.
- [Connecting to Hazelcast from Outside Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/connect-outside-kubernetes): Hazelcast supports connections from both smart and unisocket clients that are outside your Kubernetes cluster. To allow these clients to connect to Hazelcast, you need to configure the `exposeExternally` field of the Hazelcast custom resource.
- [Deploy a Cluster with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/get-started): In this tutorial, you'll deploy a Hazelcast cluster and an instance of Management Center, using Hazelcast Platform Operator for Kubernetes.
- [Running Highly Available Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/high-availability-mode): High Availability Mode guarantees that even if the Kubernetes node or whole availability zone is down, and all related Hazelcast members are terminated, you will not experience any data loss.
- [Configuring JVM Parameters | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/jvm-parameters): You can configure the JVM in the <code>hazelcast</code> container using the <code>jvm</code> field of the CRD spec.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/map-configuration): Hazelcast maps are used to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures. You can create and configure maps using the <code>Map</code> resource.
- [Configuring MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/multimap-configuration): Hazelcast MultiMap, also known as IMultiMap, is a specialized map where you can store multiple values under a single key. Just like any other distributed data structure implementation in Hazelcast, MultiMap is distributed and thread-safe. You can create and configure MultiMaps using the <code>MultiMap</code> custom resource.
- [Configuring the Native Memory Store | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/native-memory): The Native Memory Store is a pluggable memory manager. It allows you to set up different configurations, or stores, for your application’s data structures on a single JVM. These memory stores form part of a common access layer which scales up to use a configured amount of memory on the JVM.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/phone-homes): Each instance of Hazelcast Platform Operator reports usage data to the Hazelcast phone home server when a Custom Resource is successfully deployed and every 24 hours after that. Hazelcast uses this data to learn about the usage of Hazelcast Platform Operator.
- [Configuring Queues | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/queue-configuration): Hazelcast distributed queue is an implementation of java.util.concurrent.BlockingQueue. Being distributed, Hazelcast distributed queue enables all cluster members to interact with it. Using Hazelcast distributed queue, you can add an item in one cluster member and remove it from another one. You can create and configure queue using the <code>Queue</code> custom resource.
- [5.7 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/release-notes)
- [Configuring Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/replicatedmap-configuration): A replicated map is a distributed key-value data structure where the data is replicated to all members in the cluster. It provides full replication of entries to all members for high-speed access. You can create and configure replicated maps using the <code>ReplicatedMap</code> custom resource.
- [Scheduling Hazelcast Pods | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/scheduling-configuration): You can make sure that pods for Hazelcast members are run on certain nodes, using the following scheduling principles of Kubernetes: node selector, node affinity, taints, and tolerations.
- [Configuring TLS | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/tls): Hazelcast TLS is a security feature that provides encryption and authentication of data transmitted between Hazelcast nodes, preventing unauthorized access and eavesdropping.
- [Configuring Topics | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/topic-configuration): Hazelcast provides a distribution mechanism for publishing messages that are delivered to multiple subscribers. This is known as a publish/subscribe (pub/sub) messaging model. Publishing and subscription operations are cluster wide. When a member subscribes to a topic, it is registered to receive messages published by any member in the cluster, including any new members that joined after you added the listener. You can create and configure topics using the <code>Topic</code> custom resource.
- [User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/user-code-deployment): Hazelcast allows you to deploy your own custom and domain classes to cluster members. From Hazelcast Platform Operator, you can deploy your application code from external buckets and ConfigMap objects in Kubernetes.
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.7/wan-replication): WAN replication allows you to keep Hazelcast clusters in sync across multiple sites or cloud deployments. In Hazelcast Platform Operator, you can create a <code>WanReplication</code> resource to replicate multiple maps from multiple source clusters to a single target Hazelcast cluster. 
- [Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.6/): Hazelcast Platform Operator automates common management tasks such as configuring, creating, scaling, and recovering Hazelcast clusters on Kubernetes and Red Hat OpenShift. By taking care of manual deployment and life-cycle management, Hazelcast Platform Operator makes it simpler to work with Hazelcast clusters.
- [Hazelcast Platform Operator API Docs | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.6/api-ref)
- [Persistence, Backup and Restore | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.6/backup-restore): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Configuring Cache | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.6/cache-configuration): Hazelcast offers a specification-compliant JCache implementation. The Hazelcast JCache implementation is 100% TCK (Technology Compatibility Kit) compliant and therefore passes all specification requirements. You can create and configure JCache using the <code>Cache</code> custom resource.
- [Connecting to Hazelcast from Outside Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.6/connect-outside-kubernetes): Hazelcast supports connections from both smart and unisocket clients that are outside your Kubernetes cluster. To allow these clients to connect to Hazelcast, you need to configure the `exposeExternally` field of the Hazelcast custom resource.
- [Deploy a Cluster with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.6/get-started): In this tutorial, you'll deploy a Hazelcast cluster and an instance of Management Center, using Hazelcast Platform Operator for Kubernetes.
- [Running Highly Available Hazelcast Clusters | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.6/high-availability-mode): High Availability Mode guarantees that even if the Kubernetes node or whole availability zone is down, and all related Hazelcast members are terminated, you will not experience any data loss.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.6/map-configuration): Hazelcast maps are used to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures. You can create and configure maps using the <code>Map</code> resource.
- [Migrating to 5.7 | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.6/migration-guide)
- [Configuring MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.6/multimap-configuration): Hazelcast MultiMap, also known as IMultiMap, is a specialized map where you can store multiple values under a single key. Just like any other distributed data structure implementation in Hazelcast, MultiMap is distributed and thread-safe. You can create and configure MultiMaps using the <code>MultiMap</code> custom resource.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.6/phone-homes): Each instance of Hazelcast Platform Operator reports usage data to the Hazelcast phone home server when a Custom Resource is successfully deployed and every 24 hours after that. Hazelcast uses this data to learn about the usage of Hazelcast Platform Operator.
- [Configuring Queues | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.6/queue-configuration): Hazelcast distributed queue is an implementation of java.util.concurrent.BlockingQueue. Being distributed, Hazelcast distributed queue enables all cluster members to interact with it. Using Hazelcast distributed queue, you can add an item in one cluster member and remove it from another one. You can create and configure queue using the <code>Queue</code> custom resource.
- [5.6 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.6/release-notes)
- [Configuring Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.6/replicatedmap-configuration): A replicated map is a distributed key-value data structure where the data is replicated to all members in the cluster. It provides full replication of entries to all members for high-speed access. You can create and configure replicated maps using the <code>ReplicatedMap</code> custom resource.
- [Scheduling Hazelcast Pods | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.6/scheduling-configuration): You can make sure that pods for Hazelcast members are run on certain nodes, using the following scheduling principles of Kubernetes: node selector, node affinity, taints, and tolerations.
- [Configuring Topics | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.6/topic-configuration): Hazelcast provides a distribution mechanism for publishing messages that are delivered to multiple subscribers. This is known as a publish/subscribe (pub/sub) messaging model. Publishing and subscription operations are cluster wide. When a member subscribes to a topic, it is registered to receive messages published by any member in the cluster, including any new members that joined after you added the listener. You can create and configure topics using the <code>Topic</code> custom resource.
- [User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.6/user-code-deployment): Hazelcast allows you to deploy your own custom and domain classes to cluster members. From Hazelcast Platform Operator, you can deploy your application code from external buckets and ConfigMap objects in Kubernetes.
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.6/wan-replication): WAN replication allows you to keep Hazelcast clusters in sync across multiple sites or cloud deployments. In Hazelcast Platform Operator, you can create a <code>WanReplication</code> resource to replicate multiple maps from multiple source clusters to a single target Hazelcast cluster. 
- [Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.5/): Hazelcast Platform Operator automates common management tasks such as configuring, creating, scaling, and recovering Hazelcast clusters on Kubernetes and Red Hat OpenShift. By taking care of manual deployment and life-cycle management, Hazelcast Platform Operator makes it simpler to work with Hazelcast clusters.
- [Hazelcast Platform Operator API Docs | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.5/api-ref)
- [Persistence, Backup and Restore | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.5/backup-restore): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Connecting to Hazelcast from Outside Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.5/connect-outside-kubernetes): Hazelcast supports connections from both smart and unisocket clients that are outside your Kubernetes cluster. To allow these clients to connect to Hazelcast, you need to configure the `exposeExternally` field of the Hazelcast custom resource.
- [Deploy a Cluster with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.5/get-started): In this tutorial, you'll deploy a Hazelcast cluster and an instance of Management Center, using Hazelcast Platform Operator for Kubernetes.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.5/map-configuration): Hazelcast maps are used to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures. You can create and configure maps using the <code>Map</code> resource.
- [Migrating to 5.6 | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.5/migration-guide)
- [Configuring MultiMaps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.5/multimap-configuration): Hazelcast MultiMap, also known as IMultiMap, is a specialized map where you can store multiple values under a single key. Just like any other distributed data structure implementation in Hazelcast, MultiMap is distributed and thread-safe. You can create and configure MultiMaps using the <code>MultiMap</code> custom resource.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.5/phone-homes): Each instance of Hazelcast Platform Operator reports usage data to the Hazelcast phone home server when a Custom Resource is successfully deployed and every 24 hours after that. Hazelcast uses this data to learn about the usage of Hazelcast Platform Operator.
- [Configuring Queues | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.5/queue-configuration): Hazelcast distributed queue is an implementation of java.util.concurrent.BlockingQueue. Being distributed, Hazelcast distributed queue enables all cluster members to interact with it. Using Hazelcast distributed queue, you can add an item in one cluster member and remove it from another one. You can create and configure queue using the <code>Queue</code> custom resource.
- [5.5 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.5/release-notes)
- [Configuring Replicated Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.5/replicatedmap-configuration): A replicated map is a distributed key-value data structure where the data is replicated to all members in the cluster. It provides full replication of entries to all members for high-speed access. You can create and configure replicated maps using the <code>ReplicatedMap</code> custom resource.
- [Scheduling Hazelcast Pods | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.5/scheduling-configuration): You can make sure that pods for Hazelcast members are run on certain nodes, using the following scheduling principles of Kubernetes: node selector, node affinity, taints, and tolerations.
- [Configuring Topics | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.5/topic-configuration): Hazelcast provides a distribution mechanism for publishing messages that are delivered to multiple subscribers. This is known as a publish/subscribe (pub/sub) messaging model. Publishing and subscription operations are cluster wide. When a member subscribes to a topic, it is registered to receive messages published by any member in the cluster, including any new members that joined after you added the listener. You can create and configure topics using the <code>Topic</code> custom resource.
- [User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.5/user-code-deployment): Hazelcast allows you to deploy your own custom and domain classes to cluster members. From Hazelcast Platform Operator, you can deploy your application code from external buckets and ConfigMap objects in Kubernetes.
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.5/wan-replication): WAN replication allows you to keep Hazelcast clusters in sync across multiple sites or cloud deployments. In Hazelcast Platform Operator, you can create a <code>WanReplication</code> resource to replicate multiple maps from multiple source clusters to a single target Hazelcast cluster. 
- [Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.4/): Hazelcast Platform Operator automates common management tasks such as configuring, creating, scaling, and recovering Hazelcast clusters on Kubernetes and Red Hat OpenShift. By taking care of manual deployment and life-cycle management, Hazelcast Platform Operator makes it simpler to work with Hazelcast clusters.
- [Hazelcast Platform Operator API Docs | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.4/api-ref)
- [Persistence, Backup and Restore | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.4/backup-restore): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Connecting to Hazelcast from Outside Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.4/connect-outside-kubernetes): Hazelcast supports connections from both smart and unisocket clients that are outside your Kubernetes cluster. To allow these clients to connect to Hazelcast, you need to configure the `exposeExternally` field of the Hazelcast custom resource.
- [Deploy a Cluster with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.4/get-started): In this tutorial, you'll deploy a Hazelcast cluster and an instance of Management Center, using Hazelcast Platform Operator for Kubernetes.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.4/map-configuration): Hazelcast maps are used to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures. You can create and configure maps using the <code>Map</code> resource.
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.4/migration-guide)
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.4/phone-homes): Each instance of Hazelcast Platform Operator reports usage data to the Hazelcast phone home server when a Custom Resource is successfully deployed and every 24 hours after that. Hazelcast uses this data to learn about the usage of Hazelcast Platform Operator.
- [5.4 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.4/release-notes)
- [Scheduling Hazelcast Pods | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.4/scheduling-configuration): You can make sure that pods for Hazelcast members are run on certain nodes, using the following scheduling principles of Kubernetes: node selector, node affinity, taints, and tolerations.
- [User Code Deployment | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.4/user-code-deployment): Hazelcast allows you to deploy your own custom and domain classes to cluster members. From Hazelcast Platform Operator, you can deploy your application code from external buckets and ConfigMap objects in Kubernetes.
- [Configuring WAN Replication | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.4/wan-replication): WAN Replication allows you to keep Hazelcast clusters in sync across multiple sites or cloud deployments. In Hazelcast Platform Operator, you can create a <code>WanReplication</code> resource to replicate a map from a source to a target Hazelcast cluster. 
- [Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.3/): Hazelcast Platform Operator automates common management tasks such as configuring, creating, scaling, and recovering Hazelcast clusters on Kubernetes and Red Hat OpenShift. By taking care of manual deployment and life-cycle management, Hazelcast Platform Operator makes it simpler to work with Hazelcast clusters.
- [Hazelcast Platform Operator API Docs | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.3/api-ref)
- [Persistence, Backup and Restore | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.3/backup-restore): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Connecting to Hazelcast from Outside Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.3/connect-outside-kubernetes): Hazelcast supports connections from both smart and unisocket clients that are outside your Kubernetes cluster. To allow these clients to connect to Hazelcast, you need to configure the `exposeExternally` field of the Hazelcast custom resource.
- [Deploy a Cluster with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.3/get-started): In this tutorial, you'll deploy a Hazelcast cluster and an instance of Management Center, using Hazelcast Platform Operator for Kubernetes.
- [Configuring Maps | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.3/map-configuration): Hazelcast maps are used to distribute data across a cluster and make it easy to scale your applications while protecting data against member failures. You can create and configure maps using the <code>Map</code> resource.
- [Migrating to 5.4 | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.3/migration-guide)
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.3/phone-homes): Each instance of Hazelcast Platform Operator reports usage data to the Hazelcast phone home server when a Custom Resource is successfully deployed and every 24 hours after that. Hazelcast uses this data to learn about the usage of Hazelcast Platform Operator.
- [5.3 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.3/release-notes)
- [Scheduling Hazelcast Pods | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.3/scheduling-configuration): You can make sure that pods for Hazelcast members are run on certain nodes, using the following scheduling principles of Kubernetes: node selector, node affinity, taints, and tolerations.
- [Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.2/): Hazelcast Platform Operator automates common management tasks such as configuring, creating, scaling, and recovering Hazelcast clusters on Kubernetes and Red Hat OpenShift. By taking care of manual deployment and life-cycle management, Hazelcast Platform Operator makes it simpler to work with Hazelcast clusters.
- [Hazelcast Platform Operator API Docs | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.2/api-ref)
- [Persistence, Backup and Restore | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.2/backup-restore): Persistence allows individual members and whole clusters to recover data by persisting map entries, JCache data, and streaming job snapshots on disk. Members can use persisted data to recover from a planned shutdown (including rolling upgrades), a sudden cluster-wide crash, or a single member failure.
- [Connecting to Hazelcast from Outside Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.2/connect-outside-kubernetes): Hazelcast supports connections from both smart and unisocket clients that are outside your Kubernetes cluster. To allow these clients to connect to Hazelcast, you need to configure the `exposeExternally` field of the Hazelcast custom resource.
- [Deploy a Cluster with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.2/get-started): In this tutorial, you'll deploy a Hazelcast cluster and an instance of Management Center, using Hazelcast Platform Operator for Kubernetes.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.2/phone-homes): Each instance of Hazelcast Platform Operator reports usage data to the Hazelcast phone home server when a Custom Resource is successfully deployed and every 24 hours after that. Hazelcast uses this data to learn about the usage of Hazelcast Platform Operator.
- [5.2 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.2/release-notes)
- [Scheduling Hazelcast Pods | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.2/scheduling-configuration): You can make sure that pods for Hazelcast members are run on certain nodes, using the following scheduling principles of Kubernetes: node selector, node affinity, taints, and tolerations.
- [Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.1/): Hazelcast Platform Operator automates common management tasks such as configuring, creating, scaling, and recovering Hazelcast clusters on Kubernetes and Red Hat OpenShift. By taking care of manual deployment and life-cycle management, Hazelcast Platform Operator makes it simpler to work with Hazelcast clusters.
- [Connecting to Hazelcast from Outside Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.1/connect-outside-kubernetes): Hazelcast supports connections from both smart and unisocket clients that are outside your Kubernetes cluster. To allow these clients to connect to Hazelcast, you need to configure the `exposeExternally` field of the Hazelcast custom resource.
- [Deploy a Cluster with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.1/get-started): In this tutorial, you'll deploy a Hazelcast cluster and an instance of Management Center, using Hazelcast Platform Operator for Kubernetes.
- [Phone Homes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.1/phone-homes): Each instance of Hazelcast Platform Operator reports usage data to the Hazelcast phone home server when a Custom Resource is successfully deployed and every 24 hours after that. Hazelcast uses this data to learn about the usage of Hazelcast Platform Operator.
- [5.1 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.1/release-notes): In this release, we introduced pod scheduling support and added Phone Home service to collect usage data to shape our roadmap.
- [Scheduling Hazelcast Pods | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.1/scheduling-configuration): You can make sure that pods for Hazelcast members are run on certain nodes, using the following scheduling principles of Kubernetes: node selector, node affinity, taints, and tolerations.
- [Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.0/): Hazelcast Platform Operator automates common management tasks such as configuring, creating, scaling, and recovering Hazelcast clusters on Kubernetes and Red Hat OpenShift. By taking care of manual deployment and life-cycle management, Hazelcast Platform Operator makes it simpler to work with Hazelcast clusters.
- [Connecting to Hazelcast from Outside Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.0/connect-outside-kubernetes): Hazelcast supports connections from both smart and unisocket clients that are outside your Kubernetes cluster. To allow these clients to connect to Hazelcast, you need to configure the `exposeExternally` field of the Hazelcast custom resource.
- [Deploy a Cluster with the Hazelcast Platform Operator for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.0/get-started): In this tutorial, you'll deploy a Hazelcast cluster and an instance of Management Center, using Hazelcast Platform Operator for Kubernetes.
- [5.0 Release Notes | Hazelcast Documentation](https://docs.hazelcast.com/operator/5.0/release-notes): This is the first stable release of Hazelcast Platform Operator.

## Privacy

- [Privacy Policy](https://docs.hazelcast.com/privacy/)

## Templates

- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/templates/microservices/application-structure)
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/templates/microservices/prerequisites)
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/templates/microservices/what-you-will-learn)
- [Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/templates/start-hz-cluster)

## Tutorials

- [Tutorials](https://docs.hazelcast.com/tutorials/)
- [Active Directory Authentication | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/active-directory-authentication): In this tutorial, you will learn how to configure Hazelcast IMDG Enterprise to authenticate cluster members and clients using Kerberos tickets in the Microsoft Active Directory domain.
- [Airline Connections Demo/Tutorial | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/airline-connections): This tutorial provides detailed information and instructions for the Airline Connections demo, which is built in to Hazelcast Cloud Trial.
- [Get Started with Hazelcast and Micronaut | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/caching-micronaut): This tutorial will get you started with Hazelcast in a Micronaut application.
- [Cache with Spring Boot and Hazelcast Cache Manager | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/caching-springboot): In this tutorial, you'll deploy a Spring Boot application that uses Hazelcast as a cache manager.
- [Cache Data in Spring Boot with Hazelcast and JCache | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/caching-springboot-jcache): This guide will get you started with Hazelcast as a JCache provider for your Spring Boot application.
- [Process Customer Satisfaction Scores on Hazelcast Cloud | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/compute-standard-deviation): In this tutorial, you'll build an application that calculates the standard deviation of customer satisfaction scores, using code that's executed on each member of a Hazelcast Cloud cluster.
- [Hazelcast with Consul Service Mesh | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/consul): Use Hazelcast in a Consul environment.
- [Getting Started with the Hazelcast C++ Client | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/cpp-client-getting-started): This tutorial will get you started with the Hazelcast C++ client and manipulate a map.
- [CP Subsystem and CPMap Tutorial | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/cpsubsystem): In this tutorial, you will examine the operations of a CP-enabled Hazelcast Platform cluster, then work with the CPMap data structure using the Hazelcast CLC.
- [Query Streams from Confluent Cloud | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/create-materialized-view-from-kafka): In this tutorial, you'll learn how to connect your cluster to Confluent Cloud, using SQL. You'll also learn how to build a materialized view from streaming data and contextual data in Hazelcast.
- [Getting Started with the Hazelcast .NET Client | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/csharp-client-getting-started): In this tutorial you will see how to connect with the Hazelcast .NET client and manipulate a map.
- [Deploy Hazelcast Cluster on AWS EC2 | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/ec2-cluster): In this tutorial, you will create two EC2 instances with Hazelcast members and see them connecting to each other and forming a cluster via Hazelcast AWS plugin.
- [Get Started with Embedded Hazelcast on ECS | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/ecs-embedded): In this tutorial, you'll deploy an application with embedded Hazelcast on an ECS cluster. Hazelcast members from each application replica will automatically discover themselves and form one consistent Hazelcast cluster. Thanks to https://github.com/hazelcast/hazelcast-aws[Hazelcast AWS discovery plugin], there is no static configuration needed.
- [Document moved](https://docs.hazelcast.com/tutorials/Embedded-Eureka-discovery)
- [Create a Failover Client | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/failover-clients-with-hazelcast-cloud): In this tutorial, you'll update the code in a Java client to automatically connect to a secondary, failover cluster if it cannot connect to its original, primary cluster. You'll also run a simple test to make sure that your configuration is correct and then adjust it to include exception handling.
- [Getting Started with the Hazelcast Go Client | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/go-client-getting-started): This tutorial will get you started with the Hazelcast Go client and manipulate a map.
- [Get Started with Hazelcast and Quarkus | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/hazelcast-client-quarkus): Set up a native image-ready Quarkus application, using a Hazelcast client.
- [Get Started with Hazelcast and Microprofile | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/hazelcast-embedded-microprofile): In this tutorial, you will learn how to use Hazelcast within Microprofile microservices.
- [Get Started with Hazelcast using Spring Boot | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/hazelcast-embedded-springboot): This tutorial will get you started with Hazelcast in a Spring Boot application.
- [Connect to Hazelcast from Outside Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/hazelcast-platform-operator-expose-externally): In this tutorial, you'll connect to a Hazelcast cluster running in Kubernetes from outside of the Kubernetes environment.
- [Restore a Cluster from Cloud Storage with Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/hazelcast-platform-operator-external-backup-restore): Learn how to back up data in Hazelcast maps to cloud storage and restore a cluster from that backup data.
- [Run a Data Pipeline Using Jet with Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/hazelcast-platform-operator-jet): Learn how to run a data pipeline in Hazelcast using Jet.
- [Saving the State of Jet Job with Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/hazelcast-platform-operator-jet-job-snapshot): Learn how to save the state of your data pipelines and initiate a data pipeline from an existing state using the Hazelcast Platform Operator.
- [Configure TLS with Hazelcast Platform Operator tutorial | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/hazelcast-platform-operator-tls): Learn how to secure Hazelcast cluster with TLS and Hazelcast Kubernetes Operator.
- [Deploying Custom Classes With the User Code Namespace | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/hazelcast-platform-operator-user-code-namespace): Learn how to deploy custom classes with the User Code Namespace
- [Replicate Data between Two Hazelcast Clusters with Hazelcast Platform Operator | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/hazelcast-platform-operator-wan-replication): Learn how to keep data in sync across two Hazelcast clusters.
- [Synchronize Data between Two Hazelcast Clusters using WAN Sync | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/hazelcast-platform-operator-wan-sync): Learn how to synchronize data across two Hazelcast clusters using WAN Sync.
- [Get Started with Hazelcast as a Hibernate Second-Level Cache with JCache | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/hibernate-jcache): In this tutorial, you will learn how to use Hazelcast as a Hibernate second-level cache by leveraging Hibernate's JCache (JSR 107) support. You will also learn how to integrate Hazelcast with Hibernate without using the <code>hazelcast-hibernate</code> integration.
- [Hazelcast with Istio Service Mesh | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/istio): Use Hazelcast in an Istio environment.
- [Getting Started with the Hazelcast Java Client | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/java-client-getting-started): This tutorial will get you started with the Hazelcast Java client and manipulate a map.
- [Stream-To-Stream Joins with SQL | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/join-two-streams): Learn how to join two streams of data and process the results, using SQL.
- [Hazelcast for Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/kubernetes): In this tutorial, you will deploy a Hazelcast cluster to Kubernetes and connect it to a Kubernetes application.
- [Get Started with Embedded Hazelcast on Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/kubernetes-embedded): Deploy an application with embedded Hazelcast into a Kubernetes cluster.
- [Connect To Hazelcast Running on Kubernetes from Outside | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/kubernetes-external-client): Deploy a Hazelcast Kubernetes cluster and connect to it, using a client outside Kubernetes.
- [Kubernetes Horizontal Pod Autoscaler for Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/kubernetes-hpa): Deploy Hazelcast on a Kubernetes cluster and set up Kubernetes Horizontal Pod Autoscaler (HPA), using Resource Metrics and Custom Metrics.
- [Hazelcast as Sidecar Container in Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/kubernetes-sidecar): Use Hazelcast as a sidecar container for applications deployed on Kubernetes.
- [Hazelcast with SSL in Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/kubernetes-ssl): Enable SSL between Hazelcast members and Hazelcast clients in Kubernetes.
- [Hazelcast WAN Replication in Kubernetes | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/kubernetes-wan): Synchronize data in two Hazelcast clusters that are hosted in different Kubernetes environments, using WAN Replication.
- [Hazelcast with Linkerd Service Mesh | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/linkerd): Use Hazelcast in a Linkerd environment.
- [Getting Started with the Hazelcast Node.js Client | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/nodejs-client-getting-started): This tutorial will get you started with the Hazelcast Node.js client and manipulate a map.
- [Use Hazelcast with OpenFaaS | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/openfaas-hz-client): Use Hazelcast clients in OpenFaaS functions to connect to Hazelcast clusters on Kubernetes.
- [Getting Started with the Hazelcast Python Client | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/python-client-getting-started): This tutorial will get you started with the Hazelcast Python client and manipulate a map.
- [Fraud Detection with AWS and Hazelcast Cloud | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/serverless-fraud-detection): In this tutorial, you'll build a solution for detecting fraudulent transactions using AWS Lambda, Hazelcast Viridian Cloud, and Node.js.
- [Monitor Trades in Real-Time Using Cloud | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/serverless-trade-monitor-dashboard): Deploy a Java application that updates a trade monitoring dashboard in real-time.
- [Create a Spring Boot Application for Hazelcast Cloud | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/spring-boot-client): In this tutorial, you'll learn how to create a basic Spring Boot application that connects to a cluster.
- [Spring Session Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/spring-session-hazelcast): In this tutorial, you will deploy two Spring Boot applications that use Hazelcast as a HTTP session store and hence share sessions among each other.
- [Get Started with Hazelcast and Hibernate Second-Level Cache | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/springboot-hibernate): In this tutorial, you'll learn how to quickly set up a Spring Boot application using Hazelcast as a Hibernate second-level cache.
- [Spring Boot Tomcat Session Replication using Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/springboot-tomcat-session-replication): In this tutorial, you'll learn how to use Hazelcast with Tomcat session replication in Spring Boot microservices.
- [Session Replication with Spring Boot and Hazelcast | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/springboot-webfilter-session-replication): In this tutorial, you'll deploy two Spring Boot applications which use Hazelcast for session replication.
- [SQL Basics on Hazelcast Cloud (Stock Ticker) | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/sql_stock_ticker_cloud): Use SQL to perform streaming queries, data enrichment, windowed aggregations, stream-to-stream joins, and create jobs.
- [Generating Streaming Data Using SQL | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/sql-gen-data): Use SQL on Hazelcast to generate randomized streaming data for demo/POC purposes.
- [Connect Hazelcast to Kafka Clusters Secured with Kerberos | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/stream-from-kafka-kerberos): Learn how to connect Hazelcast Jet pipelines to Kafka clusters that are secured with Kerberos authentication.
- [Pipeline API Tutorial - The Machine Shop | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/stream-processing-fundamentals): Use the Hazelcast Pipeline API to build an application for modifying machine shop operations based on real time telemetry.
- [Document moved](https://docs.hazelcast.com/tutorials/Stream-Processing-Intro)
- [Deploy a Hazelcast Cluster in the Cloud using Terraform | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/terraform-quickstarts): Deploy a Hazelcast cluster and Hazelcast Management Center on AWS, Azure, or GCP using Terraform.
- [User Code Namespace Tutorial | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/user-code-namespace): This is a  demonstration of user code namespaces.  In this exercise, we will be working with a Spring Boot service that uses an entry processor to perform a basic authorization. We will then update the entry processor without restarting the cluster.
- [Use Cloud Standard as a Write-Through Cache with MongoDB Atlas | Hazelcast Documentation](https://docs.hazelcast.com/tutorials/write-through-cache-serverless-mapstore): In this tutorial, you'll build an application that writes changes made to a map back to MongoDB Atlas.


